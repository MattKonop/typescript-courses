{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v3/10-classes/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"17eeebcb-2df5-5018-aea8-5323fd8ae507","excerpt":"TypeScript classes add some powerful and important features on top\nof traditional JavaScript classes. In this unit, we will take a closer look at\nclass fields…","html":"<p>TypeScript classes add some powerful and important features on top\nof traditional JavaScript classes. In this unit, we will take a closer look at\n<strong>class fields</strong>, <strong>access modifier keywords</strong> and more!</p>\n<h2 id=\"class-fields\" style=\"position:relative;\"><a href=\"#class-fields\" aria-label=\"class fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Fields</h2>\n<p>Let’s go back to our car example. In the JS world, we could have\nsomething like:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">// JavaScript, not TypeScript //</span></div><div class='line'><span style=\"color: #6E7781\">////////////////////////////////</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: any' >make</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: any' >model</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: any' >year</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: any' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: any' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: any' style='border-bottom: solid 2px lightgrey;'>model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: any' >model</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) Car.model: any</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: any' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: any' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let sedan: Car' >sedan</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: any, model: any, year: any): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let sedan: Car' >sedan</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='any' >activateTurnSignal</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"left\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div><div class='line'><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: any, model: any, year: any): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQ18ZYFAgBAKQIYDckGUDGAnAlgBwBcAaOAOwHtC4AVAT3wFMs8i4RYovuZMAbJAGdBcAMJJscAN7Q4cTBTKDC2AK6ZCFbAAoAtkgDWjUrooATRn1J1GEgJTTZcuIQAWuQQDp9RuAF44H0YnOTcPb3NLf0DIvhD2YGc5AD0AfniwrxsJaOzsJwBfaCLoPkZqQUYzJDJoskYAdzEJbQAiAAlFatbSVoBBTAVsMx64ACYABgBGAHY7aErqsk8kDVw0QkYaVWwydFwAczIkPjaygDNCVod4Sgqkc8YAQmh6pvEdSdnezrJu3oGQxGN0SdzgggezyAA'>Try</a></div></pre>\n<p>If we stop and think for a moment, this makes sense in a world (the JS world) where\nevery value, including the class fields and instances of the class itself, is\neffectively of type <code>any</code>.</p>\n<p>In the TypeScript world, we want some assurance that we will be stopped at compile time\nfrom invoking the non-existent <code>activateTurnSignal</code> method on our car. In order to get this\nwe have to provide a little more information up front:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' style='border-bottom: solid 2px lightgrey;'>model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(property) Car.model: string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let sedan: Car' >sedan</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let sedan: Car' >sedan</data-lsp>.</span><span style=\"color: #8250DF\"><data-err><data-lsp lsp='any' >activateTurnSignal</data-lsp></data-err></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"left\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div><span class=\"error\"><span>Property 'activateTurnSignal' does not exist on type 'Car'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'activateTurnSignal' does not exist on type 'Car'.</span><div class='line'><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-err>2017</data-err></span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// not safe!</span></div><span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50YCwCsAUCBAHZwCSAtgA4A2AlgMZMAuAguQJ6rvQArpGIsGAQ0SJQAYXHRQAb2KhQNcQGtIqRAKbkA5irVwAJpAY69h4z0jzU5QTQBGMYyzjldQluwQAFOpaVtD6BgA0JuaWoD7hUXYOoE6uMACUSsaq7AAWTIgAdMGQoAC8apoiqjn5RTRmFuXRFtmgZDWgAHoA-G15BYVJChXDxgC+xJPEDJDscZCm4uTN5JAA7rLyAQBEABJeSztRO5wsntCmx+gADACMAOzpxIiLy4XifkwAbuLskAAVQTQcgAZSYBnI4gYu1mADN2DtMmRKPNEOI4ZAAITENabOTQAJoe4PE4HchHE5nC5XZFgVFxDHYoA'>Try</a></div></pre>\n<p>Two things to notice in the code snippet above:</p>\n<ul>\n<li>We are stating the types of each class field</li>\n<li>We are stating the types of each constructor argument</li>\n</ul>\n<p>This syntax is getting a bit verbose now — for example, the words\n“make”, “model” and “year” are written in four places each. As we will\nsee below, TypeScript\nhas a more concise way to write code like this. But first, we need to discuss the concept of <strong>access modifier keywords</strong>.</p>\n<h2 id=\"access-modifier-keywords\" style=\"position:relative;\"><a href=\"#access-modifier-keywords\" aria-label=\"access modifier keywords permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access modifier keywords</h2>\n<h3 id=\"public-private-and-protected\" style=\"position:relative;\"><a href=\"#public-private-and-protected\" aria-label=\"public private and protected permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>public</code>, <code>private</code> and <code>protected</code></h3>\n<p>TypeScript provides three <strong>access modifier keywords</strong>, which can be used\nwith class fields and methods, to describe <strong>who should be able to see and use them</strong>.</p>\n<table>\n<thead>\n<tr>\n<th>keyword</th>\n<th>who can access</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>everyone (this is the default)</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>the instance itself, and subclasses</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>only the instance itself</td>\n</tr>\n</tbody>\n</table>\n<p>Let’s see how this works in the context of an example:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">protected</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.vinNumber: number' >vinNumber</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function generateVinNumber(): number' >generateVinNumber</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">private</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.doorLockCode: number' >doorLockCode</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function generateDoorLockCode(): number' >generateDoorLockCode</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">protected</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.unlockAllDoors(): void' >unlockAllDoors</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\"><data-lsp lsp='function unlockCar(c: Car, code: number): void' >unlockCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.doorLockCode: number' >doorLockCode</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Sedan' >Sedan</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">(<data-lsp lsp='(parameter) make: string' >make</data-lsp>, <data-lsp lsp='(parameter) model: string' >model</data-lsp>, <data-lsp lsp='(parameter) year: number' >year</data-lsp>)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.vinNumber: number' style='border-bottom: solid 2px lightgrey;'>vinNumber</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>(property) Car.vinNumber: number</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-err><data-lsp lsp='(property) Car.doorLockCode: number' style='border-bottom: solid 2px lightgrey;'>doorLockCode</data-lsp></data-err></span></div><span class=\"error\"><span>Property 'doorLockCode' is private and only accessible within class 'Car'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'doorLockCode' is private and only accessible within class 'Car'.</span><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>(property) Car.doorLockCode: number</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Sedan.unlock(): void' >unlock</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Unlocking at \"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">().</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Date.toISOString(): string' >toISOString</data-lsp></span><span style=\"color: #24292F\">())</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.unlockAllDoors(): void' >unlockAllDoors</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let s: Sedan' >s</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Sedan(make: string, model: string, year: number): Sedan' >Sedan</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let s: Sedan' >s</data-lsp>.<data-lsp lsp='(property) Car.make: string' style='border-bottom: solid 2px lightgrey;'>make</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>(property) Car.make: string</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let s: Sedan' >s</data-lsp>.<data-err><data-lsp lsp='(property) Car.vinNumber: number' style='border-bottom: solid 2px lightgrey;'>vinNumber</data-lsp></data-err></span></div><span class=\"error\"><span>Property 'vinNumber' is protected and only accessible within class 'Car' and its subclasses.</span><span class=\"code\">2445</span></span><span class=\"error-behind\">Property 'vinNumber' is protected and only accessible within class 'Car' and its subclasses.</span><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>(property) Car.vinNumber: number</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let s: Sedan' >s</data-lsp>.<data-err><data-lsp lsp='(property) Car.doorLockCode: number' style='border-bottom: solid 2px lightgrey;'>doorLockCode</data-lsp></data-err></span></div><span class=\"error\"><span>Property 'doorLockCode' is private and only accessible within class 'Car'.</span><span class=\"code\">2341</span></span><span class=\"error-behind\">Property 'doorLockCode' is private and only accessible within class 'Car'.</span><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>(property) Car.doorLockCode: number</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='let s: Sedan' >s</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Sedan.unlock(): void' >unlock</data-lsp></span><span style=\"color: #24292F\">()</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBGdWsBWAKBAgDs4BJAWwAcAbASwGMmAXAQXIE9V3oAV0jEAZoPIt2TOOVABzSORgBDdpAAicBABk4LANYBhOABNIACgCUoAN7FQoaJHaDocgLJqAFgDpoKuSmcDTWxAC+YhJSMnKKygHqAGpM5ABygjQARjDWdg5OLm6ePv6BwaFWEVGS0rKgEgz6xirQFiyoRq0ANKAsZpCo5Jk50Db2jsAAVFPA1SBgALTLLILsy4vELAwqiIigXdD5jnSCWcwsoDQqBoOgiAKp8gWn56xXAwyoD9BPL2cXUA8SCtIYjGAveDqKSQUygABuqQy2RgoAAvAolKpkkjwW0qidfvC1JBQMFdM0TOZ0ZiEiStBTDFTLFUCv1yD9BFIEBZrrdvo9yPJejRPgLfkLesDQaBhiixsdHKB2N4mIhfHzSRjNQVHCq1RrPjTReYGLrlar1dKjhjrQVIpC4ND1HDGs1OAwGAykHkJkq3UzWhZ9YheiHfOToHomQMCaBIg7trt9gBlWGBUCQAAe6iC+0OivZnO5bU14qeIrF90FwqBIOgYPl43NiEEdFymsrpql9bjestvkR6Tx5rISoAegB+c3hyPR4wDUdgCfTxyRE4A94Bgy+81FuAMSC+JryCwAIgAquQmoYnqA1KAz6AANSyyAAd1AGhJ1l87GoKYAPIpjW1h9haBrbh6XraD6cYJsQxCHuw9w0son5pqYgTngAErIWFnr0Z6cCw-TQKYhHoAADDgADsVTqjqZBTsQ6pDsioykGALHqnOlKLsx07qtu1hAA'>Try</a></div></pre>\n<p>A couple of things to note in the example above:</p>\n<ul>\n<li>The top-level scope doesn’t seem to have access to <code>vinNumber</code> or <code>doorLockCode</code></li>\n<li><code>Sedan</code> doesn’t have direct access to the <code>doorLockCode</code>, but it can access <code>vinNumber</code> and <code>unlockAllDoors()</code></li>\n<li>\n<p>We see two examples of “limited exposure”</p>\n<ul>\n<li><code>Car</code> can expose <code>private</code> functionality through defining its own <code>protected</code> functionality</li>\n<li><code>Sedan</code> can expose <code>protected</code> functionality through defining its own <code>public</code> functionality</li>\n</ul>\n</li>\n</ul>\n<div class=\"custom-block warning\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-warning\" data-icon=\"emoji-warning\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-warning\"> Not for secret-keeping or security</div><div class=\"custom-block-body\"><p>It is important to understand that, just like any other aspect of type information, access modifier keywords\nare only <strong>validated at compile time, with no real privacy or security benefits at runtime</strong>.\nThis means that even if we mark something as <code>private</code>, if a user decides to set a breakpoint and\ninspect the code that’s executing at runtime, they’ll still be able to see everything.</p></div></div>\n<h3 id=\"js-private-fields\" style=\"position:relative;\"><a href=\"#js-private-fields\" aria-label=\"js private fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS private <code>#fields</code></h3>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#ecmascript-private-fields\">As of TypeScript 3.8</a>, TypeScript supports\nuse of <a href=\"https://github.com/tc39/proposal-class-fields/\">ECMAScript private class fields</a>. If you have\ntrouble getting this to work in your codebase, make sure to double-check your Babel settings</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">#year</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.#year </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const c: Car' >c</data-lsp>.<data-err>#year</data-err></span></div><span class=\"error\"><span>Property '#year' is not accessible outside class 'Car' because it has a private identifier.</span><span class=\"code\">18013</span></span><span class=\"error-behind\">Property '#year' is not accessible outside class 'Car' because it has a private identifier.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwA4AMaDMAoAYwBsBDRRUAYVOlAG99RQAHAVwCNiBLQ0AW1IBrSKkQAXaNwB2AcyatOPPvzgATSMTGSZ85gGIAnpFqppbfhxj4FhONInQ2hcQgAUgkdqlyANAPVNb11-Y1NQc0sYAEoGBWZxAAtuRAA6T0hQAF4BYUh40CSU9MDibICNYgKitKMTOhyw6AUAX3w2uwdxUD4c6UgAd2paNwAiAAl7NVJR-1GAQUI7aDVZ0AAmHAB2aKJUutogA'>Try</a></div></pre>\n<h3 id=\"readonly\" style=\"position:relative;\"><a href=\"#readonly\" aria-label=\"readonly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>readonly</code></h3>\n<p>While not strictly an access modifier keyword (because it has nothing to do with visibility),\nTypeScript provides a <a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#readonly\"><code>readonly</code></a> keyword that can be used with class fields.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Car.updateYear(): void' >updateYear</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-err><data-lsp lsp='(property) Car.year: any' >year</data-lsp></data-err></span><span style=\"color: #CF222E\">++</span></div><span class=\"error\"><span>Cannot assign to 'year' because it is a read-only property.</span><span class=\"code\">2540</span></span><span class=\"error-behind\">Cannot assign to 'year' because it is a read-only property.</span><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYAsAGAUAMYA2AhooqAMInSgDeeooADgK4BGRAlgaALYkA1pFSIALtC4A7AOaMWHbrz5wAJpCKiJ0uUzaceoaJBKq4UogE9Qlk9FRTWfdjDzyC58dFYExCABQCwlqSsgA0-GoaIToRtjQOTi7QAJT08kxiABZciAB0QZCgALz8QpAZoNm5BVFEJZHqRJXV+fG0pe3yAL5uTKzMqiRikACadv5pDEyZOW12ANQLPXjdQA'>Try</a></div></pre>\n<h2 id=\"param-properties\" style=\"position:relative;\"><a href=\"#param-properties\" aria-label=\"param properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Param properties</h2>\n<p>Ok, let’s pop a stack frame. Now that we know about access modifier keywords, let’s\nreturn to an earlier code snippet from our discussion around class fields:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.make: string' >make</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) make: string' >make</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.model: string' >model</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) model: string' >model</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.<data-lsp lsp='(property) Car.year: number' >year</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) year: number' >year</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUOsgIYDOjoAwvaaAN7Wijz0A1pWKMyqSAHNe-aABNKyUeKkz8lDsUjl4AI0qkZ6aJDEV0WaKQAUA4ctITJAGlkKloM09frNobXoGAJTcMnxYABaojAB0dpSgALz8QjR84VGx8PKKSW6KYSSZMb6cyaUyAL7UlUA'>Try</a></div></pre>\n<p>TypeScript provides a more concise syntax for code like this, through the\nuse of <em>param properties</em>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  ) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const myCar: Car' >myCar</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string, model: string, year: number): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const myCar: Car' >myCar</data-lsp>.<data-lsp lsp='(property) Car.make: string' >make</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>m</span>ake</span></li><li class=''><span><span class='result-found'>m</span>odel</span></li></ul></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUOsgIYDOjoAwvaaAN7WijrRIjMuXRZopABS8+oROQBGadKHj0A1pWLDSqSAHMANDL7ylGVdAAmlZNrJ6jJuYuWh8lDsUjl4CyqQyAJTcAL7U4bSCwqr47JwAvKCQlADubBySAEQAEoJW9FmGoFk46AKkVkWgAEwADACMAOxB1PBxHAB0aprUILJ8AHoAPkA'>Try</a></div></pre>\n<p>This is the only time you will see an access modifier keyword\nnext to something other than a class member. Here’s what this\nsyntax means, conceptually:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Car</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">make</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<blockquote>\n<p>The first argument passed to the constructor should be a\n<code>string</code>, and should be available within the scope of the constructor\nas <code>make</code>. This also creates a <code>public</code> class field on <code>Car</code> called <code>make</code> and\npass it the value that was given to the constructor</p>\n</blockquote>\n<p>It is important to understand the order in which “constructor-stuff” runs.</p>\n<p>Here’s an example that will help us understand how this works:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.foo: void' >foo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"class field initializer\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"custom constructor stuff\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"honda\"</span><span style=\"color: #24292F\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEBCkFNoG8C+AodpIwMJgCdoEAPAFwQDsATGeCJZdaaAMwHt3oBeaYdyhHYgEAOhDsA5gAoARNihsAlghDVoSykrJKwIJQC8EBWQEpmfARDIEArsDLsC0gA62ARvuDQAtmADWCABc0NYEmpKmKBYsELYuxtLmLCz8gsJiEjLyttbsPpaCNvaORNa2rKxmFhgYWFZkfDzQlAgA7tD4zrIAFgLUYGZAA'>Try</a></div></pre>\n<p>and the equivalent compiled output:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0A3069\">\"use strict\"</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Base</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Car</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Base</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">make</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.make </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> make;</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.foo </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"class field initializer\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">        console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"custom constructor stuff\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">c</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">Car</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"honda\"</span><span style=\"color: #24292F\">);</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKATAAwCMArJgMYA2ekkoAQtxKgA3gF9M7Lj1ABhQqBIAPdCQB2AE14DIQ4ZlCgAZrFigAvKDaxVkWBxIA6DrCIAKAESduvQ6hId1UFRVDFQ8DlQALxICdwBKfUtrSHQCAFc2dFgCVwAHNIAjCLZQZDwAaxJKFIJgojiRRININNyY1wSDAysbO0dnN080lNhkJJtUjKyCUBS0w0N4xPFxdmT0S3NQVRJ4WUIPOA08eKA'>Try</a></div></pre>\n<p>Note the following order of what ends up in the class constructor:</p>\n<ol>\n<li><code>super()</code></li>\n<li>param property initialization</li>\n<li>other class field initialization</li>\n<li>anything else that was in your constructor after <code>super()</code></li>\n</ol>\n<p>Also note that, while it is possible in JS to put stuff before <code>super()</code>,\nthe use of class field initializers or param properties disallows this:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Base' >Base</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.foo: void' >foo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"class field initializer\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"before super\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"custom constructor stuff\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const c: Car' >c</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(make: string): Car' >Car</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"honda\"</span><span style=\"color: #24292F\">)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYDsA2AUAMYA2AhooqAEJmSgDeAvnoaeaAMInSiQAeALpAB2AEwrVEtOnlCgAZnDigAvKAJwhiOEUgA6InADmACgBExMhTkBLSERGhrQ6-2ski1gF4xTAShlqGoj80ACuBPwIxgAOoQBGHgSgALYkANaQqMHQToa+9AGy6praegYmpnGQCtC0iKHRPv6ysvWN0MbNLcVaOvpGZgShwXDJgZoh4ZHcwaFycn4BTEyEQfxqKqBCkADuHFxmABYaIiR+QA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li><a href=\"#class-fields\">Class Fields</a></li>\n<li>\n<p><a href=\"#access-modifier-keywords\">Access modifier keywords</a></p>\n<ul>\n<li><a href=\"#public-private-and-protected\"><code>public</code>, <code>private</code> and <code>protected</code></a></li>\n<li><a href=\"#js-private-fields\">JS private <code>#fields</code></a></li>\n<li><a href=\"#readonly\"><code>readonly</code></a></li>\n</ul>\n</li>\n<li><a href=\"#param-properties\">Param properties</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v3/10-classes/"},"frontmatter":{"title":"Classes","course":"fundamentals-v3","date":"June 08, 2021","description":"TypeScript classes add some powerful and important features on top\nof traditional JavaScript classes. In this unit, we will take a close look\nclass fields, access modifier keywords and more!\n"}}},"pageContext":{"slug":"/course/fundamentals-v3/10-classes/","title":"Classes","course":"fundamentals-v3","order":10,"previous":{"fields":{"slug":"/course/fundamentals-v3/09-functions/"},"frontmatter":{"title":"Functions","order":9,"course":"fundamentals-v3","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v3/11-top-and-bottom-types/"},"frontmatter":{"title":"Top and bottom types","order":11,"course":"fundamentals-v3","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}