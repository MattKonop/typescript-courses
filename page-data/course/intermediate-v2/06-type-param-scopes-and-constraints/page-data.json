{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/06-type-param-scopes-and-constraints/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"2e9b3a78-185c-505d-b629-98a7ab0f67d7","excerpt":"Now that we have covered the basic use of Generics, let’s layer on two more concepts: how scoping works with type params, and how we can describe type params…","html":"<p>Now that we have covered the basic use of Generics, let’s layer on two more concepts: how <a href=\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html#scoping-rules\">scoping</a> works with type params, and how we can describe type params that have more specific requirement than <code>any</code>.</p>\n<h2 id=\"generic-constraints\" style=\"position:relative;\"><a href=\"#generic-constraints\" aria-label=\"generic constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Constraints</h2>\n<p>Generic constraints allow us to describe the “minimum requirement” for a type param, such that we can achieve a high degree of flexibility, while still being able to safely assume <em>some</em> minimal structure and behavior for use within the scope that has access to the type param.</p>\n<h3 id=\"motivating-use-case\" style=\"position:relative;\"><a href=\"#motivating-use-case\" aria-label=\"motivating use case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motivating use case</h3>\n<p>Let’s recall the example we used in our Generics chapter:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >listToDict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\">&gt;(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\">[], </span><span style=\"color: #6E7781\">// array as input</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// fn for obtaining item&apos;s id</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\"> } {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// create dict to fill</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const dict: {&#10;    [k: string]: T;&#10;}' >dict</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\"> } </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">for</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let item: T' >item</data-lsp> </span><span style=\"color: #CF222E\">of</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) list: T[]' >list</data-lsp>) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// for each item</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='const dict: {&#10;    [k: string]: T;&#10;}' >dict</data-lsp>[</span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='let item: T' >item</data-lsp>)] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let item: T' >item</data-lsp> </span><span style=\"color: #6E7781\">// make a key store in dict</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const dict: {&#10;    [k: string]: T;&#10;}' >dict</data-lsp> </span><span style=\"color: #6E7781\">// result</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtAHkwD4AKAKERXSgC5FMBtAXQBpEB6DxAQwCc+PAJ680iGGAAOIKJXEATAOIBTMPVL8A5vUwBKRAF5iiDHwmbO3YEmBw+iOACMoPCefFRlAWwDkYmPLkuvQA3oiMANb0pubMOogAvoghclyIEHzKPJ6I8vhQiFBwiMAwyMhyEAgYufmh4VEmUGZgmnEMiYbJCeRytvakyMoFMJ5eDsDUGPopVFRp-YhZEAAWHt5yVHnQjAEqYKSj3rrMXUfjaV48Ecq8iDciGHa3ErXQcj1ymVAgfEjbBTSmTQIGQsgSQA'>Try</a></div></pre>\n<p>Let’s strip away some noise and <strong>just study the function signature</strong>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >listToDict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\">&gt;(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\">[],</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(parameter) idGen: (arg: T) => string' >idGen</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: T' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[], idGen: (arg: T) => string): {&#10;    [k: string]: T;&#10;}' >T</data-lsp></span><span style=\"color: #24292F\"> } {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAGxgZygFTgERtAHkwD4AKAKERXSgC5FMBtAXQBpLEYATAcQFMw9UgEMATgHN6mAJSIAvMUQZRMMOPLT6Ab0SMA1vWWrxzKYgC+iLR1F8oIUUi3ny5oA'>Try</a></div></pre>\n<p>In this situation, we ask the caller of <code>listToDict</code> to provide us with a means of obtaining an <code>id</code>, but let’s imagine that <strong>every type we wish to use this with has an <code>id: string</code> property</strong>, and we should just use that as a key.</p>\n<p>How might we implement this without generics?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) HasId.id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Dict&lt;T>' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Dict&lt;T>' >T</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function listToDict(list: HasId[]): Dict&lt;HasId>' >listToDict</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) list: HasId[]' >list</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Dict&lt;T>' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const dict: Dict&lt;HasId>' >dict</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Dict&lt;T>' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) list: HasId[]' >list</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;HasId>.forEach(callbackfn: (value: HasId, index: number, array: HasId[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: HasId' >item</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='const dict: Dict&lt;HasId>' >dict</data-lsp>[<data-lsp lsp='(parameter) item: HasId' >item</data-lsp>.<data-lsp lsp='(property) HasId.id: string' >id</data-lsp>] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) item: HasId' >item</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const dict: Dict&lt;HasId>' >dict</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgBJwM4EkAmyDeAUMssDgFzIZhSgDmhAvoaJLIigCLAJgA8AFQB8BYsgDaAa0rVaIOgF1KApoUIwAriF7AA9iGQAbYNQG7uvABTHqldNhziFASkoX+93CKIkE+6sg4PGBuwXyeOCIAvATMYjZgAHQwulAAoogAFpaWwJAAts7IUd5iJEG84nkQ+YlkCsWkBWKMzmokUBBgGlAGFWBMQA'>Try</a></div></pre>\n<p>Great, now let’s implement this with generics:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) HasId.id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Dict&lt;T>' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Dict&lt;T>' >T</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function listToDict&lt;T>(list: T[]): Dict&lt;T>' >listToDict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[]): Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt;(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[]): Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Dict&lt;T>' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[]): Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const dict: Dict&lt;T>' >dict</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Dict&lt;T>' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in listToDict&lt;T>(list: T[]): Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(parameter) list: T[]' >list</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;T>.forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void' >forEach</data-lsp></span><span style=\"color: #24292F\">((</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    <data-lsp lsp='const dict: Dict&lt;T>' >dict</data-lsp>[<data-lsp lsp='(parameter) item: T' >item</data-lsp>.<data-err><data-lsp lsp='any' >id</data-lsp></data-err>] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) item: T' >item</data-lsp></span></div><span class=\"error\"><span>Property 'id' does not exist on type 'T'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'id' does not exist on type 'T'.</span><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='const dict: Dict&lt;T>' >dict</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBLAOwBcYAzAQwGNJQAJCxASQBNQBvXUUfF1RYtCIBzXAF8CJctVoARfFWIAeACoA+Dl1ABtANb9BIgLqoV43LjIBXQovxxCoADb4BKuPMWq1AChcDTbSMASlRPZXVNbioHAVAWBWIwxO9QAF4OCS1-YgA6MgQAUWoACx8ffFIAW2D0jU5ubgTFbUrIKtzeI3Seaq0xYItuaEhiK2hHZuJxIA'>Try</a></div></pre>\n<p>The problem here is that <strong><code>T</code> can be <em>anything</em></strong>, potentially including things that don’t have this <code>id: string</code> property. We were able to get away with this in our initial solution (with the <code>idGen</code> function) because <strong><code>listToDict</code> didn’t really do anything with <code>T</code> other than store a reference to it in a dictionary</strong>.</p>\n<h3 id=\"describing-the-constraint\" style=\"position:relative;\"><a href=\"#describing-the-constraint\" aria-label=\"describing the constraint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Describing the constraint</h3>\n<p>The way we define constraints on generics is by using the <a href=\"https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-constraints\"><code>extends</code></a> keyword.</p>\n<p>The correct way of making our function generic is shown in the 1-line change below:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- function listToDict(list: HasId[]): Dict&lt;HasId&gt; {</span></div><div class='line'><span style=\"color: #116329\">+ function listToDict&lt;T extends HasId&gt;(list: T[]): Dict&lt;T&gt; {</span></div></code></div></pre>\n<p>Note that our “requirement” for our argument type (<code>HasId[]</code>) is now represented in two places:</p>\n<ul>\n<li><code>extends HasId</code> as the constraint on <code>T</code></li>\n<li><code>list: T[]</code> to ensure that we still receive an array</li>\n</ul>\n<h4 id=\"t-extends-vs-class-extends\" style=\"position:relative;\"><a href=\"#t-extends-vs-class-extends\" aria-label=\"t extends vs class extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>T extends</code> vs <code>class extends</code></h4>\n<p>The <code>extends</code> keyword is used in object-oriented inheritance, and while not strictly equivalent to how it is used with type params, there is a conceptual connection:</p>\n<blockquote>\n<p>When a class extends from a base class, it’s guaranteed\nto <em>at least</em> align with the base class structure. In the same\nway, <code>T extends HasId</code> guarantees that “T is at least a HasId”.</p>\n</blockquote>\n<h2 id=\"scopes-and-typeparams\" style=\"position:relative;\"><a href=\"#scopes-and-typeparams\" aria-label=\"scopes and typeparams permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scopes and TypeParams</h2>\n<p>When working with function parameters, we know that “inner scopes” have the ability to access “outer scopes” but not vice versa:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">receiveFruitBasket</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">bowl</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"Thanks for the fruit basket!\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// only `bowl` can be accessed here</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">eatApple</span><span style=\"color: #24292F\">(bowl, (</span><span style=\"color: #953800\">apple</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #6E7781\">// both `bowl` and `apple` can be accessed here</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>Type params work a similar way:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// outer function</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function tupleCreator&lt;T>(first: T): &lt;S>(last: S) => [T, S]' >tupleCreator</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in tupleCreator&lt;T>(first: T): &lt;S>(last: S) => [T, S]' >T</data-lsp></span><span style=\"color: #24292F\">&gt;(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) first: T' >first</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in tupleCreator&lt;T>(first: T): &lt;S>(last: S) => [T, S]' >T</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// inner function</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(local function) finish&lt;S>(last: S): [T, S]' >finish</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S in finish&lt;S>(last: S): [T, S]' >S</data-lsp></span><span style=\"color: #24292F\">&gt;(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) last: S' >last</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S in finish&lt;S>(last: S): [T, S]' >S</data-lsp></span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in tupleCreator&lt;T>(first: T): &lt;S>(last: S) => [T, S]' >T</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S in finish&lt;S>(last: S): [T, S]' >S</data-lsp></span><span style=\"color: #24292F\">] {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> [<data-lsp lsp='(parameter) first: T' >first</data-lsp>, <data-lsp lsp='(parameter) last: S' >last</data-lsp>]</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const finishTuple: &lt;S>(last: S) => [number, S]' >finishTuple</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function tupleCreator&lt;number>(first: number): &lt;S>(last: S) => [number, S]' >tupleCreator</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t1: [number, null]' style='border-bottom: solid 2px lightgrey;'>t1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const finishTuple: &lt;null>(last: null) => [number, null]' >finishTuple</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const t1: [number, null]</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const t2: [number, number[]]' style='border-bottom: solid 2px lightgrey;'>t2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const finishTuple: &lt;number[]>(last: number[]) => [number, number[]]' >finishTuple</data-lsp></span><span style=\"color: #24292F\">([</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">8</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">16</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">23</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">42</span><span style=\"color: #24292F\">])</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const t2: [number, number[]]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEHsFcBcFMCdQDNIDsDG0CW5UCgUNtdRpIAHAG1gGF5YBDaceAHgBUA+ACiS3gDO0AFyh2ASlABvPKFAhQWVKgTI0mHPjn0y8VGqKbkSrAIAWrAMo9KDIaMvjRAbXYAaUJYC602XNA6kHqgznyC0B62Ql5+AL548ei4QsaopmbsFNSgALykWbT0TCzcAMzieEmoKdAAjLmp6ZlUsNyokJSUFQr+AHoA-JXJ0KQATA18aebN1NzOACweABwetQCsqwBsHqOlHvOjXt1gff1AA'>Try</a></div></pre>\n<p>The same design principles that you use for deciding whether values belong as <strong>class fields vs. arguments</strong> passed to members should serve you well here.</p>\n<p>Remember, this is not exactly an <em>independent decision</em> to make, as types belong to the same scope as values they describe.</p>\n<h2 id=\"best-practices\" style=\"position:relative;\"><a href=\"#best-practices\" aria-label=\"best practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Best Practices</h2>\n<ul>\n<li>Define type parameters as simply as possible. Consider the two options for <code>listToDict</code>:</li>\n</ul>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) HasId.id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Dict&lt;T>' >Dict</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Dict&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Dict&lt;T>' >T</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function example1&lt;T extends HasId[]>(list: T): HasId | undefined' >example1</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in example1&lt;T extends HasId[]>(list: T): HasId | undefined' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\">[]&gt;(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) list: T extends HasId[]' >list</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in example1&lt;T extends HasId[]>(list: T): HasId | undefined' >T</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) list: T extends HasId[]' style='border-bottom: solid 2px lightgrey;'>list</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;HasId>.pop(): HasId | undefined' >pop</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(parameter) list: T extends HasId[]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function example2&lt;T extends HasId>(list: T[]): T | undefined' >example2</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in example2&lt;T extends HasId>(list: T[]): T | undefined' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\">&gt;(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) list: T[]' >list</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in example2&lt;T extends HasId>(list: T[]): T | undefined' >T</data-lsp></span><span style=\"color: #24292F\">[]) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) list: T[]' style='border-bottom: solid 2px lightgrey;'>list</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Array&lt;T>.pop(): T | undefined' >pop</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>(parameter) list: T[]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Payment' >Payment</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">implements</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#next_id_counter</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Payment.id: string' >id</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`pmnt_${</span><span style=\"color: #24292F\"><data-lsp lsp='class Payment' >Payment</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\">#next_id_counter</span><span style=\"color: #CF222E\">++</span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Invoice' >Invoice</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">implements</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='interface HasId' >HasId</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">#next_id_counter</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Invoice.id: string' >id</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`invc_${</span><span style=\"color: #24292F\"><data-lsp lsp='class Invoice' >Invoice</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\">#next_id_counter</span><span style=\"color: #CF222E\">++</span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result1: HasId | undefined' style='border-bottom: solid 2px lightgrey;'>result1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function example1&lt;(Payment | Invoice)[]>(list: (Payment | Invoice)[]): HasId | undefined' >example1</data-lsp></span><span style=\"color: #24292F\">([</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const result1: HasId | undefined</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Payment(): Payment' >Payment</data-lsp></span><span style=\"color: #24292F\">(),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Invoice(): Invoice' >Invoice</data-lsp></span><span style=\"color: #24292F\">(),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Payment(): Payment' >Payment</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">])</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const result2: Payment | Invoice | undefined' style='border-bottom: solid 2px lightgrey;'>result2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function example2&lt;Payment | Invoice>(list: (Payment | Invoice)[]): Payment | Invoice | undefined' >example2</data-lsp></span><span style=\"color: #24292F\">([</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const result2: Payment | Invoice | undefined</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Payment(): Payment' >Payment</data-lsp></span><span style=\"color: #24292F\">(),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Invoice(): Invoice' >Invoice</data-lsp></span><span style=\"color: #24292F\">(),</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Payment(): Payment' >Payment</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">])</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgBJwM4EkAmyDeAUMssDgFzIZhSgDmhAvoaJLIigCLAJgA8AFQB8BYsgDaAa0rVaIOgF1KApoUIwAriF7AA9iGQQAHnAC2ABwA2EAIyDDRyCBwY0mXOIVCAFJeDVlAEpREigIMA0oAz9qADpzXXNvQLEAelSSTOQAPQB+VU1tMD0DYzMrCAAme2MnFzdsHB8YsGVPYKJQ8Mjo-zB4xOS0jKyc-OZCBEtMVwAFOABPUwhwUgtrZfBXdEaQqjA4YoRkAGIQWoB9MguEXS02ZABeZBsAbjEyJ+QAA3NTcAuABJ8PMlit+mdLtdbvdoABqOGMb6qKYzZBYEAAN10PBQwHWEE2YG27jwnX2hx4p3OjiuOBud3A0C+bw+eGe31AmIQQPwGOxuNikNp0MZbARSNUk301GQYQwGksYBsXzKBJs3nEw0yeTE5wA7shQUTkgAaPUQQ38nFIM0Ww3G8FDBQpaUgWXyxVgSqqkwEyqa7UkXUkA1GxYmwLm0OW9FYm0QO0xh0Rp0pF1AA'>Try</a></div></pre>\n<p>Compare the types of <code>result1</code> and <code>result2</code>, and observe that, although both <code>example1</code> and <code>example2</code> produce the exact same return value, we’re effectively <em>losing type information</em> because of the way we define our type parameter.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#generic-constraints\">Generic Constraints</a></p>\n<ul>\n<li><a href=\"#motivating-use-case\">Motivating use case</a></li>\n<li>\n<p><a href=\"#describing-the-constraint\">Describing the constraint</a></p>\n<ul>\n<li><a href=\"#t-extends-vs-class-extends\"><code>T extends</code> vs <code>class extends</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#scopes-and-typeparams\">Scopes and TypeParams</a></li>\n<li><a href=\"#best-practices\">Best Practices</a></li>\n</ul>","fields":{"slug":"/course/intermediate-v2/06-type-param-scopes-and-constraints/"},"frontmatter":{"title":"Generics Scopes and Constraints","course":"intermediate-v2","date":"June 10, 2021","description":"In this chapter, we'll learn about scopes and constraints, as they pertain to\ntype params, and what the language would look like if we didn't have these\nimportant tools\n"}}},"pageContext":{"slug":"/course/intermediate-v2/06-type-param-scopes-and-constraints/","title":"Generics Scopes and Constraints","course":"intermediate-v2","order":6,"previous":{"fields":{"slug":"/course/intermediate-v2/05-modules/"},"frontmatter":{"title":"Modules & CJS interop","order":5,"course":"intermediate-v2","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v2/07-conditional-types/"},"frontmatter":{"title":"Conditional Types","order":7,"course":"intermediate-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}