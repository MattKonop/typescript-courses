{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/07-conditional-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"8eebeaff-817c-59be-a29f-3744648fc5fb","excerpt":"Ternary operator with values In a wide range of programming languages, we can find if/then/else logic. JavaScript provides a ternary operator that allows us to…","html":"<h2 id=\"ternary-operator-with-values\" style=\"position:relative;\"><a href=\"#ternary-operator-with-values\" aria-label=\"ternary operator with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ternary operator with <em>values</em></h2>\n<p>In a wide range of programming languages, we can find <code>if</code>/<code>then</code>/<code>else</code> logic. JavaScript provides a ternary<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> operator that allows us to express this kind of logic concisely. For example.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const x: 16' >x</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">16</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const isXNegative: \"no\" | \"yes\"' style='border-bottom: solid 2px lightgrey;'>isXNegative</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const x: 16' >x</data-lsp> </span><span style=\"color: #CF222E\">&gt;=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"no\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"yes\"</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>const isXNegative: \"no\" | \"yes\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAHjAvDAjANgFCkrAlhADQDkBTAcwEMpcA3EpeGAPmQAYYB+GAIjBG5gAuHgE8SEbhgD0UmHPkA9DkA'>Try</a></div></pre>\n<p>The general format of this expression in the regular JS/TS world, when used with <em>values</em> (as shown in the snippet above) is:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">condition </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> exprIfTrue </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> exprIfFalse</span></div></code></div></pre>\n<h2 id=\"conditional-types\" style=\"position:relative;\"><a href=\"#conditional-types\" aria-label=\"conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional types</h2>\n<p>Conditional types allow for types to be expressed using a very similar (basically, <em>the same</em>) syntax</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Grill.startGas(): void' >startGas</data-lsp></span><span style=\"color: #24292F\">() {}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Grill.stopGas(): void' >stopGas</data-lsp></span><span style=\"color: #24292F\">() {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Oven' >Oven</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Oven.setTemperature(degrees: number): void' >setTemperature</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) degrees: number' >degrees</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"grill\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Oven' >Oven</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let device1: Grill' style='border-bottom: solid 2px lightgrey;'>device1</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"grill\"</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let device1: Grill</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let device2: Oven' style='border-bottom: solid 2px lightgrey;'>device2</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"oven\"</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let device2: Oven</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiBOBLEJoG8BQ1oQC5nl1kgAoBKdAXyx1wHsAHYicqja0SGAeQDcBTAHboaEfrgAq-ALYN+8MLgCu8fiQAm-AOar+EAFzRBS6QCN5FNNWoZcATznQAwnToBrRIK0ARfr0TA-AA8EgB80AC80BLQ-AAeuELqMABEOsggKdAA-HBIKNCGfEIYGCDi0Jr+gQCMhi7unj5+AcFp+ZmhGAD03djQAHrZZRVVrQBM9a4eXr7VbXQCgildvf1DQA'>Try</a></div></pre>\n<p>Let’s remove everything except for the conditional type:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"grill\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Oven' >Oven</data-lsp></span><span style=\"color: #24292F\"> </span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiBOBLEJoG8BQ1oQC5nl1kgAoBKdAXyx1wHsAHYicqja0SGAeQDcBTAHboaEfrgAq-ALYN+8MLgCu8fiQAm-AOar+EAFzRBS6QCN5FNNWoB6O9AC0T4EtxOHGXAE850AMJ0dADWiIJaACL8vIjA-AA8EgB80AC80BLQ-AAeuELqMABEOsggBdAA-HBIKNCGfELQQA'>Try</a></div></pre>\n<h3 id=\"expressing-conditions\" style=\"position:relative;\"><a href=\"#expressing-conditions\" aria-label=\"expressing conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expressing conditions</h3>\n<p>On the right side of the <code>=</code> operator, you can see the same three parts from our definition of a traditional value-based ternary operator</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">condition </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> exprIfTrue </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> exprIfFalse</span></div></code></div></pre>\n<table>\n<thead>\n<tr>\n<th>part</th>\n<th>expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>condition</td>\n<td><code>T extends \"grill\"</code></td>\n</tr>\n<tr>\n<td>exprIfTrue</td>\n<td><code>Grill</code></td>\n</tr>\n<tr>\n<td>exprIfFalse</td>\n<td><code>Oven</code></td>\n</tr>\n</tbody>\n</table>\n<p>You probably notice the <code>extends</code> keyword in the condition, which as of TypeScript v5.3 is the <em>only</em> mechanism of expressing any kind of condition.</p>\n<p>If we think back to the mental model of types a sets of allowed values, <code>extends</code> is a check of a <em>subset</em> relationship. Let’s look at a smaller example to convince ourselves of this</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const one: 1' style='border-bottom: solid 2px lightgrey;'>one</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const one: 1</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const two: 2' style='border-bottom: solid 2px lightgrey;'>two</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const two: 2</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const ten: 10' >ten</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type IsLowNumber&lt;T> = T extends 1 | 2 ? true : false' >IsLowNumber</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type IsLowNumber&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type IsLowNumber&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TestOne = true' style='border-bottom: solid 2px lightgrey;'>TestOne</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type IsLowNumber&lt;T> = T extends 1 | 2 ? true : false' >IsLowNumber</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type TestOne = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TestTwo = true' style='border-bottom: solid 2px lightgrey;'>TestTwo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type IsLowNumber&lt;T> = T extends 1 | 2 ? true : false' >IsLowNumber</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type TestTwo = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TestTen = false' style='border-bottom: solid 2px lightgrey;'>TestTen</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type IsLowNumber&lt;T> = T extends 1 | 2 ? true : false' >IsLowNumber</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type TestTen = false</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TestTenWithTwo = boolean' style='border-bottom: solid 2px lightgrey;'>TestTenWithTwo</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type IsLowNumber&lt;T> = T extends 1 | 2 ? true : false' >IsLowNumber</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">10</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type TestTenWithTwo = boolean</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBOCmMC8MCMBuAUAemzf+AegPyaiSxQDuIyMATFrgUaedDFPGHagAxZMUAJ4AHRAEkIAGRBUAcgFcAtgCN4AJwA8AFQB8dHTHgAPLmAAmENDAA+DGMU4bFiAFwwAZgEMANhHghMUQdeGgAeTBEFClZBRV1bVQ9HDwWEiDxGFDoHRo6WLklNU0tehTmdNIRLJyoUJ4YmSKE0v4KtIIMmpCw+u4AdQBLKAALPNomuOLErX47Bg6WGBIgA'>Try</a></div></pre>\n<p>Let’s look specifically at the conditions, when <code>T</code> is each of our three types</p>\n<ul>\n<li><code>T = 1</code> —> <code>{ 1 } extends { 1, 2 }</code> —> true</li>\n<li><code>T = 2</code> —> <code>{ 2 } extends { 1, 2 }</code> —> true</li>\n<li><code>T = 10</code> —> <code>{ 10 } extends { 1, 2 }</code> —> false</li>\n<li><code>T = 10 | 2</code> —> <code>{ 10, 2 } extends { 1, 2 }</code> —> boolean</li>\n</ul>\n<p>Looking at the first three test cases, we can see that</p>\n<blockquote>\n<p><strong>for <code>X extends Y</code>, we’re really testing whether the set represented by <code>X</code> is a subset of the set represented by <code>Y</code></strong></p>\n</blockquote>\n<p>Of course the last test case is also quite interesting. How are we getting <code>boolean</code> out of this?</p>\n<blockquote>\n<p><strong>When a union type is “projected” through a generic, you can think of it kind of like each element of the union type is independently evaluated, and then all of the results are union’d together.</strong></p>\n</blockquote>\n<p>In this case</p>\n<ul>\n<li><code>T = 2</code> —> <code>{ 2 } extends { 1, 2 }</code> —> true</li>\n<li><code>T = 10</code> —> <code>{ 10 } extends { 1, 2 }</code> —> false</li>\n<li><code>true | false</code> —> <code>boolean</code></li>\n</ul>\n<h3 id=\"utility-types-that-use-conditional-types\" style=\"position:relative;\"><a href=\"#utility-types-that-use-conditional-types\" aria-label=\"utility types that use conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utility types that use conditional types</h3>\n<p>There are several types that are broadly useful enough that TypeScript\nincludes them as part of the “core types” for the JS language.</p>\n<p>Now that we’ve learned about conditional types, let’s study\nthe built-in utility types <code>Extract</code> and <code>Exclude</code>, which are\n<em>implemented</em> with conditional types</p>\n<h3 id=\"extract\" style=\"position:relative;\"><a href=\"#extract\" aria-label=\"extract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extract</h3>\n<p>Extract is useful for obtaining some sub-part of a type that\nis assignable to some other type.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FavoriteColors = [number, number, number] | {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;} | \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"' >FavoriteColors</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"dark sienna\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"van dyke brown\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"yellow ochre\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"sap green\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"titanium white\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"phthalo green\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"prussian blue\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"cadium yellow\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) red: number' >red</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">; </span><span style=\"color: #953800\"><data-lsp lsp='(property) green: number' >green</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">; </span><span style=\"color: #953800\"><data-lsp lsp='(property) blue: number' >blue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type StringColors = \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"' style='border-bottom: solid 2px lightgrey;'>StringColors</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Extract&lt;T, U> = T extends U ? T : never' >Extract</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type FavoriteColors = [number, number, number] | {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;} | \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"' >FavoriteColors</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>type StringColors = \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ObjectColors = {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>ObjectColors</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Extract&lt;T, U> = T extends U ? T : never' >Extract</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type FavoriteColors = [number, number, number] | {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;} | \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"' >FavoriteColors</data-lsp></span><span style=\"color: #24292F\">, { </span><span style=\"color: #953800\"><data-lsp lsp='(property) red: number' >red</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> }&gt;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>type ObjectColors = {\n    red: number;\n    green: number;\n    blue: number;\n}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TupleColors = [number, number, number]' style='border-bottom: solid 2px lightgrey;'>TupleColors</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type TupleColors = [number, number, number]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Extract&lt;T, U> = T extends U ? T : never' >Extract</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type FavoriteColors = [number, number, number] | {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;} | \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"' >FavoriteColors</data-lsp></span><span style=\"color: #24292F\">, [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">]&gt;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYghgNwPYCcCWwIGEkBtUDOUAvAFBRQA+UARACZwoDWUBaEAdh3DeVbQjgcodEE2gAjFEgDuHXhWo0QEXPhlQkAYwAWKCAv40CcMFADm+zoaXAMQtAFcAtlBk6MBvkrA7gOuHwLK3lvWjAURwI2ISgJXEcvRVotODonVxU1WRsoAG0OFwkIFAAaKELnYrKKopKAXTCAbyh9OgAuWqqSgG5giE5Oyuq++MShupQoAF9SUlBIKABlYHQOcxx8FCJiKABRAA9VuC1gAB54ZHRMTcJyglW0dYA+UgB6N4oKAD0AfnnwNAAPISABWEFOt22JH2RxQJ3Ol1QnihBHKLTaE26U2mrw+XygfwBiwAKo4wLhsHhCO9PgSiRRdodjqcLohkTdqdtygVJuVhiV+ZN6s8gA'>Try</a></div></pre>\n<p>In plain language…</p>\n<blockquote>\n<p>We’re <code>Extract</code>ing the subset of <code>FavoriteColors</code> that is\nassignable to <code>string</code></p>\n</blockquote>\n<h3 id=\"exclude\" style=\"position:relative;\"><a href=\"#exclude\" aria-label=\"exclude permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exclude</h3>\n<p><code>Exclude</code> is the opposite of <code>Extract</code>, in that it’s useful for obtaining\n<strong>the part of a type that’s not assignable to some other type</strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// a set of four specific things</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FavoriteColors = [number, number, number] | {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;} | \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"' >FavoriteColors</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"dark sienna\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"van dyke brown\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"yellow ochre\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"sap green\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"titanium white\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"phthalo green\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"prussian blue\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"cadium yellow\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) red: number' >red</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">; </span><span style=\"color: #953800\"><data-lsp lsp='(property) green: number' >green</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">; </span><span style=\"color: #953800\"><data-lsp lsp='(property) blue: number' >blue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type NonStringColors = [number, number, number] | {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>NonStringColors</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Exclude&lt;T, U> = T extends U ? never : T' >Exclude</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type FavoriteColors = [number, number, number] | {&#10;    red: number;&#10;    green: number;&#10;    blue: number;&#10;} | \"dark sienna\" | \"van dyke brown\" | \"yellow ochre\" | \"sap green\" | \"titanium white\" | \"phthalo green\" | \"prussian blue\" | \"cadium yellow\"' >FavoriteColors</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type NonStringColors = [number, number, number] | {\n    red: number;\n    green: number;\n    blue: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEENQZwUwF1AewGamYgrgJ2gBxgMYCWyRBocAFkQHYDmUAUHAJ76gBi4AbolkXBgBhRABs+UUAF5GoUAB9QAIgAm4LAGtoRGDRrglshcu7gaoFSw0xQAIyyIA7jUNzFSljFHjHSApSwYV2MlKHBcUDpA3WD3OAEzIgwAW1BHakFY5VxKKnBxSOiXI3dcLAwoKCIzO1EMIJLlAnAVJNTPbycsgG0aFNsYLAAaUD7kgeHR-sGAXUaAb1BAlQAuKfHBgG5CmF01sYnt2zqYfemcAF9GZjYbADlEGgBlOH56EXEsSSlQAFEADwIdRUMAAPFxePxBB8JCMoK9aHQAHyMEByOQAPQA-EA'>Try</a></div></pre>\n<h2 id=\"how-do-these-work\" style=\"position:relative;\"><a href=\"#how-do-these-work\" aria-label=\"how do these work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do these work?</h2>\n<p>Here’s the complete source code for these types</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Exclude from T those types that are assignable to U</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Exclude</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * Extract from T those types that are assignable to U</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Extract</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">U</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">T</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div></code></div></pre>\n<p>They’re just conditional types, and the only difference\nbetween them is the reversal of the “if true” and “if false” expressions (<code>never : T</code> vs <code>T : never</code>).</p>\n<p>You may be wondering how the <code>T</code> that’s returned by this expression isn’t the same <code>T</code> that we passed in. Remember that each element of the union type is evaluated independently, and then all of the resultant types are union-ed back together again.</p>\n<p>What these utility types take advantage of, is that union-ing a type with <code>never</code> is essentially a no-op</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneNever = 1' style='border-bottom: solid 2px lightgrey;'>OneNever</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type OneNever = 1</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8gdhAchAbhATlAvFAjFAHygTXQCgB6CqGmgPQH4g'>Try</a></div></pre>\n<p>As a consequence, all the union members that are subtypes of <code>U</code> and all of the union members that <em>aren’t</em> are effectively separated into groups. All that’s different between <code>Extract</code> and <code>Exclude</code> is which group is returned to us, and which effectively disappears into <code>| never</code>s</p>\n<h3 id=\"quiz-expressing-conditions\" style=\"position:relative;\"><a href=\"#quiz-expressing-conditions\" aria-label=\"quiz expressing conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quiz: Expressing conditions</h3>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\">QUIZ: Conditional type - condition expressions</div><div class=\"custom-block-body\"><p>Let’s study a few examples of <code>extends</code> scenarios and see if we can figure out\nwhether it will evaluate to <code>true</code> or <code>false</code></p><table>\n<thead>\n<tr>\n<th></th>\n<th>condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code>64 extends number</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>number extends 64</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>string[] extends any</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>string[] extends any[]</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>never extends any</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>any extends any</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>Date extends {new (...args: any[]): any }</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>(typeof Date) extends {new (...args: any[]): any }</code></td>\n</tr>\n</tbody>\n</table></div></div>\n<details>\n  <summary>Click to reveal answers // SPOILER WARNING </summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_1 = true' style='border-bottom: solid 2px lightgrey;'>answer_1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">64</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_1 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_2 = false' style='border-bottom: solid 2px lightgrey;'>answer_2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">64</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_2 = false</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_3 = true' style='border-bottom: solid 2px lightgrey;'>answer_3</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[] </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_3 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_4 = true' style='border-bottom: solid 2px lightgrey;'>answer_4</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[] </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[] </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_4 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_5 = true' style='border-bottom: solid 2px lightgrey;'>answer_5</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_5 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_6 = true' style='border-bottom: solid 2px lightgrey;'>answer_6</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_6 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_7 = false' style='border-bottom: solid 2px lightgrey;'>answer_7</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> { </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> }</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_7 = false</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">true</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_8 = true' style='border-bottom: solid 2px lightgrey;'>answer_8</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span><span style=\"color: #24292F\"> extends { </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> }</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_8 = true</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">true</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAhgdgZwO4QE4H0CMUC8UBsALFBAB7ARwAmCUcArgLYBGaUA-FMKvdAFxQAZjAA2CCACgA9FKhy5APXYTQkWIhQYATLjpNWqEuUo0CxTt15QBwsZJnzFy1dHjI06AMy6E3AJZwAOYA2gC6RhTUtPAgHFw8-EKi4tKyjkoq4K4aHsR4vqgBIeFkkaYxYXGWibYpDunOWeruGACsunAQAG5spSbRcLEWCdZJdqmOUBkuzZro+LoxEf3qQ-FWNsn2afLTTW5zAOy6ACIwFMtRUADedBBIUAAUAHSvMKiBCAIVoQCU34MoABfCYNCRyTjrSRyTbjGYHDwADl0LgA9oIoGcLn0rrdOg8Xm8Pl9VmF-qtgaDdsoIXJquDRrUIEA'>Try</a></div></pre>\n</details>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Definition of ternary: three-part</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#ternary-operator-with-values\">Ternary operator with <em>values</em></a></li>\n<li>\n<p><a href=\"#conditional-types\">Conditional types</a></p>\n<ul>\n<li><a href=\"#expressing-conditions\">Expressing conditions</a></li>\n<li><a href=\"#utility-types-that-use-conditional-types\">Utility types that use conditional types</a></li>\n<li><a href=\"#extract\">Extract</a></li>\n<li><a href=\"#exclude\">Exclude</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#how-do-these-work\">How do these work?</a></p>\n<ul>\n<li><a href=\"#quiz-expressing-conditions\">Quiz: Expressing conditions</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/intermediate-v2/07-conditional-types/"},"frontmatter":{"title":"Conditional Types","course":"intermediate-v2","date":"October 25, 2023","description":"Conditional types can be thought of as \"a ternary operator, for types\".\nWhile there is no \"control flow\" in a world where we're describing constraints with types\n(instead of procedural steps to execute \"in a flow\"), this tool does provide\nan important foundation for switching logic based on type information\n"}}},"pageContext":{"slug":"/course/intermediate-v2/07-conditional-types/","title":"Conditional Types","course":"intermediate-v2","order":7,"previous":{"fields":{"slug":"/course/intermediate-v2/06-type-param-scopes-and-constraints/"},"frontmatter":{"title":"Generics Scopes and Constraints","order":6,"course":"intermediate-v2","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v2/08-infer/"},"frontmatter":{"title":"Inference with conditional types","order":8,"course":"intermediate-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}