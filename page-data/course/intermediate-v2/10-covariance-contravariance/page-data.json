{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v2/10-covariance-contravariance/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"699e2625-5820-5c1b-94c9-f5f2f48a73c1","excerpt":"Let’s imagine the following situation We’re writing software that controls machinery at a snack-making company’s warehouse. Let’s start with a base class and a…","html":"<p>Let’s imagine the following situation</p>\n<p>We’re writing software that controls machinery at a snack-making company’s warehouse. Let’s start with a base class and a subclass</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Snack.petFriendly: boolean' >petFriendly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Cookie.petFriendly: false' >petFriendly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Cookie.chocolateType: \"dark\" | \"milk\" | \"white\"' >chocolateType</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;milk&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;white&apos;</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKB2ZgGtoG8BQ1rAPbwgBcAnAV2EN2IAottoAHUgIxAEthpiBTMAE3wgAno26EAYsTbd4fYQC5ozXLhC94ASnQBfDLtCQYAYRXJp0bgA9CMvjARJUmbE1YcuvAfGGiJU2wrQAGZgIBDc0AC8waHhdHgEJOSUNHQuLOycPPyCIsAAFrh44DYAKkIM3IoA5HxgxMjV0AA+0NUAtmwgjS1tAO75bDbVWs70EKSVNCFh3Bp0utpAA'>Try</a></div></pre>\n<p>The object oriented inheritance at play makes it pretty easy to understand which of these is a subtype of the other. <code>Cookie</code> is a subtype of <code>Snack</code>, or in other words</p>\n<blockquote>\n<p>All <code>Cookie</code>s are also <code>Snack</code>s, but not all <code>Snack</code>s are <code>Cookie</code>s</p>\n</blockquote>\n<h2 id=\"covariance\" style=\"position:relative;\"><a href=\"#covariance\" aria-label=\"covariance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Covariance</h2>\n<p>Our warehouse needs to model things that <em>produce</em> these items. We plan for there to be many types of snacks and cookies, so we should build a generalized abstraction for a <code>Producer&#x3C;T></code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Producer&lt;T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieProducer: Producer&lt;Cookie>' >cookieProducer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Producer&lt;Cookie>.produce: () => Cookie' >produce</data-lsp></span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: &apos;dark&apos; | &apos;milk&apos; | &apos;white&apos;): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">};</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDKB2ZgGtoG8BQ1rAPbwgBcAnAV2EN2IAottoAHUgIxAEthpiBTMAE3wgAno26EAYsTbd4fYQC5ozXLhC94ASnQBfDLtCQYAYRXJp0bgA9CMvjARJUmbE1YcuvAfGGiJU2wrQAGZgIBDc0AC8waHhdHgEJOSUNHQuLOycPPyCIsAAFrh44DYAKkIM3IoA5HxgxMjV0AA+0NUAtmwgjS1tAO75bDbVWs70EKSVNCFh3Bp0uroA9CvQALQbwKSEG2sYbPA2xCHAEQAKxLh85NzEADylAHzodAyX16eK1FqRz6UA3HoMBg1IQcKZpBcrjdiIooR9bncTLgzNxntExm9oZ9oN8os94Nw+tBkajqLV6o15tp-kA'>Try</a></div></pre>\n<p>Great! Let’s try assignments in both directions of <code>snackProducer</code> and <code>cookieProducer</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackProducer: Producer&lt;Snack>' >snackProducer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieProducer: Producer&lt;Cookie>' >cookieProducer</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let cookieProducer: Producer&lt;Cookie>' >cookieProducer</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackProducer: Producer&lt;Snack>' >snackProducer</data-lsp></span></div><span class=\"error\"><span>Type 'Producer&lt;Snack&gt;' is not assignable to type 'Producer&lt;Cookie&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Producer&lt;Snack&gt;' is not assignable to type 'Producer&lt;Cookie&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQ85LEAXaAVz04QAKZi1AAHHgCMCASzyhokIgBN2BAJ7jInAGLQZkSso2pJcOASWUAlIwC+OB4RJkAwudoHQkAB6dDymRUNPRMLBLScgpKqpQaWrr6ASagAGZEBIiQoAC8aRlZImwc3HwC0MKi4lKy8ooqapp4ABZwbMT+ACrqYpCoAOTKRNC0-aAAPqD9ALYyBKMTUwDuzTL+-bZhoog8vRXpmZDWIg4OODKU-tDpeNkACvDKfDAAPJ0AfIwiYo-PqIK2HKfToAbkcOBwlk4rA8BgecCet2gqHhiNe7jgnkgnzyWx+CL+oABuU+lEgS1AGKxgkGw1GxzsYJAYAAtGy8DxOGyWZDtKBENQ6KjnsjQMKkS9gnQcTDMXDfkiwWw5ZBxTBcvzBbQ1dAgA'>Try</a></div></pre>\n<p>Interesting! We can see that if we need a <code>snackProducer</code>, a <code>cookieProducer</code> will certainly meet our need, but if we must have a <code>cookieProducer</code> we can’t be sure that any <code>snackProducer</code> will suffice.</p>\n<table>\n<thead>\n<tr>\n<th>Cookie</th>\n<th>direction</th>\n<th>Snack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Cookie</code></td>\n<td>--- is a ---></td>\n<td><code>Snack</code></td>\n</tr>\n<tr>\n<td><code>Producer&#x3C;T = Cookie></code></td>\n<td>--- is a ---></td>\n<td><code>Producer&#x3C;T = Snack></code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Because both of these arrows flow in the same direction, we would say <code>Producer&#x3C;T></code> is <em>covariant</em> on <code>T</code></strong></p>\n</blockquote>\n<p>TypeScript 5 gives us the ability to <em>state</em> that we intend <code>Producer&#x3C;T></code> to be (and remain) <em>covariant on <code>T</code></em> using the <code>out</code> keyword before the typeParam.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Producer&lt;out T>' >Producer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">out</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;out T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Producer&lt;out T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Producer&lt;out T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgApQPYBMCuSoA8GOYyAKgHzIDeAUMsgA6a5IBcyAFAJTIC8VMgG5aAXyA'>Try</a></div></pre>\n<h2 id=\"contravariance\" style=\"position:relative;\"><a href=\"#contravariance\" aria-label=\"contravariance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contravariance</h2>\n<p>Now we need to model things that <em>consume</em> our snacks. Let’s make a <code>Consumer&#x3C;T></code> interface that describes consumers.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;T>.consume: (item: T) => void' >consume</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMIHsQGcCuBbaAHgBUA+ZAbwChlkFNcCAuZACmEjxeIEpkBecgDd0wACYBuKgF8gA'>Try</a></div></pre>\n<p>And apply it to our code</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;Snack>.consume: (item: Snack) => void' >consume</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: Snack' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieConsumer: Consumer&lt;Cookie>' >cookieConsumer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp>;</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieConsumer: Consumer&lt;Cookie>' >cookieConsumer</data-lsp></span></div><span class=\"error\"><span>Type 'Consumer&lt;Cookie&gt;' is not assignable to type 'Consumer&lt;Snack&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Consumer&lt;Cookie&gt;' is not assignable to type 'Consumer&lt;Snack&gt;'.\n  Property 'chocolateType' is missing in type 'Snack' but required in type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQ85LEAXaAVz04QAKZi1AAHHgCMCASzyhokIgBN2BAJ7jInAGLQZkSso2pJcOASWUAlIwC+OB4RJkAwudoHQkAB6dDymRUNPRMLBLScgpKqpQaWrr6ASagAGZEBIiQoAC8aRlZImwc3HwC0MKi4lKy8ooqapp4ABZwbMT+ACrqYpCoAOTKRNC0-aAAPqD9ALYyBKMTUwDuzTL+-bZhoog8vRXpmZDWIg4OODKU-tDpeNnuHDzTMAA8nQB8jEXsO0+ogmuQaaoTq2HIfABucBkygA3I4cCAwABaFF4HicFFInCWTigRDUOj3H4wVBEx4vYJ0D55LbFYn-fxAigE2ibU5w7HaVgeAxkp7QUnfcnQZ7uOCeSDUvEsvkwOH4kKy6C5bni3lC-lAA'>Try</a></div></pre>\n<p>So, if we need to get rid of a bunch of <code>Cookie</code>s, a <code>Consumer&#x3C;Snack></code> (which is presumably ok with consuming a wide range of <code>Snack</code>s) will meet our needs. However, if we need to get rid of a wide range of <code>Snack</code>s and only have a <code>Consumer&#x3C;Cookie></code> available, we only have a solution for the <code>Cookie</code>s and not <code>Snack</code>s in general. This is why the last line does not type-check.</p>\n<p>Let’s build a table like we did for covariance</p>\n<table>\n<thead>\n<tr>\n<th>Cookie</th>\n<th>direction</th>\n<th>Snack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Cookie</code></td>\n<td>--- is a ---></td>\n<td><code>Snack</code></td>\n</tr>\n<tr>\n<td><code>Consumer&#x3C;T = Cookie></code></td>\n<td>&#x3C;--- is a ---</td>\n<td><code>Consumer&#x3C;T = Snack></code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Because these arrows flow in opposite directions, we would say <code>Consumer&#x3C;T></code> is <em>contravariant</em> on <code>T</code></strong></p>\n</blockquote>\n<p>TypeScript 5 gives us the ability to <em>state</em> that we intend <code>Consumer&#x3C;T></code> to be (and remain) <em>covariant on <code>T</code></em> using the <code>in</code> keyword before the typeParam.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;in T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;in T>.consume: (item: T) => void' >consume</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: in T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMIHsQGcCuBbaAHlGQBUA+ZAbwChlkFNcCAuZACmEjzdIEpkAXkoA3dMAAmAbhoBfIA'>Try</a></div></pre>\n<h2 id=\"invariance\" style=\"position:relative;\"><a href=\"#invariance\" aria-label=\"invariance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Invariance</h2>\n<p>What happens if we merge these <code>Producer&#x3C;T></code> and <code>Consumer&#x3C;T></code> interfaces together?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Snack.petFriendly: boolean' >petFriendly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Cookie.petFriendly: false' >petFriendly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">constructor</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(property) Cookie.chocolateType: \"dark\" | \"milk\" | \"white\"' >chocolateType</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;milk&apos;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">&apos;white&apos;</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">super</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface ProducerAndConsumer&lt;T>' >ProducerAndConsumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in ProducerAndConsumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerAndConsumer&lt;T>.consume: (item: T) => void' >consume</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in ProducerAndConsumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerAndConsumer&lt;T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in ProducerAndConsumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookiePC: ProducerAndConsumer&lt;Cookie>' >cookiePC</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface ProducerAndConsumer&lt;T>' >ProducerAndConsumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerAndConsumer&lt;Cookie>.produce: () => Cookie' >produce</data-lsp></span><span style=\"color: #24292F\">() {</span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Cookie(chocolateType: \"dark\" | \"milk\" | \"white\"): Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">&apos;dark&apos;</span><span style=\"color: #24292F\">) },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) ProducerAndConsumer&lt;Cookie>.consume: (item: Cookie) => void' >consume</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: Cookie' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">};</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPC: ProducerAndConsumer&lt;Snack>' >snackPC</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface ProducerAndConsumer&lt;T>' >ProducerAndConsumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let snackPC: ProducerAndConsumer&lt;Snack>' >snackPC</data-lsp></data-err></span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookiePC: ProducerAndConsumer&lt;Cookie>' >cookiePC</data-lsp></span></div><span class=\"error\"><span>Type 'ProducerAndConsumer&lt;Cookie&gt;' is not assignable to type 'ProducerAndConsumer&lt;Snack&gt;'.\n  Types of property 'consume' are incompatible.\n    Type '(item: Cookie) =&gt; void' is not assignable to type '(item: Snack) =&gt; void'.\n      Types of parameters 'item' and 'item' are incompatible.\n        Type 'Snack' is not assignable to type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'ProducerAndConsumer&lt;Cookie&gt;' is not assignable to type 'ProducerAndConsumer&lt;Snack&gt;'.\n  Types of property 'consume' are incompatible.\n    Type '(item: Cookie) =&gt; void' is not assignable to type '(item: Snack) =&gt; void'.\n      Types of parameters 'item' and 'item' are incompatible.\n        Type 'Snack' is not assignable to type 'Cookie'.</span><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let cookiePC: ProducerAndConsumer&lt;Cookie>' >cookiePC</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackPC: ProducerAndConsumer&lt;Snack>' >snackPC</data-lsp></span></div><span class=\"error\"><span>Type 'ProducerAndConsumer&lt;Snack&gt;' is not assignable to type 'ProducerAndConsumer&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'Snack' is not assignable to type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'ProducerAndConsumer&lt;Snack&gt;' is not assignable to type 'ProducerAndConsumer&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'Snack' is not assignable to type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQ85LEAXaAVz04QAKZi1AAHHgCMCASzyhokIgBN2BAJ7jInAGLQZkSso2pJcOASWUAlIwC+OB4RJkAwudoHQkAB6dDymRUNPRMLBLScgpKqpQaWrr6ASagAGZEBIiQoAC8aRlZImwc3HwC0MKi4lKy8ooqapp4ABZwbMT+ACrqYpCoAOTKRNC0-aAAPqD9ALYyBKMTUwDuzTL+-bZhoog8vRXpmZDWIg4OODKU-tDpeNkACvDKfDAAgkbuHDzTMAA8nQB8jCK7B231QgjWkGmqE6thygIAbnAZMoANwiMSPZ7guGAzros6WTisDwGO6uVAPOBPW7QN7KD6g37uOCeSCAvJbTHU56CTaKTg8aCUUCUSBLUAstmCQbDUa2OwAGmBn2+gmGAHNUFKDJtTuiiaBENQ6OSAISUrG0+mMr6-YJ0f44HDGkLkvJsVlk1z4UmQcm5I0m2jkoA'>Try</a></div></pre>\n<p>Looks like assignment fails in <em>both</em> directions. The first one fails because the <code>consume</code> types are not type equivalent, and the second one fails because of <code>produce</code>. Where this leaves us is that <code>ProducerAndConsumer&#x3C;T></code> for <code>T = Snack</code> and <code>T = Cookie</code> are not reusable in either direction — it’s as if these types (<code>ProducerAndConsumer&#x3C;Cooke></code> and <code>ProducerAndConsumer&#x3C;Snack></code>) are totally unrelated.</p>\n<p>Let’s make our table one more time</p>\n<table>\n<thead>\n<tr>\n<th>Cookie</th>\n<th>direction</th>\n<th>Snack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Cookie</code></td>\n<td>--- is a ---></td>\n<td><code>Snack</code></td>\n</tr>\n<tr>\n<td><code>Consumer&#x3C;T = Cookie></code></td>\n<td>x x x x x x</td>\n<td><code>Consumer&#x3C;T = Snack></code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>This means that <code>ProducerAndConsumer&#x3C;T></code> is <em>invariant</em> on <code>T</code>. <strong>Invariance means <em>neither</em> covariance nor contravariance.</strong></p>\n</blockquote>\n<h2 id=\"what-variance-helpers-do-for-you\" style=\"position:relative;\"><a href=\"#what-variance-helpers-do-for-you\" aria-label=\"what variance helpers do for you permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What variance helpers do for you</h2>\n<p>There are two reasons to use variance helpers in your code</p>\n<ul>\n<li>If you have recursive types in your project, these hints allow TypeScript to type-check significantly faster. Behinds the scenes, the compiler gets to skip a bunch of work, if it knows that a typeParam is purely <code>in</code> or <code>out</code>.</li>\n<li>It allows you to encode more of your intent, and (where useful) catch any changes to variance <em>in the interface declaration</em> instead of at the places where the interface is used.</li>\n</ul>\n<p>Here’s a comparison of the error experiences, with and without the variance helpers.</p>\n<p>Here’s our working state for <code>Consumer&#x3C;T></code> again</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;T>.consume: (item: T) => void' >consume</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieConsumer: Consumer&lt;Cookie>' >cookieConsumer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQ85LEAXaAVz04QAKZi1AAHHgCMCASzyhokIgBN2BAJ7jInAGLQZkSso2pJcOASWUAlIwC+OB4RJkAwudoHQkAB6dDymRUNPRMLBLScgpKqpQaWrr6ASagAGZEBIiQoAC8aRlZImwc3HwC0MKi4lKy8ooqapp4ABZwbMT+ACrqYpCoAOTKRNC0-aAAPqD9ALYyBKMTUwDuzTL+-bZhoog8vRXpmZDWIg4OIGAAtFd4PJxXFzg4MpT+0Ol42e4cPNMwADydAB8jCK7B2v1QgjWkGmqE6thywIAbnAZMoANyOR6WTigRDUOhfcEwACEqCJP3+wTogJwONYHgMFN+0HJYMp0D+7jgnkgwLy+JCzJgQA'>Try</a></div></pre>\n<p>And let’s change <code>Consumer&#x3C;T></code> so that it becomes invariant on <code>T</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;T>.consume: (item: T) => void' >consume</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-err><data-lsp lsp='let cookieConsumer: Consumer&lt;Cookie>' >cookieConsumer</data-lsp></data-err></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></span></div><span class=\"error\"><span>Type 'Consumer&lt;Snack&gt;' is not assignable to type 'Consumer&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'Snack' is not assignable to type 'Cookie'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'Consumer&lt;Snack&gt;' is not assignable to type 'Consumer&lt;Cookie&gt;'.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'Snack' is not assignable to type 'Cookie'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFAGMAbAQ0UVAGUA7IvAa1AG8dRQ85LEAXaAVz04QAKZi1AAHHgCMCASzyhokIgBN2BAJ7jInAGLQZkSso2pJcOASWUAlIwC+OB4RJkAwudoHQkAB6dDymRUNPRMLBLScgpKqpQaWrr6ASagAGZEBIiQoAC8aRlZImwc3HwC0MKi4lKy8ooqapp4ABZwbMT+ACrqYpCoAOTKRNC0-aAAPqD9ALYyBKMTUwDuzTL+-bZhoog8vRXpmZDWIg4OIGAAtFd4PJxXFzg4MpT+0Ol42e4cPNMwADydAB8jCK7B2v1QgjWkGmqE6thywIAbnAZMoANwiMTwZR8PqgQQI4GdTEOHCWTigRDUOhfcEwACEqDpP3+wTogPJ2lYHgMLN+0GZYNZ0D+7jgnkgwLy1JC-JgQA'>Try</a></div></pre>\n<p>Finally, we’ll add that <code>in</code> keyword</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line highlight'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;in T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; {</span></div><span class=\"error\"><span>Type 'Consumer&lt;super-T&gt;' is not assignable to type 'Consumer&lt;sub-T&gt;' as implied by variance annotation.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'super-T' is not assignable to type 'sub-T'.</span><span class=\"code\">2636</span></span><span class=\"error-behind\">Type 'Consumer&lt;super-T&gt;' is not assignable to type 'Consumer&lt;sub-T&gt;' as implied by variance annotation.\n  The types returned by 'produce()' are incompatible between these types.\n    Type 'super-T' is not assignable to type 'sub-T'.</span><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;in T>.consume: (item: T) => void' >consume</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) item: in T' >item</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(property) Consumer&lt;in T>.produce: () => T' >produce</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in Consumer&lt;in T>' >T</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></span><span style=\"color: #CF222E\">!:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;in T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Snack' >Snack</data-lsp></span><span style=\"color: #24292F\">&gt;</span></div><div class='line dim'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let cookieConsumer: Consumer&lt;Cookie>' >cookieConsumer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Consumer&lt;in T>' >Consumer</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='class Cookie' >Cookie</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='let snackConsumer: Consumer&lt;Snack>' >snackConsumer</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYDMGBQBjAGwENFFQBlAO2PwGtQBvXUUfOKxAF2gFd8uCABQtWoAA68ARoQCW+UNEjEAJh0IBPCZC4AxaLMhUVm1FLhxCyqgEomAX1yOipcgGELdQ6EgAPLkYq5NS0DMyskjLyispqVJraegaBpqAAZsSEiJCgALzpmdmi7Jw8-ILQImIS0nIKSqrqWvgAFnDsJAEAKhrikKgA5CrE0HQDoAA+oAMAtrKEY5PTAO4tsgEDduFiiLx9lRlZkDaijo4gYAC01-i8XNeXuLJUAdAZ+DkenLwzMAA8z1AXQAfExihxdr9UEJ1pAZqgunZcqCAG5wWQqADconE8BU-H6oCESNBXWxjlwVi4oEQNHoX0hMAAhKgGT9-iF6MDKTo2J5DGzftBWRD2dA-h44F5IKD8rTQoKYEA'>Try</a></div></pre>\n<p>The error is surfaced at <code>Consumer&#x3C;T></code>’s declaration site, and is articulated in terms of violating a variance constraint, not the resultant type-checking error that arises from the call site which <em>requires covariance in order to compile</em>.</p>","tableOfContents":"<ul>\n<li><a href=\"#covariance\">Covariance</a></li>\n<li><a href=\"#contravariance\">Contravariance</a></li>\n<li><a href=\"#invariance\">Invariance</a></li>\n<li><a href=\"#what-variance-helpers-do-for-you\">What variance helpers do for you</a></li>\n</ul>","fields":{"slug":"/course/intermediate-v2/10-covariance-contravariance/"},"frontmatter":{"title":"Covariance, Contravariance and Bivariance","course":"intermediate-v2","date":"June 10, 2021","description":"Unlock the mysteries of type relationships with a deep dive into covariance, contravariance, and invariance. Learn how these concepts shape type systems, enhance code safety, and influence design decisions in TypeScript projects.\n"}}},"pageContext":{"slug":"/course/intermediate-v2/10-covariance-contravariance/","title":"Covariance, Contravariance and Bivariance","course":"intermediate-v2","order":10,"previous":{"fields":{"slug":"/course/intermediate-v2/09-mapped-types/"},"frontmatter":{"title":"Mapped Types","order":9,"course":"intermediate-v2","isExercise":null}},"next":null}},
    "staticQueryHashes": ["2785745750","2841359383"]}