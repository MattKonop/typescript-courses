{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v1/03-modules/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"3bbefad6-7404-5412-bc53-e1dcfffcb7c7","excerpt":"The JS ecosystem was without an “official” module specification\nuntil 2015, which led to a variety of different community-defined\nmodule types, including…","html":"<p>The JS ecosystem was without an “official” module specification\nuntil 2015, which led to a variety of different community-defined\nmodule types, including…</p>\n<ul>\n<li><a href=\"https://nodejs.org/api/modules.html#modules_modules_commonjs_modules\">CommonJS</a></li>\n<li><a href=\"https://requirejs.org/docs/whyamd.html\">AMD (RequireJS)</a></li>\n<li><a href=\"https://github.com/umdjs/umd\">UMD</a></li>\n</ul>\n<p>AMD and UMD modules are increasingly rare these days, but CommonJS has stuck around, in part\ndue to it still being the default module type for code that runs in Node.js.</p>\n<p>While it’s unusual that we write anything other than “ES modules” these days,\nit’s very common to need to describe the types of older CJS code.</p>\n<h2 id=\"es-module-imports-and-exports\" style=\"position:relative;\"><a href=\"#es-module-imports-and-exports\" aria-label=\"es module imports and exports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Module imports and exports</h2>\n<p>First, let’s get the conventional stuff out of the way:\nTypeScript does exactly what you’re used to seeing in modern JavaScript code.</p>\n<p>Here are some of the basics:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// named imports</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { strawberry, raspberry } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./berries\"</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> kiwi </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./kiwi\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// default import</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">makeFruitSalad</span><span style=\"color: #24292F\">() {} </span><span style=\"color: #6E7781\">// named export</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">default</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #953800\"> FruitBasket {} </span><span style=\"color: #6E7781\">// default export</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> { lemon, lime } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./citrus\"</span></div></code></div></pre>\n<p>Although fairly uncommon in the JS world, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#import_an_entire_modules_contents\">it’s possible to import\nan entire module as a namespace</a>. TypeScript supports\nthis as well</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> allBerries </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./berries\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// namespace import</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">allBerries.strawberry </span><span style=\"color: #6E7781\">// using the namespace</span></div><div class='line'><span style=\"color: #24292F\">allBerries.blueberry</span></div><div class='line'><span style=\"color: #24292F\">allBerries.raspberry</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./berries\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// namespace re-export</span></div></code></div></pre>\n<p>TypeScript also allows something that was recently added (2021) to the JS language</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> berries </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./berries\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #6E7781\">// namespace re-export</span></div></code></div></pre>\n<h2 id=\"commonjs-interop\" style=\"position:relative;\"><a href=\"#commonjs-interop\" aria-label=\"commonjs interop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS Interop</h2>\n<p>Things can sometimes get a bit tricky when consuming CommonJS modules\nthat do things that are incompatible with the way ES Modules typically work.</p>\n<p>Most of the time, you can just convert something like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">fs</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">require</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"fs\"</span><span style=\"color: #24292F\">)</span></div></code></div></pre>\n<p>into</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// namespace import</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> fs </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"fs\"</span></div></code></div></pre>\n<p>but occasionally, you’ll run into a rare situation where\nthe CJS module you’re importing from, exports a single thing\nthat’s <em>incompatible</em> with this <em>namespace import</em> technique.</p>\n<p>Here’s a small example of where the <em>namespace import</em> fails:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">// @filename: fruits.ts</span></div><span class=\"error\"><span>This module can only be referenced with ECMAScript imports/exports by turning on the 'esModuleInterop' flag and referencing its default export.</span><span class=\"code\">2497</span></span><span class=\"error-behind\">This module can only be referenced with ECMAScript imports/exports by turning on the 'esModuleInterop' flag and referencing its default export.</span><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function createBanana(): {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >createBanana</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) color: string' >color</data-lsp>: </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) mass: number' >mass</data-lsp>: </span><span style=\"color: #0550AE\">183</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// equivalent to CJS `module.exports = createBanana`</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\"><data-lsp lsp='function createBanana(): {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >createBanana</data-lsp></span></div><div class='line'><span style=\"color: #6E7781\">////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">// @filename: smoothie.ts</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> <data-lsp lsp='(alias) function createBanana(): {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}&#10;import createBanana' >createBanana</data-lsp> </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./fruits\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwBYCcB2AUCBALZwAmArgDaSoDCcRJAdgFIDKBIX3Pvf-AwcE4QAZgEtqTAIZEaoUdHLiALogB0avKPJMAxivFwmoPdEjSVkAELSZMgBQBKUAG88oUOZXloJ16AycqgARABGdpEhADSmcJQIoQCekJQJAO4xoETSiCigAIwAHADMoAC+eJUikACOygBu0lIqoCpwoLTsoAAGJBTU6pAAHgAOCGqgALym5pY2kTI9eCPj0K0zZhZWtvbSnEKHR8fcIuASUrLyiCRwKgAW4pCaiHh44kRrrQBUoLmz2wWewU8CIoBC6mAimUahCQA'>Try</a></div></pre>\n<p>While this error message is accurate, you may not want to follow the\nadvice it provides in all situations.</p>\n<blockquote>\n<p>If you need to enable the <code>esModuleInterop</code> and <code>allowSyntheticDefaultImports</code>\ncompiler flags in order to allow your types to compile, anyone\nwho depends on your types will also have no choice but to enable them.</p>\n</blockquote>\n<p>I call these “viral options”, and take extra steps to avoid using\nthem in my libraries.</p>\n<p>Thankfully we have another option here — the use of an older module loading API\nthat imports the code properly, and matches up the type information as well</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">// @filename: fruits.ts</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function createBanana(): {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >createBanana</data-lsp></span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { <data-lsp lsp='(property) name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) color: string' >color</data-lsp>: </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) mass: number' >mass</data-lsp>: </span><span style=\"color: #0550AE\">183</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// equivalent to CJS `module.exports = createBanana`</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\"><data-lsp lsp='function createBanana(): {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' >createBanana</data-lsp></span></div><div class='line'><span style=\"color: #6E7781\">////////////////////////////////////////////////////////</span></div><div class='line'><span style=\"color: #6E7781\">// @filename: smoothie.ts</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> <data-lsp lsp='(alias) function createBanana(): {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}&#10;import createBanana = require(\"./fruits\")' >createBanana</data-lsp> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">require</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"./fruits\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const banana: {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}' style='border-bottom: solid 2px lightgrey;'>banana</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='(alias) createBanana(): {&#10;    name: string;&#10;    color: string;&#10;    mass: number;&#10;}&#10;import createBanana = require(\"./fruits\")' >createBanana</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const banana: {\n    name: string;\n    color: string;\n    mass: number;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFsHsBMFcA2BTAXKAwtSMB2ApAZQCgQzyLKrqbaRSxwAzASxVwENI1QmAneCwAuAZwB0o4k3i4AxkJbRcoWX2QchyAEIdOnABQBKUAG9ioUGqHw+yk6E7d0AIgBGuj84A0K6Imh8LgCeyIj+AO7eoJAcIiLoAIwAHADMoAC+xJkMoMgAjoIAbhzsQqBC0JhEoAAGMAgoYsgAHgAOAaKgALwqahraHpw1xC3tfGU9quqaOnocDHSLS8vkOcxsyI48IjDQQgAWLMgSIsTELJBjZVP9sx7dlvmCavrOYsD8gqLOhsSySiIyu45g8bjNBhwjDkLBYAHoAfiAA'>Try</a></div></pre>\n<p>The error message said</p>\n<blockquote>\n<p>This module can only be referenced <strong>with ECMAScript imports/exports</strong> by turning on the ‘esModuleInterop’ flag</p>\n</blockquote>\n<p>and we have solved this by avoiding the use of an ECMAScript import/export. After all, the code we’re referring\nto here is not following the ES module spec to begin with</p>\n<p>The compiled output of this file will still be what we’re looking for in the CJS world</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0A3069\">\"use strict\"</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">createBanana</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { name: </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">, color: </span><span style=\"color: #0A3069\">\"yellow\"</span><span style=\"color: #24292F\">, mass: </span><span style=\"color: #0550AE\">183</span><span style=\"color: #24292F\"> };</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #0550AE\">module</span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\">exports</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> createBanana;</span></div><div class='line'><span style=\"color: #6E7781\">////////////////////////////////////////////////////////</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGFZk8A7AKQGVsxx0BDAJwHNT0lRMwCsbCDAQoM6UvgBiqMpQBm3QhkgA6AFaQ2IQ0eMnTZ8xfHgVS0vU7IKoNRvTa3mFYXoBjdKlh6UB9uUk5ZACFOe3sACgBKUABvTFBQUPRCbiCk0HtHSgAiACNossKAGmDYYlhuIoBPUmJa+ErQZE5ISEoARgAOAGZQAF9MMfFSAEcNADdOMnp0UHRYahZQAAM8IjItUgAPAAc6t1AAXmDQ8NIomM5NzEOT7mXLkLDIsvsDCz--gGmKw2RYOJyQPCwdDQVCkLQeTCoZAvZYfG53MoXdLTDShWKFLTAFyaQrxTA+QKQZale5YtFfe4JcRpNIAPQA-EA'>Try</a></div></pre>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #0A3069\">\"use strict\"</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #0550AE\">Object</span><span style=\"color: #24292F\">.</span><span style=\"color: #8250DF\">defineProperty</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">exports</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"__esModule\"</span><span style=\"color: #24292F\">, { value: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> });</span></div><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> createBanana </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">require</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"./fruits\"</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #CF222E\">var</span><span style=\"color: #24292F\"> banana </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">createBanana</span><span style=\"color: #24292F\">();</span></div><div class='line'>&nbsp;</div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGFZk8A7AKQGVsxx0BDAJwHNT0lRMwCsbCDAQoM6UvgBiqMpUh5Y6aKlIA6AFaQ2II8ZOmz5i5fHgAZktL1OyCqBvdCGSNvQGbhegDG6Kiw9KAB3KScsgBCnI6OABQAlKAA3pigoJHohNxhaaCOzpQARABG8VWlADThsMSw3GUAnqTEjfC1oMickJCUAIwAHADMoAC+mFPipACOHgBunGT06KDosNQsoAAGeERk2qQAHgAOTT6gALzhkdGkcQmcu5inF9zrtxFRsVWOhksQOBILM1jsqycLlUsHUmh0PkwmFQyA+6x+DyeVRu2XmHkiiVK2mAbg8PlKyUwAVCkHWlWeOIxf2eKXEWSyAD0APxAA'>Try</a></div></pre>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-bulb\" data-icon=\"emoji-bulb\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-bulb\"> Reminder: Visual Studio Code downloads types automatically</div><div class=\"custom-block-body\"><p>The type information you publish could be downloaded into a user’s\nauthoring environment, even if they don’t directly consume your library\n<br/>\n<br/>\nType-checking is a <em>holistic operation</em> that can be upset by\neven one dependency whose types are “unhappy”</p></div></div>\n<h2 id=\"importing-non-ts-things\" style=\"position:relative;\"><a href=\"#importing-non-ts-things\" aria-label=\"importing non ts things permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importing non-TS things</h2>\n<p>Particularly if you use a bundler like webpack, parcel or snowpack, you\nmay end up importing things that aren’t <code>.js</code> or <code>.ts</code> files</p>\n<p>For example, maybe you’ll need to <a href=\"https://v4.webpack.js.org/loaders/file-loader/#getting-started\">import an image file with webpack</a> like this</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> <data-lsp lsp='import img' >img</data-lsp> </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\"><data-err>&quot;./file.png&quot;</data-err></span></div><span class=\"error\"><span>Cannot find module './file.png' or its corresponding type declarations.</span><span class=\"code\">2307</span></span><span class=\"error-behind\">Cannot find module './file.png' or its corresponding type declarations.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMB2AUAJYC2ADggC6jEDmoAZvEaAEQB0wdBANpKyQHbVmQA'>Try</a></div></pre>\n<p><code>file.png</code> is obviously not a TypeScript file — we just need\nto tell TypeScript that <strong>whenever we import a <code>.png</code> file,\nit should be treated as if it’s a JS module with a string\nvalue as its default export</strong></p>\n<p>This can be accomplished through a <em>module declaration</em> as shown below</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// @filename: global.d.ts</span></div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">module</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"*.png\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const imgUrl: string' >imgUrl</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">export</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">default</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\"><data-lsp lsp='const imgUrl: string' >imgUrl</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">// @filename: component.ts</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> <data-lsp lsp='(alias) const img: string&#10;import img' >img</data-lsp> </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./file.png\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKA5rA9gEbKwB0AJiQC4DOAUGfAMazIBO8oqeZArgqACIAVCQAOibANABvWqFCM8iapVDRU2AKqtYWFa2gS5oeAA9ReVqoaRkfVeq07aAX1ogIMBCnRZFqC0QkSio6dQsrNQ1QSFY8VEESYC94MQkBIA'>Try</a></div></pre>\n<p>Like an interface, this is purely type information that will “compile away”\nas part of your build process. We’ll talk more about module declarations\nwhen we discuss <strong>ambient type information</strong></p>","tableOfContents":"<ul>\n<li><a href=\"#es-module-imports-and-exports\">ES Module imports and exports</a></li>\n<li><a href=\"#commonjs-interop\">CommonJS Interop</a></li>\n<li><a href=\"#importing-non-ts-things\">Importing non-TS things</a></li>\n</ul>","fields":{"slug":"/course/intermediate-v1/03-modules/"},"frontmatter":{"title":"Modules & CJS interop","course":"intermediate-v1","date":"June 10, 2021","description":"Although most of the code we write today is in the form of\nES modules, plenty of dependencies are packaged in the\nCommonJS module format. In this chapter, we'll look at modules in depth\nso that you have all the tools you need in order to consume all\nthe dependencies you care about, while keeping the TS compiler happy\n"}}},"pageContext":{"slug":"/course/intermediate-v1/03-modules/","title":"Modules & CJS interop","course":"intermediate-v1","order":3,"previous":{"fields":{"slug":"/course/intermediate-v1/02-declaration-merging/"},"frontmatter":{"title":"Declaration Merging","order":2,"course":"intermediate-v1","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v1/04-type-queries/"},"frontmatter":{"title":"Type Queries","order":4,"course":"intermediate-v1","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}