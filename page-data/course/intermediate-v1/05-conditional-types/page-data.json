{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/intermediate-v1/05-conditional-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"}]}},"markdownRemark":{"id":"2693caa1-066a-5b5d-85bf-1bfd19e397b5","excerpt":"Ternary operator with values In a wide range of programming languages, we can find if/then/else logic.\nJavaScript provides a ternary operator that allows us toâ€¦","html":"<h2 id=\"ternary-operator-with-values\" style=\"position:relative;\"><a href=\"#ternary-operator-with-values\" aria-label=\"ternary operator with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ternary operator with <em>values</em></h2>\n<p>In a wide range of programming languages, we can find <code>if</code>/<code>then</code>/<code>else</code> logic.\nJavaScript provides a ternary<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> operator that allows us to express this kind of\nlogic concisely. For example.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const x: 16' >x</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">16</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const isXNegative: \"no\" | \"yes\"' style='border-bottom: solid 2px lightgrey;'>isXNegative</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const x: 16' >x</data-lsp> </span><span style=\"color: #CF222E\">&gt;=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"no\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"yes\"</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>const isXNegative: \"no\" | \"yes\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAHjAvDAjANgFCkrAlhADQDkBTAcwEMpcA3EpeGAPmQAYYB+GAIjBG5gAuHgE8SEbhgD0UmHPkA9DkA'>Try</a></div></pre>\n<p>The general format of this expression in the regular JS/TS\nworld, when used with <em>values</em> (as shown in the snippet above) is:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">condition </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> exprIfTrue </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> exprIfFalse</span></div></code></div></pre>\n<h2 id=\"conditional-types\" style=\"position:relative;\"><a href=\"#conditional-types\" aria-label=\"conditional types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional types</h2>\n<p>Conditional types allow for types to be expressed using a very similar\n(basically, <em>the same</em>) syntax</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Grill.startGas(): void' >startGas</data-lsp></span><span style=\"color: #24292F\">() {}</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Grill.stopGas(): void' >stopGas</data-lsp></span><span style=\"color: #24292F\">() {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Oven' >Oven</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Oven.setTemperature(degrees: number): void' >setTemperature</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) degrees: number' >degrees</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) {}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"grill\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Oven' >Oven</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let device1: Grill' style='border-bottom: solid 2px lightgrey;'>device1</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"grill\"</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let device1: Grill</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let device2: Oven' style='border-bottom: solid 2px lightgrey;'>device2</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"oven\"</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let device2: Oven</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiBOBLEJoG8BQ1oQC5nl1kgAoBKdAXyx1wHsAHYicqja0SGAeQDcBTAHboaEfrgAq-ALYN+8MLgCu8fiQAm-AOar+EAFzRBS6QCN5FNNWoZcATznQAwnToBrRIK0ARfr0TA-AA8EgB80AC80BLQ-AAeuELqMABEOsggKdAA-HBIKNCGfEIYGCDi0Jr+gQCMhi7unj5+AcFp+ZmhGAD03djQAHrZZRVVrQBM9a4eXr7VbXQCgildvf1DQA'>Try</a></div></pre>\n<p>Letâ€™s remove everything except for the conditional type:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type CookingDevice&lt;T> = T extends \"grill\" ? Grill : Oven' >CookingDevice</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type CookingDevice&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"grill\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Grill' >Grill</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Oven' >Oven</data-lsp></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYGwhgzhAEDiBOBLEJoG8BQ1oQC5nl1kgAoBKdAXyx1wHsAHYicqja0SGAeQDcBTAHboaEfrgAq-ALYN+8MLgCu8fiQAm-AOar+EAFzRBS6QCN5FNNWoB6O9AC0T4EtxOHGXAE850AMJ0dADWiIJaACL8vIjA-AA8EgB80AC80BLQ-AAeuELqMABEOsggBdAA-HBIKNCGfEJAA'>Try</a></div></pre>\n<h3 id=\"expressing-conditions\" style=\"position:relative;\"><a href=\"#expressing-conditions\" aria-label=\"expressing conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expressing conditions</h3>\n<p>On the right side of the <code>=</code> operator, you can see the same three parts\nfrom our definition of a traditional value-based ternary operator</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">condition </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> exprIfTrue </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> exprIfFalse</span></div></code></div></pre>\n<table>\n<thead>\n<tr>\n<th>part</th>\n<th>expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>condition</td>\n<td><code>T extends \"grill\"</code></td>\n</tr>\n<tr>\n<td>exprIfTrue</td>\n<td><code>Grill</code></td>\n</tr>\n<tr>\n<td>exprIfFalse</td>\n<td><code>Oven</code></td>\n</tr>\n</tbody>\n</table>\n<p>You probably notice the <code>extends</code> keyword in the condition. As of TypeScript v4.\n3, is the <em>only</em> mechanism of expressing any kind of condition. You can think of\nit kind of like a <code>>=</code> comparison</p>\n<h3 id=\"quiz-expressing-conditions\" style=\"position:relative;\"><a href=\"#quiz-expressing-conditions\" aria-label=\"quiz expressing conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quiz: Expressing conditions</h3>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\">QUIZ: Conditional type - condition expressions</div><div class=\"custom-block-body\"><p>Letâ€™s study a few examples of <code>extends</code> scenarios and see if we can figure out\nwhether it will evaluate to <code>true</code> or <code>false</code></p><table>\n<thead>\n<tr>\n<th></th>\n<th>condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code>64 extends number</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>number extends 64</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>string[] extends any</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>string[] extends any[]</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>never extends any</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>any extends any</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>Date extends {new (...args: any[]): any }</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>(typeof Date) extends {new (...args: any[]): any }</code></td>\n</tr>\n</tbody>\n</table></div></div>\n<details>\n  <summary>Click to reveal answers // SPOILER WARNING </summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_1 = true' style='border-bottom: solid 2px lightgrey;'>answer_1</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">64</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_1 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_2 = false' style='border-bottom: solid 2px lightgrey;'>answer_2</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">64</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_2 = false</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_3 = true' style='border-bottom: solid 2px lightgrey;'>answer_3</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[] </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_3 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_4 = true' style='border-bottom: solid 2px lightgrey;'>answer_4</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[] </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[] </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_4 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_5 = true' style='border-bottom: solid 2px lightgrey;'>answer_5</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_5 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_6 = true' style='border-bottom: solid 2px lightgrey;'>answer_6</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type answer_6 = true</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_7 = false' >answer_7</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> { </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">true</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>type answer_7 = false</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type answer_8 = true' >answer_8</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor' >Date</data-lsp></span><span style=\"color: #24292F\"> extends { </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> (</span><span style=\"color: #CF222E\">...</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) args: any[]' >args</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\">[])</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">true</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>type answer_8 = true</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAhgdgZwO4QE4H0CMUC8UBsALFBAB7ARwAmCUcArgLYBGaUA-FMKvdAFxQAZjAA2CCACgA9FKhy5APXYTQkWIhQYATLjpNWqEuUo0CxTt15QBwsZJnzFy1dHjI06AMy6E3AJZwAOYA2gC6RhTUtPAgHFw8-EKi4tKyjkoq4K4aHsR4vqgBIeFkkaYxYXGWibYpDunOWeruGACsunAQAG5spSbRcLEWCdZJdqmOUBkuzZro+LoxEf3qQ-FWNsn2afIZDmCoEMDAfmgAtH6BcAD2h5lqbnMA7LoAIjAUy1FQAN50EEgoAAKAB0YJgqECCAEFVCAEoYYMoABfCYNCRyTjrSRyTbjfaHY6nVAXK63SQzR4eAAcuhc10EUHenz63z+nUBoPBkOhqzCCNWKLRu2UmLk1Qxo1qECAA'>Try</a></div></pre>\n</details>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Definition of ternary: three-part</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">â†©</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li><a href=\"#ternary-operator-with-values\">Ternary operator with <em>values</em></a></li>\n<li>\n<p><a href=\"#conditional-types\">Conditional types</a></p>\n<ul>\n<li><a href=\"#expressing-conditions\">Expressing conditions</a></li>\n<li><a href=\"#quiz-expressing-conditions\">Quiz: Expressing conditions</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/intermediate-v1/05-conditional-types/"},"frontmatter":{"title":"Conditional Types","course":"intermediate-v1","date":"June 10, 2021","description":"Conditional types can be thought of as \"a ternary operator, for types\".\nWhile there is no \"control flow\" in a world where we're describing constraints with types\n(instead of procedural steps to execute \"in a flow\"), this tool does provide\nan important foundation for switching logic based on type information\n"}}},"pageContext":{"slug":"/course/intermediate-v1/05-conditional-types/","title":"Conditional Types","course":"intermediate-v1","order":5,"previous":{"fields":{"slug":"/course/intermediate-v1/04-type-queries/"},"frontmatter":{"title":"Type Queries","order":4,"course":"intermediate-v1","isExercise":null}},"next":{"fields":{"slug":"/course/intermediate-v1/06-extract-exclude/"},"frontmatter":{"title":"Extract and Exclude","order":6,"course":"intermediate-v1","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}