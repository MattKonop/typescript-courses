{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/full-stack-typescript/04-hello-apollo/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"216c8392-c1d1-575b-a4b4-19ecbdf49549","excerpt":"Create a new file server/src/apollo-server.ts with the following contents In server/src/index.ts add the following imports Next, add the following two lines…","html":"<p>Create a new file <code>server/src/apollo-server.ts</code> with the following contents</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { ApolloServerPluginDrainHttpServer } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"apollo-server-core\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  ApolloServer,</span></div><div class='line'><span style=\"color: #24292F\">  ExpressContext,</span></div><div class='line'><span style=\"color: #24292F\">  gql,</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"apollo-server-express\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> express </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"express\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { Server } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"http\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> Db </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./db\"</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">createApolloServer</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">_db</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Db</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">httpServer</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Server</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">app</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">express</span><span style=\"color: #24292F\">.</span><span style=\"color: #953800\">Application</span></div><div class='line'><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Promise</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">ApolloServer</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\">ExpressContext</span><span style=\"color: #24292F\">&gt;&gt; {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">typeDefs</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">gql</span><span style=\"color: #0A3069\">`</span></div><div class='line'><span style=\"color: #0A3069\">    type Query {</span></div><div class='line'><span style=\"color: #0A3069\">      currentUser: User!</span></div><div class='line'><span style=\"color: #0A3069\">      suggestions: [Suggestion!]!</span></div><div class='line'><span style=\"color: #0A3069\">    }</span></div><div class='line'><span style=\"color: #0A3069\">    type User {</span></div><div class='line'><span style=\"color: #0A3069\">      id: String!</span></div><div class='line'><span style=\"color: #0A3069\">      name: String!</span></div><div class='line'><span style=\"color: #0A3069\">      handle: String!</span></div><div class='line'><span style=\"color: #0A3069\">      coverUrl: String!</span></div><div class='line'><span style=\"color: #0A3069\">      avatarUrl: String!</span></div><div class='line'><span style=\"color: #0A3069\">      createdAt: String!</span></div><div class='line'><span style=\"color: #0A3069\">      updatedAt: String!</span></div><div class='line'><span style=\"color: #0A3069\">    }</span></div><div class='line'><span style=\"color: #0A3069\">    type Suggestion {</span></div><div class='line'><span style=\"color: #0A3069\">      name: String!</span></div><div class='line'><span style=\"color: #0A3069\">      handle: String!</span></div><div class='line'><span style=\"color: #0A3069\">      avatarUrl: String!</span></div><div class='line'><span style=\"color: #0A3069\">      reason: String!</span></div><div class='line'><span style=\"color: #0A3069\">    }</span></div><div class='line'><span style=\"color: #0A3069\">  `</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">server</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">ApolloServer</span><span style=\"color: #24292F\">({</span></div><div class='line'><span style=\"color: #24292F\">    typeDefs,</span></div><div class='line'><span style=\"color: #24292F\">    plugins: [</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #8250DF\">ApolloServerPluginDrainHttpServer</span><span style=\"color: #24292F\">({ httpServer }),</span></div><div class='line'><span style=\"color: #24292F\">    ],</span></div><div class='line'><span style=\"color: #24292F\">  })</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> server.</span><span style=\"color: #8250DF\">start</span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  server.</span><span style=\"color: #8250DF\">applyMiddleware</span><span style=\"color: #24292F\">({ app })</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> server</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>In <code>server/src/index.ts</code> add the following imports</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { createApolloServer } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./apollo-server\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { createServer } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"http\"</span></div></code></div></pre>\n<p>Next, add the following two lines immediately below the one that begins with <code>app.use('/static</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">httpServer</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">createServer</span><span style=\"color: #24292F\">(app)</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">apolloServer</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">await</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">createApolloServer</span><span style=\"color: #24292F\">(</span></div><div class='line'><span style=\"color: #24292F\">  db,</span></div><div class='line'><span style=\"color: #24292F\">  httpServer,</span></div><div class='line'><span style=\"color: #24292F\">  app</span></div><div class='line'><span style=\"color: #24292F\">)</span></div></code></div></pre>\n<p>To make your life easy, make one more change to the same file and give yourself a nice clickable link in your terminal to the apollo dev tools.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- chalk.bgWhite.black(`\\thttp://localhost:${PORT}${''}\\t`),</span></div><div class='line'><span style=\"color: #116329\">+ chalk.bgWhite.black(`\\thttp://localhost:${PORT}${apolloServer.graphqlPath}\\t`),</span></div></code></div></pre>\n<p>Make a git commit, and run <code>yarn dev</code> from within the <code>server</code> subfolder.</p>\n<p>Looking for the link that says <strong>“GraphQL API listening on [URL]”</strong> and click on it. You should see the apollo dev tools.</p>\n<p>BUT — if you try to make a query of any kind, you’ll immediately see an error. We have to create something called a <strong>resolver</strong> to actually grab the data that Apollo server will organize and deserialize for us.</p>\n<p>Here’s a basic query to try, <strong>which we expect to fail at this point</strong>.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">graphql</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">query</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">CurrentUser</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">currentUser</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">name</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>","tableOfContents":"","fields":{"slug":"/course/full-stack-typescript/04-hello-apollo/"},"frontmatter":{"title":"Hello Apollo","course":"full-stack-typescript","date":"March 24, 2022","description":"We'll get our GraphQL API up and running quickly and easily using Apollo server\n"}}},"pageContext":{"slug":"/course/full-stack-typescript/04-hello-apollo/","title":"Hello Apollo","course":"full-stack-typescript","order":4,"previous":{"fields":{"slug":"/course/full-stack-typescript/03-project-tour/"},"frontmatter":{"title":"Project Tour","order":3,"course":"full-stack-typescript","isExercise":null}},"next":{"fields":{"slug":"/course/full-stack-typescript/05-first-resolver/"},"frontmatter":{"title":"First Resolver","order":5,"course":"full-stack-typescript","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}