{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/full-stack-typescript/06-imported-resolver/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Learn how to manage large TypeScript code bases with confidence and ease.\nIn this course, Mike shares his knowledge from years of experience working\nwith teams who maintain TypeScript projects with hundreds of regular full-time\ncontributors and 100K+ lines of code.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"b3854ae0-2a08-5756-9fa8-0bdd62440b25","excerpt":"In this chapter, we’ll get both our schema and resolver out of the apollo-server.ts file. Ideal Getting the schema out Go back to the server/src/apollo-server…","html":"<p>In this chapter, we’ll get both our schema and resolver out of the <code>apollo-server.ts</code> file. Ideal</p>\n<h2 id=\"getting-the-schema-out\" style=\"position:relative;\"><a href=\"#getting-the-schema-out\" aria-label=\"getting the schema out permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting the schema out</h2>\n<p>Go back to the <code>server/src/apollo-server.ts</code> file take everything in the <code>gql</code> string template,\nand put it in a file called <code>schema.graphql</code> in the root of the project (the repo root)</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">graphql</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\"># schema.graphql</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Query</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">currentUser</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">User</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">suggestions</span><span style=\"color: #24292F\">: [</span><span style=\"color: #0550AE\">Suggestion</span><span style=\"color: #CF222E\">!</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">User</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">name</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">handle</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">coverUrl</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">avatarUrl</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">createdAt</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">updatedAt</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Suggestion</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">name</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">handle</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">avatarUrl</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">reason</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">String</span><span style=\"color: #CF222E\">!</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>Next go back to <code>server/src/apollo-server.ts</code> so we can import this file as our schema</p>\n<p>Add the following imports</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { GraphQLFileLoader } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"@graphql-tools/graphql-file-loader\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { loadSchemaSync } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"@graphql-tools/load\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { addResolversToSchema } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"@graphql-tools/schema\"</span></div><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> { GRAPHQL_SCHEMA_PATH } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./constants\"</span></div></code></div></pre>\n<p>This <code>GRAPHQL_SCHEMA_PATH</code> variable is the path of the <code>schema.graphql</code> file you just created</p>\n<p>Next add this code right below the imports, in top-level module scope</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">SCHEMA</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">loadSchemaSync</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">GRAPHQL_SCHEMA_PATH</span><span style=\"color: #24292F\">, {</span></div><div class='line'><span style=\"color: #24292F\">  loaders: [</span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">GraphQLFileLoader</span><span style=\"color: #24292F\">()],</span></div><div class='line'><span style=\"color: #24292F\">})</span></div></code></div></pre>\n<p>And then where you’re instantiating your <code>ApolloServer</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  const server = new ApolloServer({</span></div><div class='line'><span style=\"color: #82071E\">-   typeDefs,</span></div><div class='line'><span style=\"color: #116329\">+   schema: addResolversToSchema({</span></div><div class='line'><span style=\"color: #116329\">+     schema: SCHEMA,</span></div><div class='line'><span style=\"color: #116329\">+   }),</span></div><div class='line'><span style=\"color: #24292F\">    context: () =&gt; ({ db }),</span></div><div class='line'><span style=\"color: #24292F\">    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],</span></div></code></div></pre>\n<p>You should be able to start up the server again, try this simple query again</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">graphql</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">query</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">CurrentUser</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">currentUser</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">name</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>and get the same result as before</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"data\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"currentUser\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0550AE\">\"name\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"John Doe\"</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/N4KABGBEAmCGAutIC4yghSBjArgJzwFMA7eAVQGdC8U1wNNjYBbQ2yAKQHsALYsACJc29CAF96EsUA'>Try</a></div></pre>\n<h2 id=\"getting-the-resolvers-out\" style=\"position:relative;\"><a href=\"#getting-the-resolvers-out\" aria-label=\"getting the resolvers out permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting the resolvers out</h2>\n<p>Create a new file in your project <code>server/src/resolvers.ts</code>.</p>\n<p>Move the value held by the <code>resolvers</code> variable into this file, and make that value the default export</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">resolvers</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  Query: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">currentUser</span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">        id: </span><span style=\"color: #0A3069\">\"123\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        name: </span><span style=\"color: #0A3069\">\"John Doe\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        handle: </span><span style=\"color: #0A3069\">\"johndoe\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        coverUrl: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        avatarUrl: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        createdAt: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        updatedAt: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      }</span></div><div class='line'><span style=\"color: #24292F\">    },</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">suggestions</span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> []</span></div><div class='line'><span style=\"color: #24292F\">    },</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">default</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\">resolvers</span></div></code></div></pre>\n<p>Go back to <code>server/src/apollo-server.ts</code> and add the following import</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> resolvers </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./resolvers\"</span></div></code></div></pre>\n<p>Test the query again in Apollo explorer, and it should still work.</p>\n<h2 id=\"breaking-up-your-resolver\" style=\"position:relative;\"><a href=\"#breaking-up-your-resolver\" aria-label=\"breaking up your resolver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Breaking up your resolver</h2>\n<p>If we keep this <code>resolvers.ts</code> as one big file, things will get unmanageable quickly.\nWe can break establish a pattern for breaking this file up into sub-parts</p>\n<p>Create a new folder <code>server/src/resolvers</code> and a new file <code>server/src/resolvers/Query.ts</code>.</p>\n<p>Move the object containing the <code>Query:</code> family of resolvers (<code>Query.currentUser</code>, <code>Query.suggestions</code>) into this new file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">queryTwitterResolvers</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">currentUser</span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      id: </span><span style=\"color: #0A3069\">\"123\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      name: </span><span style=\"color: #0A3069\">\"John Doe\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      handle: </span><span style=\"color: #0A3069\">\"johndoe\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      coverUrl: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      avatarUrl: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      createdAt: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      updatedAt: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">suggestions</span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> []</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">default</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\">queryTwitterResolvers</span></div></code></div></pre>\n<p>Finally, in your <code>server/src/resolvers.ts</code>, import this object, and wire it up where it was before</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> queryTwitterResolvers </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"./resolvers/Query\"</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">resolvers</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  Query: queryTwitterResolvers,</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">default</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\">resolvers</span></div></code></div></pre>\n<p>Test the example query in Apollo explorer one last time to make sure everything works.</p>\n<p>Next, let’s add some types before things get any more complicated!</p>","tableOfContents":"<ul>\n<li><a href=\"#getting-the-schema-out\">Getting the schema out</a></li>\n<li><a href=\"#getting-the-resolvers-out\">Getting the resolvers out</a></li>\n<li><a href=\"#breaking-up-your-resolver\">Breaking up your resolver</a></li>\n</ul>","fields":{"slug":"/course/full-stack-typescript/06-imported-resolver/"},"frontmatter":{"title":"Imported Resolver","course":"full-stack-typescript","date":"March 24, 2022","description":"To get the full advantage of one GraphQL schema that both client and server\nsub-projects use, we need to break it out into a separate file.\n"}}},"pageContext":{"slug":"/course/full-stack-typescript/06-imported-resolver/","title":"Imported Resolver","course":"full-stack-typescript","order":6,"previous":{"fields":{"slug":"/course/full-stack-typescript/05-first-resolver/"},"frontmatter":{"title":"First Resolver","order":5,"course":"full-stack-typescript","isExercise":null}},"next":{"fields":{"slug":"/course/full-stack-typescript/07-imported-resolver/"},"frontmatter":{"title":"Typed Resolver","order":7,"course":"full-stack-typescript","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}