{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/full-stack-typescript/05-first-resolver/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"e99ed594-f53f-5e8d-89e3-e255145e4614","excerpt":"Go back to the server/src/apollo-server.ts file, remove the underscore before _db here and insert the following code immediately before you create an instanceâ€¦","html":"<p>Go back to the <code>server/src/apollo-server.ts</code> file, remove the underscore before <code>_db</code> here</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">export async function createApolloServer(</span></div><div class='line'><span style=\"color: #82071E\">-  _db: Db,</span></div><div class='line'><span style=\"color: #116329\">+  db: Db,</span></div><div class='line'><span style=\"color: #24292F\">  httpServe</span></div></code></div></pre>\n<p>and insert the following code immediately before you create an instance of <code>ApolloServer</code>.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">resolvers</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  Query: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">currentUser</span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">        id: </span><span style=\"color: #0A3069\">\"123\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        name: </span><span style=\"color: #0A3069\">\"John Doe\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        handle: </span><span style=\"color: #0A3069\">\"johndoe\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        coverUrl: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        avatarUrl: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        createdAt: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        updatedAt: </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      }</span></div><div class='line'><span style=\"color: #24292F\">    },</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #8250DF\">suggestions</span><span style=\"color: #24292F\">: () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> []</span></div><div class='line'><span style=\"color: #24292F\">    },</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>Pass this <code>resolvers</code> variable</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  const server = new ApolloServer({</span></div><div class='line'><span style=\"color: #24292F\">    typeDefs,</span></div><div class='line'><span style=\"color: #116329\">+    resolvers,</span></div><div class='line'><span style=\"color: #116329\">+    context: () =&gt; ({ db }),</span></div><div class='line'><span style=\"color: #24292F\">    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],</span></div><div class='line'><span style=\"color: #24292F\">  });</span></div></code></div></pre>\n<p>You should now be able to run the following query in the apollo dev tools.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">graphql</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">query</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">CurrentUser</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">currentUser</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\">name</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>and see a response like</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"data\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"currentUser\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0550AE\">\"name\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"John Doe\"</span></div><div class='line'><span style=\"color: #24292F\">    }</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/N4KABGBEAmCGAutIC4yghSBjArgJzwFMA7eAVQGdC8U1wNNjYBbQ2yAKQHsALYsACJc29CAF96EsUA'>Try</a></div></pre>","tableOfContents":"","fields":{"slug":"/course/full-stack-typescript/05-first-resolver/"},"frontmatter":{"title":"First Resolver","course":"full-stack-typescript","date":"March 24, 2022","description":"We'll make our first GraphQL resolver, to make our new API queryable\n"}}},"pageContext":{"slug":"/course/full-stack-typescript/05-first-resolver/","title":"First Resolver","course":"full-stack-typescript","order":5,"previous":{"fields":{"slug":"/course/full-stack-typescript/04-hello-apollo/"},"frontmatter":{"title":"Hello Apollo","order":4,"course":"full-stack-typescript","isExercise":null}},"next":{"fields":{"slug":"/course/full-stack-typescript/06-imported-resolver/"},"frontmatter":{"title":"Imported Resolver","order":6,"course":"full-stack-typescript","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}