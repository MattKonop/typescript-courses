{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/08-tests-for-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"0093cea4-f944-5bea-83cb-ba7ab0c1d68b","excerpt":"Tests for types Why should we care? We need to do this for a couple of reasons: Type information is code too. Breaking your users’ types is a breaking change…","html":"<h2 id=\"tests-for-types\" style=\"position:relative;\"><a href=\"#tests-for-types\" aria-label=\"tests for types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tests for types</h2>\n<h2 id=\"why-should-we-care\" style=\"position:relative;\"><a href=\"#why-should-we-care\" aria-label=\"why should we care permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why should we care?</h2>\n<p>We need to do this for a couple of reasons:</p>\n<ul>\n<li>Type information is code too. Breaking your users’ types is a breaking change</li>\n<li>You can’t easily write useful negative test cases for type-equivalence in your value tests</li>\n<li>TS introduces breaking changes with each middle-digit release, and you’ll usually detect these w/ type information (includes your “value tests” too for some things)</li>\n<li>\n<p>Maintaining compatibility w/ multiple TS versions</p>\n<ul>\n<li>This normally wouldn’t be a big concern, but TS includes breaking changes with each “middle digit” release</li>\n<li>It’s very easy (and very bad for users) to accidentally change your range of supported compiler versions</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"solutions-to-this-problem\" style=\"position:relative;\"><a href=\"#solutions-to-this-problem\" aria-label=\"solutions to this problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solutions to this problem</h2>\n<p>TL;DR: TypeScript professionals need to know BOTH. You won’t get away from dtslint yet because it’s still used for everything in DefinitelyTyped, and it’s still the easiest way to guard against compatibility regressions.</p>\n<h3 id=\"dtslint\" style=\"position:relative;\"><a href=\"#dtslint\" aria-label=\"dtslint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/microsoft/dtslint\"><code>dtslint</code></a></h3>\n<p>This is what’s used by DefinitelyTyped, and it effectively has 3 features</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>// $ExpectType\n// $ExpectError</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<p>dtslint tests a range of TS compiler versions. This may sound like it’s less than we need, but it’s enough to get a\nlot of release confidence. Because it’s a tool built on top of a linter, it can handle negative test cases\nwithout early termination</p>\n<h4 id=\"concerns\" style=\"position:relative;\"><a href=\"#concerns\" aria-label=\"concerns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concerns</h4>\n<ul>\n<li><strong>SETUP</strong> - It’s very particular about how it’s set up, and you end up doing things “just because the tool wants you to do it that way” (i.e., the index.d.ts)</li>\n<li><strong>STRINGIFIED TYPES</strong> - The $ExpectType assertion is based on stringified types, which can change across compiler versions (i.e., <code>string|number</code> vs <code>number | string</code>)</li>\n<li><strong>BUILT ON TOP OF TSLINT</strong> - The linter it’s built on top of is tslint, which is now deprecated in favor of ESLint. We’ll talk about the difference later, but it’s not great to be so entangled with something that’s on its way out</li>\n</ul>\n<h4 id=\"benefits\" style=\"position:relative;\"><a href=\"#benefits\" aria-label=\"benefits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benefits</h4>\n<ul>\n<li>Automatically downloads compiler versions and caches them</li>\n<li>Tests against nightly TS builds</li>\n<li>Microsoft uses this for DefinitelyTyped (read into this for stability)</li>\n<li>Being built on top of a linter = you get lint-ish feedback in your editor</li>\n</ul>\n<h3 id=\"tsd\" style=\"position:relative;\"><a href=\"#tsd\" aria-label=\"tsd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/SamVerschueren/tsd\"><code>tsd</code></a></h3>\n<p>This is “the new kid on the block”, but it’s my current favorite for basic typescript testing</p>\n<!-- markdownlint-disable-next-line MD024 -->\n<h4 id=\"concerns-1\" style=\"position:relative;\"><a href=\"#concerns-1\" aria-label=\"concerns 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concerns</h4>\n<p>At the time of writing, it does not allow testing against multiple compiler versions (Issue)</p>\n<!-- markdownlint-disable-next-line MD024 -->\n<h4 id=\"benefits-1\" style=\"position:relative;\"><a href=\"#benefits-1\" aria-label=\"benefits 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benefits</h4>\n<ul>\n<li><strong>Better assertion mechanism</strong>\nTest assertions are based on type equivalence rather than stringified types</li>\n<li><strong>Easier setup</strong>\nMuch less convoluted setup compared to dtslint</li>\n<li><strong>Better range of assertions</strong>\nMuch wider range of assertions, which allow your tests to become much more readable and much less convoluted</li>\n<li><strong>Support for deprecations</strong>\nCatch that accidental (un-)deprecation. This is very important for responsible management of a stable API surface</li>\n</ul>\n<h2 id=\"challenge-tests-for-types\" style=\"position:relative;\"><a href=\"#challenge-tests-for-types\" aria-label=\"challenge tests for types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge: tests for types</h2>\n<ol>\n<li><code>tsd</code> and <code>dtslint</code> are both installed. Set up a subfolder in <code>tests/</code> for each of them</li>\n<li>wire both commands up to <code>yarn test</code></li>\n</ol>\n<h2 id=\"what-to-test\" style=\"position:relative;\"><a href=\"#what-to-test\" aria-label=\"what to test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What to test?</h2>\n<p>Make sure your new <code>isTypedArray</code> generic user-defined type guard works</p>\n<p>For your <code>dtslint</code> tests, use the following config files</p>\n<h3 id=\"tsconfigjson\" style=\"position:relative;\"><a href=\"#tsconfigjson\" aria-label=\"tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tsconfig.json</code></h3>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"extends\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"../../tsconfig.json\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"compilerOptions\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"lib\"</span><span style=\"color: #24292F\">: [</span><span style=\"color: #0A3069\">\"ES2018\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"DOM\"</span><span style=\"color: #24292F\">],</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"strict\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"baseUrl\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"../..\"</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"include\"</span><span style=\"color: #24292F\">: [</span><span style=\"color: #0A3069\">\".\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"../../src\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<h4 id=\"tslintjson\" style=\"position:relative;\"><a href=\"#tslintjson\" aria-label=\"tslintjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tslint.json</code></h4>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"extends\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"dtslint/dtslint.json\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"rules\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"no-relative-import-in-test\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"semicolon\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">true</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>and run the command as follows</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn dtslint tests/types-dtslint</span></div></code></div></pre>\n<p>For tsd, make just make sure you follow the README carefully</p>\n<hr>\n<p align='right'>\n <a href=\"./10-declaration-files.md\">Next: Tests for Types ▶</a>\n</p>\n```","tableOfContents":"<ul>\n<li><a href=\"#tests-for-types\">Tests for types</a></li>\n<li><a href=\"#why-should-we-care\">Why should we care?</a></li>\n<li>\n<p><a href=\"#solutions-to-this-problem\">Solutions to this problem</a></p>\n<ul>\n<li>\n<p><a href=\"#dtslint\"><code>dtslint</code></a></p>\n<ul>\n<li><a href=\"#concerns\">Concerns</a></li>\n<li><a href=\"#benefits\">Benefits</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tsd\"><code>tsd</code></a></p>\n<ul>\n<li><a href=\"#concerns-1\">Concerns</a></li>\n<li><a href=\"#benefits-1\">Benefits</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#challenge-tests-for-types\">Challenge: tests for types</a></li>\n<li>\n<p><a href=\"#what-to-test\">What to test?</a></p>\n<ul>\n<li>\n<p><a href=\"#tsconfigjson\"><code>tsconfig.json</code></a></p>\n<ul>\n<li><a href=\"#tslintjson\"><code>tslint.json</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/enterprise-v2/08-tests-for-types/"},"frontmatter":{"title":"Tests for Types","course":"enterprise-v2","date":"October 27, 2023","description":"We'll discuss the goals and agenda of this course, and how to get up and\nrunning with the workshop project in 2 minutes or less.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/08-tests-for-types/","title":"Tests for Types","course":"enterprise-v2","order":8,"previous":{"fields":{"slug":"/course/enterprise-v2/07-types-at-runtime/"},"frontmatter":{"title":"Types At Runtime","order":7,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/09-declaration-files/"},"frontmatter":{"title":"Declaration Files","order":9,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}