{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/07-dealing-with-pure-type-info/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise-Scale TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"2323fbe8-630b-5f60-9377-7320c150f68b","excerpt":"(4) Start formalizing type information relating to your codebase. Make some interfaces and type aliases. The next step we’ll take in this project involves…","html":"<blockquote>\n<p>(4) <strong>Start formalizing type information relating to your codebase</strong>. Make some <code>interface</code>s and <code>type</code> aliases.</p>\n</blockquote>\n<p>The next step we’ll take in this project involves finding the right “home” for\ntype information of various kinds. Two we’ll focus on in particular are</p>\n<ul>\n<li>Types that relate to <em>our own code</em>, and are part of our public API surface</li>\n<li>Fixes and customizations of <em>types for dependencies</em>, that are <em>not</em> part of our public API surface</li>\n</ul>\n<h2 id=\"formalizing-interfaces-for-our-domain-model\" style=\"position:relative;\"><a href=\"#formalizing-interfaces-for-our-domain-model\" aria-label=\"formalizing interfaces for our domain model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Formalizing interfaces for our domain model</h2>\n<p>The models that a slack-like app needs to deal with include concepts like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'><span style=\"color: #0550AE\">TEAMS</span><span style=\"color: #24292F\">                </span><span style=\"color: #0550AE\">USERS</span></div><div class='line'><span style=\"color: #24292F\">  ┃                    ┃</span></div><div class='line'><span style=\"color: #24292F\"> have                  ┃</span></div><div class='line'><span style=\"color: #24292F\"> many                  ┃</span></div><div class='line'><span style=\"color: #24292F\">  ┗━━ </span><span style=\"color: #0550AE\">CHANNELS</span><span style=\"color: #24292F\">       relate</span></div><div class='line'><span style=\"color: #24292F\">         ┃             to</span></div><div class='line'><span style=\"color: #24292F\">        have           ┃</span></div><div class='line'><span style=\"color: #24292F\">        many           ┃</span></div><div class='line'><span style=\"color: #24292F\">         ┗━━ </span><span style=\"color: #0550AE\">MESSAGES</span><span style=\"color: #24292F\"> ━┛ </span></div></code></div></pre>\n<p>We could create a bunch of interfaces that represent these concepts</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A user participating in a chat</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface IUser' >IUser</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IUser.id: number' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IUser.username: string' >username</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IUser.name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IUser.iconUrl: string' >iconUrl</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A chat message</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface IMessage' >IMessage</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IMessage.id: number' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IMessage.teamId: string' >teamId</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IMessage.channelId: string' >channelId</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IMessage.userId: string' >userId</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IMessage.createdAt: string' >createdAt</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IMessage.user: IUser' >user</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface IUser' >IUser</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IMessage.body: string' >body</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A team, containing one or more chat channels</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface ITeam' >ITeam</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) ITeam.iconUrl: string' >iconUrl</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) ITeam.name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) ITeam.id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) ITeam.channels: IChannel[]' >channels</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface IChannel' >IChannel</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A chat channel, containing many chat messages</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface IChannel' >IChannel</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IChannel.teamId: string' >teamId</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IChannel.name: string' >name</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IChannel.description: string' >description</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IChannel.id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) IChannel.messages: IMessage[]' >messages</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface IMessage' >IMessage</data-lsp></span><span style=\"color: #24292F\">[];</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUhBSCuBnApgJ0gBwIZoC4CWAxgToQHYDmkB5k2kRAFtnlCMOCgB6YD2+GuTzoAZtiIpIASQCqqDAG8oNACYAuSOQQBbAEboA3CuTpy2HSk1I8aWpWOQtFq5Bt2qjmkT7lZaABtrW3tjAF9wcFAIaDhGFjxISyQkbEoUdk4efkFaETRxSRkAWRQUtKllJwINLV0DNC8RC2la91CVZmxychQA1uCPBxMFAbcQz060FFYUVVg8QY6nUzRNOQUvPT5VAE8lyYiosHY45p0AGkZfPGxae0hfKQEkgSkuxK6evqRMrl4BIk8mIJFJpAAVGY6SBVby+fxBcZDLzmSwHYbVNoTDHxbq9AJIdYAYRY3wCAG0ALrhSLRU7wD64slXHzCO7kB46bq7XGJZKpdK-aBZAG5YQgorSEl4vowlTnMbtSZOVGuJU41RlIh2TCEXzorw1A0qfkVQklMoClBU8JAA'>Try</a></div></pre>\n<p>Create a new file <code>packages/chat/src/types.ts</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">touch src/types.ts</span></div></code></div></pre>\n<p>and put the above code snippet in it and save. Start going through the other TypeScript modules, from the lowest level and moving upward, replacing some of the explicit object types with types derived from these interfaces.</p>\n<p>Keep in mind that if we use these interfaces <em>directly</em>, everywhere their respective concepts is needed, we’ll end up exposing components to far more data (e.g. all of <code>IChannel</code>s fields, when perhaps just <code>name</code> would suffice).</p>\n<p>Use <code>Pick&#x3C;T></code> to choose specific properties where only one or two are needed. For example</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ChannelNameAndId = {&#10;    name: string;&#10;    id: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>ChannelNameAndId</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Pick&lt;T, K extends keyof T> = { [P in K]: T[P]; }' >Pick</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='interface IChannel' >IChannel</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">&apos;name&apos;</span><span style=\"color: #CF222E\">|</span><span style=\"color: #0A3069\">&apos;id&apos;</span><span style=\"color: #24292F\"> &gt;</span></div><div class='meta-line'><span class='popover-prefix'>            </span><span class='popover'><div class='arrow'></div>type ChannelNameAndId = {\n    name: string;\n    id: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PQKhCgAIUhBSCuBnApgJ0gBwIZoC4CWAxgToQHYDmkB5k2kRAFtnlCMOCgB6YD2+GuTzoAZtiIpIASQCqqDAG8oNACYAuSOQQBbAEboA3CuTpy2HSk1I8aWpWOQtFq5Bt2qjmkT7lZaABtrW3tjAF9wcFAIaDhGFjxISyQkbEoUdk4efkFaETRxSRkAWRQUtKllJwINLV0DNC8RC2la91CVZmxychQA1uCPBxMFAbcQz060FFYUVVg8QY6nUzRNOQUvPT5VAE8lyYiosHY45p0AGkZfPGxae0hfKQEkgSkuxK6evqRMrl4BIk8mIJFJpAAVGY6SBVby+fxBcZDLzmSwHYbVNoTDHxbq9AJIdYAYRY3wCAG0ALrhSLRU7wD64slXHzCO7kB46bq7XGJZKpdK-aBZAG5YQgorSEl4vowlTnMbtSZOVGuJU41RlIh2TCEXzorw1A0qfkVQklMoClBUmnAO2QAC0TqICDwTod4Dwu0wUmlZIAci5YORVK1IABeSAABWIAGsADxS0n4q4AclVqYAPqmaqnIAA+KLAJwlgB6AH4gA'>Try</a></div></pre>\n<p>Don’t worry about being too <em>complete</em> in this pass. When we start tightening up rules, we can opportunistically catch more occurrences</p>\n<h2 id=\"other-kinds-of-type-information\" style=\"position:relative;\"><a href=\"#other-kinds-of-type-information\" aria-label=\"other kinds of type information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other kinds of type information</h2>\n<p>These interfaces are a great example of pure type information. Another is, adjustments to type information for <em>dependencies</em>. If you’ve ever dealt with a library that doesn’t have any types yet, you probably know where we’re going with this.</p>\n<p>Even if libraries do provide their own types, sometimes they clash with what you have going on in your app. For example, they might use new TS language syntax that you’re not ready to adopt yet.</p>\n<p>A local type roots folder gives you the flexibility to “patch” or overwrite types where necessary.</p>\n<p>Create a new folder for these kinds of types to live</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">shell</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">mkdir types</span></div></code></div></pre>\n<h2 id=\"some-relevant-parts-of-tsconfig\" style=\"position:relative;\"><a href=\"#some-relevant-parts-of-tsconfig\" aria-label=\"some relevant parts of tsconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Some relevant parts of tsconfig</h2>\n<ul>\n<li><code>typeRoots</code> allows us to tell TypeScript about top-level folders which may contain type information</li>\n<li><code>paths</code> allows us to instruct the compiler to look for type information for specific modules in specific locations</li>\n<li><code>types</code> allows us to specify which types can affect the global scope, and which appear in vscode auto-imports</li>\n</ul>\n<h2 id=\"local-type-overrides\" style=\"position:relative;\"><a href=\"#local-type-overrides\" aria-label=\"local type overrides permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local type overrides</h2>\n<p>and in your top-level tsconfig add a <code>paths</code> and a <code>baseUrl</code> property</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/tsconfig.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/tsconfig.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -10,7 +10,10 @@</span></div><div class='line'><span style=\"color: #24292F\">     \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #24292F\">     \"declaration\": true,</span></div><div class='line'><span style=\"color: #24292F\">     \"jsx\": \"react\",</span></div><div class='line'><span style=\"color: #82071E\">-    \"moduleResolution\": \"Node\"</span></div><div class='line'><span style=\"color: #116329\">+    \"moduleResolution\": \"Node\",</span></div><div class='line'><span style=\"color: #116329\">+    \"paths\": {</span></div><div class='line'><span style=\"color: #116329\">+      \"*\": [\"types/*\"]</span></div><div class='line'><span style=\"color: #116329\">+    }</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\">   \"include\": [\"src\"]</span></div></code></div></pre>\n<p>In this folder we can place our type overrides for dependencies. We’ll talk more about this in our discussion of ambient type information later. For now, let’s convince ourselves that it works.</p>\n<p>in <code>chat/src/utils/networking.ts</code> make the following change near the top of the file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- import { HTTPError } from './http-error.cjs'</span></div><div class='line'><span style=\"color: #82071E\">- import { HTTPError } from 'http-error'</span></div></code></div></pre>\n<p>and delete <code>chat/src/utils/http-error.cjs</code>.</p>\n<p>You should see that TypeScript is not happy about the <code>'http-error'</code> module.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>Could not find a declaration file for module 'http-error'</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<p>We’re now depending on a library for the <code>HTTPError</code> class, but it doesn’t provide any type information! This library is located within the workshop repo (we’ll learn more about how to do this later) at <code>packages/http-error/index.js</code>.</p>\n<p>Let’s use this opportunity to “patch” the type information within our <code>chat</code> project</p>\n<p>Create a new file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">touch types/http-error.d.ts</span></div></code></div></pre>\n<p>put the following code snippet in it, and save</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class HTTPError' >HTTPError</data-lsp></span><span style=\"color: #24292F\"> {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAYwDYEMDOa4AkAqOAKAolFNHAN4C+QA'>Try</a></div></pre>\n<p>Look back at <code>networking.ts</code> and you should see that the import resolves, but instantiation of <code>HTTPError</code>s are now lighting up with errors like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>Expected 0 arguments, but got 2</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<p>Look at the source code for the library in <code>packages/http-error/index.js</code> and consider what the constructor wants to accept as arguments.</p>\n<p>Add this constructor declaration within the class declaration, and the errors should go away</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #8250DF\">constructor</span><span style=\"color: #24292F\">(resp: Response, message: string): HTTPError</span></div></code></div></pre>\n<p>Note that this isn’t a construct signature, it’s something a bit different. This is how we would denote the right shape of object in a declaration file using <code>class</code> syntax. We could also express this same type a different way</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">HTTPErrorInstance</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Error</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">HTTPError</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">resp</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Response</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">message</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">HTTPErrorInstance</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>But this has a couple of disadvantages (e.g. it doesn’t result in the interface name being the same as the class name)</p>\n<p>With either of these type declarations in place, you should be able to run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn typecheck</span></div></code></div></pre>\n<p>and see no type-checking errors</p>","tableOfContents":"<ul>\n<li><a href=\"#formalizing-interfaces-for-our-domain-model\">Formalizing interfaces for our domain model</a></li>\n<li><a href=\"#other-kinds-of-type-information\">Other kinds of type information</a></li>\n<li><a href=\"#some-relevant-parts-of-tsconfig\">Some relevant parts of tsconfig</a></li>\n<li><a href=\"#local-type-overrides\">Local type overrides</a></li>\n</ul>","fields":{"slug":"/course/enterprise-v2/07-dealing-with-pure-type-info/"},"frontmatter":{"title":"Step 4 - Dealing with Pure Type Information","course":"enterprise-v2","date":"October 27, 2023","description":"We'll discuss the goals and agenda of this course, and how to get up and\nrunning with the workshop project in 2 minutes or less.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/07-dealing-with-pure-type-info/","title":"Step 4 - Dealing with Pure Type Information","course":"enterprise-v2","order":7,"previous":{"fields":{"slug":"/course/enterprise-v2/06-steps-1-2-3/"},"frontmatter":{"title":"Steps 1, 2 and 3 - Adding our first types","order":6,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/08-null-undefined-and-boolean/"},"frontmatter":{"title":"Step 5 - Null, undefined and boolean operators","order":8,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}