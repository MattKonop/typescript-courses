{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/04-what-have-I-done/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"da2143e4-df6b-5072-9665-fd163e89dca4","excerpt":"What have I done? Let’s look closely at what we just did, and make sure we understand all of the parts that make up the whole In my tsconfig.json what exactly…","html":"<h2 id=\"what-have-i-done\" style=\"position:relative;\"><a href=\"#what-have-i-done\" aria-label=\"what have i done permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What have I done?</h2>\n<p>Let’s look closely at what we just did, and make sure we understand all of the parts that make up the whole</p>\n<h2 id=\"in-my-tsconfigjson-what-exactly-is-strict\" style=\"position:relative;\"><a href=\"#in-my-tsconfigjson-what-exactly-is-strict\" aria-label=\"in my tsconfigjson what exactly is strict permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In my <code>tsconfig.json</code> what exactly is “strict”?</h2>\n<p>The source of truth is <a href=\"https://github.com/microsoft/TypeScript/blob/dc8952d308c9de815e95bdb96727a9cbaedc9adb/src/compiler/commandLineParser.ts#L594\">here</a>, and it’s important to know that this is a moving target</p>\n<h3 id=\"noimplicitany\" style=\"position:relative;\"><a href=\"#noimplicitany\" aria-label=\"noimplicitany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitAny</code></h3>\n<ul>\n<li>“Default to explicit” instead of “default to loose”</li>\n<li>This is not in any way restrictive, it only requires that we be explicit about <code>any</code></li>\n</ul>\n<h3 id=\"noimplicitthis\" style=\"position:relative;\"><a href=\"#noimplicitthis\" aria-label=\"noimplicitthis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitThis</code></h3>\n<ul>\n<li>\n<p>There are certain places where <code>this</code> is important and non-inferrable</p>\n<blockquote>\n<p>Example: addEventListener</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">my_element.</span><span style=\"color: #8250DF\">addEventListener</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">'click'</span><span style=\"color: #24292F\">, </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">e</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// logs the className of my_element</span></div><div class='line'><span style=\"color: #24292F\">  console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">.className);</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// logs `true`</span></div><div class='line'><span style=\"color: #24292F\">  console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(e.currentTarget </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">this</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">});</span></div></code></div></pre>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"alwaysstrict\" style=\"position:relative;\"><a href=\"#alwaysstrict\" aria-label=\"alwaysstrict permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>alwaysStrict</code></h3>\n<ul>\n<li>JS “use strict”</li>\n<li>necessary for modern JS language features</li>\n</ul>\n<h3 id=\"strictbindcallapply\" style=\"position:relative;\"><a href=\"#strictbindcallapply\" aria-label=\"strictbindcallapply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictBindCallApply</code></h3>\n<ul>\n<li>Bind, call, apply used to return very loosely-typed functions.</li>\n<li>No good reasons I’m aware of to disable this</li>\n</ul>\n<h3 id=\"strictnullchecks\" style=\"position:relative;\"><a href=\"#strictnullchecks\" aria-label=\"strictnullchecks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictNullChecks</code></h3>\n<ul>\n<li>Without this enabled, primitive types allow <code>null</code> values</li>\n<li>Leaving this disabled makes truthy/falsy type guards much less useful</li>\n<li>This is asking for runtime errors that could otherwise be caught at build time</li>\n</ul>\n<h3 id=\"strictfunctiontypes\" style=\"position:relative;\"><a href=\"#strictfunctiontypes\" aria-label=\"strictfunctiontypes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictFunctionTypes</code></h3>\n<ul>\n<li>Some common-sense loopholes around matching function arguments during type-checking function values</li>\n<li>\n<p><a href=\"https://www.typescriptlang.org/play?#code/IYIwzgLgTsDGEAJYBthjAgggOwJYFthkEBvAKAUoQAcBXEZXWBUSGeBKAU2ABMB7bMgCeCZFwDmYAFwJstfCC5QA3GQC+ZFGgwBhYIi4APCF2y8MOAkVIUq4qQgC8CACxqqNWlCgAKAJSksIJg-OIAdMj8Er4A5HQ+sf6amtroCAAi0QjGpuaWeITE5J4OGC7udpQgwFAA1gFBIWFckdFxtQBmSSlkZLxc2txiXIidAIyyvkayVkWBTgB8CABu-Li8agNDXCNjAExTM5nRC8trG1uDqMPiYwDMR7L6EGer65tkE84InfsqlAA9ICEABRHz8KAIADuuAgAAsEABaJFsJgQABitGw8FwggAKsJqFwwF99j8JgCEMCEAB5Opkin3Kk08FQSFAA\">example</a></p>\n<blockquote>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">abstract</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Animal</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">abstract</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">legs</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Cat</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Animal</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">legs</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">purr</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">'purr'</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Dog</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">Animal</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">legs</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">bark</span><span style=\"color: #24292F\">() {</span></div><div class='line'><span style=\"color: #24292F\">    console.</span><span style=\"color: #8250DF\">log</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">'arf'</span><span style=\"color: #24292F\">);</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">f1</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Animal</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">f2</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Dog</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">declare</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">f3</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\">x</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Cat</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">void</span><span style=\"color: #24292F\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">// Error with --strictFunctionTypes</span></div><div class='line'><span style=\"color: #24292F\">f1 </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> f2;</span></div><div class='line'><span style=\"color: #24292F\">f2 </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> f1; </span><span style=\"color: #6E7781\">// Always ok</span></div><div class='line'><span style=\"color: #24292F\">f2 </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> f3; </span><span style=\"color: #6E7781\">// Always error</span></div></code></div></pre>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"strictpropertyinitialization\" style=\"position:relative;\"><a href=\"#strictpropertyinitialization\" aria-label=\"strictpropertyinitialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>strictPropertyInitialization</code></h3>\n<ul>\n<li>Holds you to your promises around class fields really being “always there” vs. “sometimes undefined”</li>\n</ul>\n<h2 id=\"even-more-strict\" style=\"position:relative;\"><a href=\"#even-more-strict\" aria-label=\"even more strict permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Even more strict</h2>\n<h3 id=\"nounusedlocals\" style=\"position:relative;\"><a href=\"#nounusedlocals\" aria-label=\"nounusedlocals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noUnusedLocals</code></h3>\n<ul>\n<li>Busts you on unused local variables</li>\n<li>Better to have TS detect this rather than a linter</li>\n</ul>\n<h3 id=\"nounusedparameters\" style=\"position:relative;\"><a href=\"#nounusedparameters\" aria-label=\"nounusedparameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noUnusedParameters</code></h3>\n<ul>\n<li>Function arguments you don’t use need to be prefixed with _</li>\n<li>I love this during the “exploration” phase of development b/c it highlights opportunities to simplify API surface</li>\n</ul>\n<h3 id=\"noimplicitreturns\" style=\"position:relative;\"><a href=\"#noimplicitreturns\" aria-label=\"noimplicitreturns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noImplicitReturns</code></h3>\n<ul>\n<li>If any code paths return something explicitly, all code paths must return something explicitly</li>\n</ul>\n<h3 id=\"nofallthroughcasesinswitch\" style=\"position:relative;\"><a href=\"#nofallthroughcasesinswitch\" aria-label=\"nofallthroughcasesinswitch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>noFallthroughCasesInSwitch</code></h3>\n<ul>\n<li>I’m ok with this one as being <em>disabled</em>, as I find case fall-throughs to be useful, important and easy (enough) to notice while reading code</li>\n</ul>\n<h3 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>types</code></h3>\n<ul>\n<li>Instead of pulling in all @types/*, specify exactly what should be available</li>\n<li><strong>NOTE:</strong> this is nuanced, and only affects global scope (i.e., window, process) and auto-import.</li>\n<li><em>Why I care:</em> I don’t want types used exclusively in things like tests to be quite so readily available for accidental use in “app code”</li>\n</ul>\n<h3 id=\"stripinternal-most-important-for-libraries\" style=\"position:relative;\"><a href=\"#stripinternal-most-important-for-libraries\" aria-label=\"stripinternal most important for libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>stripInternal</code> (most important for libraries)</h3>\n<ul>\n<li>Sometimes you need type information to only be available within a codebase.</li>\n<li><code>@internal</code> JSdoc tag surgically strips out type information for respective symbols</li>\n</ul>\n<h2 id=\"dont-go-viral\" style=\"position:relative;\"><a href=\"#dont-go-viral\" aria-label=\"dont go viral permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don’t go viral</h2>\n<p>There are some compiler options that I <em>really dislike</em> when used in libraries, because they have a high probability of “infecting” any consumer and depriving them from making choices about their own codebase</p>\n<h3 id=\"allowsyntheticdefaultimports\" style=\"position:relative;\"><a href=\"#allowsyntheticdefaultimports\" aria-label=\"allowsyntheticdefaultimports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>allowSyntheticDefaultImports</code></h3>\n<p>Allows you to import CommonJS modules as if they’re ES modules with a default export</p>\n<h3 id=\"esmoduleinterop\" style=\"position:relative;\"><a href=\"#esmoduleinterop\" aria-label=\"esmoduleinterop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>esModuleInterop</code></h3>\n<p>Adds some runtime support for CJS/ESM interop, and enables allowSyntheticDefaultImports</p>\n<h3 id=\"skipdefaultlibcheck\" style=\"position:relative;\"><a href=\"#skipdefaultlibcheck\" aria-label=\"skipdefaultlibcheck permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>skipDefaultLibCheck</code></h3>\n<p>This effectively ignores potential breaking changes that stem from your node_modules types mixing with your own types. Particularly if you’re building a library, you need to know that if you “hide” this problem they’ll still “feel” it (and probably need to “skip” too)</p>\n<h3 id=\"but-sometimes-we-need-these-right\" style=\"position:relative;\"><a href=\"#but-sometimes-we-need-these-right\" aria-label=\"but sometimes we need these right permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>But sometimes we need these, right?</h3>\n<p>I have never found a good reason to enable these options in well-structured TS code.</p>\n<p><code>allowSyntheticDefaultImports</code> and <code>esModuleInterop</code> aim to allow patterns like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> fs </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'fs'</span><span style=\"color: #24292F\">;</span></div></code></div></pre>\n<p>in situations where <code>fs</code> doesn’t actually expose an ES module <code>export default</code>. It exports a <em>namespace</em> of filesystem-related functions. Thankfully, even with these flags <em>both</em> disabled, we can still use a namespace import:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> fs </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'fs'</span><span style=\"color: #24292F\">;</span></div></code></div></pre>\n<p>Now there are rare situations where some CommonJS code exports a single non-namespace thing in a way like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// calculator.ts</span></div><div class='line'><span style=\"color: #0550AE\">module</span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\">exports</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">add</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">a</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">b</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> a </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> b;</span></div><div class='line'><span style=\"color: #24292F\">};</span></div></code></div></pre>\n<p>add is definitely not a namespace, and</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">*</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> add </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./calculator'</span><span style=\"color: #24292F\">;</span></div></code></div></pre>\n<p>WILL NOT WORK. There’s a TS-specific pattern that <em>will work</em> though — it’s a little weird, but it doesn’t require turning any compiler options on</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">import</span><span style=\"color: #24292F\"> add </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">require</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">'./calculator'</span><span style=\"color: #24292F\">);</span></div></code></div></pre>\n<h3 id=\"is-mike-asking-me-to-take-on-tech-debt\" style=\"position:relative;\"><a href=\"#is-mike-asking-me-to-take-on-tech-debt\" aria-label=\"is mike asking me to take on tech debt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is Mike asking me to take on tech debt?</h3>\n<p>You may be thinking “these don’t look like ES modules”, and “won’t the TS team standardize on ES modules later?”</p>\n<p>The answer is: <em>yes</em>, but you should think about this the same way that you think about a “legacy” version of Node.js that you need to support</p>\n<ul>\n<li>You shouldn’t break consumers yet</li>\n<li>Apps should be the first to adopt new things, followed by libraries that are more conservative</li>\n</ul>\n<p>TS modules predate ES modules, but there’s tons of code out there that already uses TS module stuff, and this is one of the most easy to codemod kinds of “tech debt” to incur.</p>","tableOfContents":"<ul>\n<li><a href=\"#what-have-i-done\">What have I done?</a></li>\n<li>\n<p><a href=\"#in-my-tsconfigjson-what-exactly-is-strict\">In my <code>tsconfig.json</code> what exactly is “strict”?</a></p>\n<ul>\n<li><a href=\"#noimplicitany\"><code>noImplicitAny</code></a></li>\n<li><a href=\"#noimplicitthis\"><code>noImplicitThis</code></a></li>\n<li><a href=\"#alwaysstrict\"><code>alwaysStrict</code></a></li>\n<li><a href=\"#strictbindcallapply\"><code>strictBindCallApply</code></a></li>\n<li><a href=\"#strictnullchecks\"><code>strictNullChecks</code></a></li>\n<li><a href=\"#strictfunctiontypes\"><code>strictFunctionTypes</code></a></li>\n<li><a href=\"#strictpropertyinitialization\"><code>strictPropertyInitialization</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#even-more-strict\">Even more strict</a></p>\n<ul>\n<li><a href=\"#nounusedlocals\"><code>noUnusedLocals</code></a></li>\n<li><a href=\"#nounusedparameters\"><code>noUnusedParameters</code></a></li>\n<li><a href=\"#noimplicitreturns\"><code>noImplicitReturns</code></a></li>\n<li><a href=\"#nofallthroughcasesinswitch\"><code>noFallthroughCasesInSwitch</code></a></li>\n<li><a href=\"#types\"><code>types</code></a></li>\n<li><a href=\"#stripinternal-most-important-for-libraries\"><code>stripInternal</code> (most important for libraries)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dont-go-viral\">Don’t go viral</a></p>\n<ul>\n<li><a href=\"#allowsyntheticdefaultimports\"><code>allowSyntheticDefaultImports</code></a></li>\n<li><a href=\"#esmoduleinterop\"><code>esModuleInterop</code></a></li>\n<li><a href=\"#skipdefaultlibcheck\"><code>skipDefaultLibCheck</code></a></li>\n<li><a href=\"#but-sometimes-we-need-these-right\">But sometimes we need these, right?</a></li>\n<li><a href=\"#is-mike-asking-me-to-take-on-tech-debt\">Is Mike asking me to take on tech debt?</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/enterprise-v2/04-what-have-I-done/"},"frontmatter":{"title":"What have I done?","course":"enterprise-v2","date":"June 10, 2021","description":"We'll discuss the goals and agenda of this course, and how to get up and\nrunning with the workshop project in 2 minutes or less.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/04-what-have-I-done/","title":"What have I done?","course":"enterprise-v2","order":4,"previous":{"fields":{"slug":"/course/enterprise-v2/03-mikes-ts-setup/"},"frontmatter":{"title":"Mike's TS Setup","order":3,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/05-converting-to-ts/"},"frontmatter":{"title":"Converting to TypeScript","order":5,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}