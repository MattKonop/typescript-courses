{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/06-dealing-with-pure-type-info/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"a173ef2b-d19d-5bce-80a0-e71210d35e85","excerpt":"Dealing with Pure Type Information The next step we’ll take in this project involves finding the right “home” for\ntype information of various kinds. Two we’ll…","html":"<h2 id=\"dealing-with-pure-type-information\" style=\"position:relative;\"><a href=\"#dealing-with-pure-type-information\" aria-label=\"dealing with pure type information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dealing with Pure Type Information</h2>\n<p>The next step we’ll take in this project involves finding the right “home” for\ntype information of various kinds. Two we’ll focus on in particular are</p>\n<ul>\n<li>Types that relate to <em>our own code</em>, and are part of our public API surface</li>\n<li>Fixes and customizations of <em>types for dependencies</em>, that are <em>not</em> part of our public API surface</li>\n</ul>\n<h2 id=\"some-relevant-parts-of-tsconfig\" style=\"position:relative;\"><a href=\"#some-relevant-parts-of-tsconfig\" aria-label=\"some relevant parts of tsconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Some relevant parts of tsconfig</h2>\n<ul>\n<li><code>typeRoots</code> allows us to tell TypeScript about top-level folders which may contain type information</li>\n<li><code>paths</code> allows us to instruct the compiler to look for type information for specific modules in specific locations</li>\n<li><code>types</code> allows us to specify which types can affect the global scope, and which appear in vscode auto-imports</li>\n</ul>\n<h2 id=\"local-type-overrides\" style=\"position:relative;\"><a href=\"#local-type-overrides\" aria-label=\"local type overrides permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local type overrides</h2>\n<p>Create a <code>types/</code> folder</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">mkdir types</span></div></code></div></pre>\n<p>and in your top-level tsconfig add a <code>paths</code> and a <code>baseUrl</code> property</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/tsconfig.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/tsconfig.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -10,7 +10,10 @@</span></div><div class='line'><span style=\"color: #24292F\">     \"outDir\": \"dist\",</span></div><div class='line'><span style=\"color: #24292F\">     \"declaration\": true,</span></div><div class='line'><span style=\"color: #24292F\">     \"jsx\": \"react\",</span></div><div class='line'><span style=\"color: #82071E\">-    \"moduleResolution\": \"Node\"</span></div><div class='line'><span style=\"color: #116329\">+    \"moduleResolution\": \"Node\",</span></div><div class='line'><span style=\"color: #116329\">+    \"baseUrl\": \".\",</span></div><div class='line'><span style=\"color: #116329\">+    \"paths\": {</span></div><div class='line'><span style=\"color: #116329\">+      \"*\": [\"types/*\"]</span></div><div class='line'><span style=\"color: #116329\">+    }</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\">   \"include\": [\"src\"]</span></div></code></div></pre>\n<p>In this folder we can place our type overrides for dependencies. We’ll talk more about\nthis in our discussion of ambient type information later.</p>\n<h2 id=\"published-type-information-for-your-app\" style=\"position:relative;\"><a href=\"#published-type-information-for-your-app\" aria-label=\"published type information for your app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Published type information for your app</h2>\n<p>Types can pass through module boundaries just like values, so we can create\none or more modules for interfaces that are needed by many concerns in our\nchat app.</p>\n<p>Let’s start by forbidding explicit anys in our app. To do so, make the following\nchange in your app</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/.eslintrc</span></div><div class='line'><span style=\"color: #116329\">+++ b/.eslintrc</span></div><div class='line'><span style=\"color: #8250DF\">@@ -83,7 +83,7 @@</span></div><div class='line'><span style=\"color: #24292F\">         \"@typescript-eslint/no-unsafe-member-access\": \"off\",</span></div><div class='line'><span style=\"color: #24292F\">         \"@typescript-eslint/no-unsafe-assignment\": \"off\",</span></div><div class='line'><span style=\"color: #24292F\">         \"@typescript-eslint/no-unsafe-return\": \"off\",</span></div><div class='line'><span style=\"color: #82071E\">-        \"@typescript-eslint/no-explicit-any\": \"off\"</span></div><div class='line'><span style=\"color: #116329\">+        \"@typescript-eslint/no-explicit-any\": \"error\"</span></div><div class='line'><span style=\"color: #24292F\">       }</span></div><div class='line'><span style=\"color: #24292F\">     },</span></div></code></div></pre>\n<p>A lot of the <code>any</code>s we’ll encounter in the app can be replaced with either\nand <code>unknown</code> or a more appropriate concrete type.</p>\n<p>Let’s make sure we first create types for important data models in our app.\nMake a new file <code>src/types.ts</code> containing the following</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A user participating in a chat</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IUser</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">username</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">name</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">iconUrl</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A chat message</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IMessage</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">teamId</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">channelId</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">userId</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">createdAt</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">user</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IUser</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">body</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A team, containing one or more chat channels</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">ITeam</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">iconUrl</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">name</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">channels</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IChannel</span><span style=\"color: #24292F\">[];</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * A chat channel, containing many chat messages</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IChannel</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">teamId</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">name</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">description</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">id</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\">messages</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">IMessage</span><span style=\"color: #24292F\">[];</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<h2 id=\"challenge-get-rid-of-all-of-the-new-lint-errors\" style=\"position:relative;\"><a href=\"#challenge-get-rid-of-all-of-the-new-lint-errors\" aria-label=\"challenge get rid of all of the new lint errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge: get rid of all of the new lint errors</h2>\n<p>Keep replacing <code>any</code>s until the ESLint errors and warnings go away, <strong>with one exception</strong></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">/**</span></div><div class='line'><span style=\"color: #6E7781\"> * PLEASE LEAVE THIS WARNING ABOUT AN UNSPECIFIED RETURN TYPE ALONE</span></div><div class='line'><span style=\"color: #6E7781\"> */</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\">// src/utils/networking.ts</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">async</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">apiCall</span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\">path</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">init</span><span style=\"color: #CF222E\">?:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">RequestInit</span><span style=\"color: #24292F\">) {}</span></div></code></div></pre>","tableOfContents":"<ul>\n<li><a href=\"#dealing-with-pure-type-information\">Dealing with Pure Type Information</a></li>\n<li><a href=\"#some-relevant-parts-of-tsconfig\">Some relevant parts of tsconfig</a></li>\n<li><a href=\"#local-type-overrides\">Local type overrides</a></li>\n<li><a href=\"#published-type-information-for-your-app\">Published type information for your app</a></li>\n<li><a href=\"#challenge-get-rid-of-all-of-the-new-lint-errors\">Challenge: get rid of all of the new lint errors</a></li>\n</ul>","fields":{"slug":"/course/enterprise-v2/06-dealing-with-pure-type-info/"},"frontmatter":{"title":"Dealing with Pure Type Information","course":"enterprise-v2","date":"June 10, 2021","description":"We'll discuss the goals and agenda of this course, and how to get up and\nrunning with the workshop project in 2 minutes or less.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/06-dealing-with-pure-type-info/","title":"Dealing with Pure Type Information","course":"enterprise-v2","order":6,"previous":{"fields":{"slug":"/course/enterprise-v2/05-converting-to-ts/"},"frontmatter":{"title":"Converting to TypeScript","order":5,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/07-types-at-runtime/"},"frontmatter":{"title":"Types At Runtime","order":7,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}