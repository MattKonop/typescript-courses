{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/10-api-extractor/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"5365c77b-9478-559c-8911-5fe5e176963c","excerpt":"API Extractor API extractor is a tool that’s part of Microsoft’s tech stack, and\nin my opinion it’s one of the most under-used and under-appreciated things in…","html":"<h2 id=\"api-extractor\" style=\"position:relative;\"><a href=\"#api-extractor\" aria-label=\"api extractor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API Extractor</h2>\n<p><a href=\"https://api-extractor.com/\">API extractor</a> is a tool that’s part of Microsoft’s tech stack, and\nin my opinion it’s one of the most under-used and under-appreciated things in the TypeScript ecosystem.</p>\n<h2 id=\"what-problems-does-it-solve\" style=\"position:relative;\"><a href=\"#what-problems-does-it-solve\" aria-label=\"what problems does it solve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What problems does it solve?</h2>\n<ul>\n<li>Generating API documentation</li>\n<li>Tells you if there are any changes in your API surface associated with a code change</li>\n<li>Allows you to provide multiple <em>variants</em> of your public API surface, at various levels of release maturity (i.e., “beta”)</li>\n</ul>\n<p>It’s also monorepo-friendly, which I’ll go into in more detail in the <strong>JavaScript and TypeScript Monorepos</strong> course.</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\"># Install dependencies</span></div><div class='line'><span style=\"color: #24292F\">yarn add -D @microsoft/api-extractor @microsoft/api-documenter</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\"># Generate an initial config file: api-extractor.json</span></div><div class='line'><span style=\"color: #24292F\">yarn api-extractor init</span></div></code></div></pre>\n<h2 id=\"configuration-the-basics\" style=\"position:relative;\"><a href=\"#configuration-the-basics\" aria-label=\"configuration the basics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuration: The basics</h2>\n<p>API extractor consumes <em>your tree of declaration files</em> as an input. Let’s make\na tsconfig specifically for this.</p>\n<h3 id=\"tsconfigapidocsjson\" style=\"position:relative;\"><a href=\"#tsconfigapidocsjson\" aria-label=\"tsconfigapidocsjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tsconfig.apidocs.json</code></h3>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">{</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"extends\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"./tsconfig.json\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"compilerOptions\"</span><span style=\"color: #24292F\">: {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"outDir\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\".dist-types\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"declaration\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"noEmit\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"emitDeclarationOnly\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0550AE\">\"jsx\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"react\"</span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\">\"include\"</span><span style=\"color: #24292F\">: [</span><span style=\"color: #0A3069\">\"src\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>and add this <code>.dist-types</code> folder to our <code>.gitignore</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/.gitignore</span></div><div class='line'><span style=\"color: #116329\">+++ b/.gitignore</span></div><div class='line'><span style=\"color: #8250DF\">@@ -115,5 +115,5 @@</span><span style=\"color: #24292F\"> dist</span></div><div class='line'><span style=\"color: #24292F\"> .yarn/install-state.gz</span></div><div class='line'><span style=\"color: #24292F\"> .pnp.*</span></div><div class='line'></div><div class='line'><span style=\"color: #116329\">+# Type information for api-extractor</span></div><div class='line'><span style=\"color: #116329\">+.dist-types</span></div><div class='line'><span style=\"color: #116329\">+# API report JSON generated by api-extractor</span></div><div class='line'><span style=\"color: #116329\">+temp</span></div></code></div></pre>\n<p>Let’s try to tell typescript to build using this config file and see what happens</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\"># build</span></div><div class='line'><span style=\"color: #24292F\">tsc -P tsconfig.apidocs.json</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\"># list contents of output folder</span></div><div class='line'><span style=\"color: #24292F\">ls -p .dist-types</span></div></code></div></pre>\n<p>You should see something like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>data/             type-guards.d.ts  ui/\nindex.d.ts        types.d.ts        utils/</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<p>Note the absence of <code>.js</code> files. This is <em>just the type information</em></p>\n<p>Next, we need to tell <code>api-extractor</code> about this. The whole point of this library is to consume a public API surface of some sort. We kind of have an app, and this is more traditionally done with a library, but there’s still a lot of value here! We can create a dedicated entry point just for api-extractor</p>\n<p>Create a new file <code>src/public-api-surface.ts</code> with the following content</p>\n<h4 id=\"srcpublic-api-surfacets\" style=\"position:relative;\"><a href=\"#srcpublic-api-surfacets\" aria-label=\"srcpublic api surfacets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"../src/public-api-surface.ts\"><code>src/public-api-surface.ts</code></a></h4>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  isChannel,</span></div><div class='line'><span style=\"color: #24292F\">  isMessage,</span></div><div class='line'><span style=\"color: #24292F\">  isTeam,</span></div><div class='line'><span style=\"color: #24292F\">  isTypedArray,</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./type-guards'</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> { IChannel, IMessage, ITeam, IUser } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./types'</span><span style=\"color: #24292F\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> { apiCall } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./utils/networking'</span><span style=\"color: #24292F\">;</span></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> { formatTimestamp } </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./utils/date'</span><span style=\"color: #24292F\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  HTTPErrorKind,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">default</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> HTTPError,</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./utils/http-error'</span><span style=\"color: #24292F\">;</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">default</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> Deferred,</span></div><div class='line'><span style=\"color: #24292F\">  RejectHandler,</span></div><div class='line'><span style=\"color: #24292F\">  ResolveHandler,</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">from</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">'./utils/deferred'</span><span style=\"color: #24292F\">;</span></div></code></div></pre>\n<p>and build your declaration files again</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\"># build</span></div><div class='line'><span style=\"color: #24292F\">tsc -P tsconfig.apidocs.json</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\"># list contents of output folder</span></div><div class='line'><span style=\"color: #24292F\">ls -p .dist-types</span></div></code></div></pre>\n<p>You should see something like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>data/                    type-guards.d.ts         utils/\nindex.d.ts               types.d.ts\npublic-api-surface.d.ts  ui/</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<p>Note the new <code>public-api-surface.d.ts</code>. This is the “main entry point” of our types, as far as api-extractor is concerned.</p>\n<p>Open <a href=\"../api-extractor.json\"><code>api-extractor.json</code></a> and look for <code>mainEntryPointFilePath</code>. Update it to point to your new declaration file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/api-extractor.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/api-extractor.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -45,7 +45,7 @@</span></div><div class='line'><span style=\"color: #24292F\">    *</span></div><div class='line'><span style=\"color: #24292F\">    * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">    */</span></div><div class='line'><span style=\"color: #82071E\">-  \"mainEntryPointFilePath\": \"&lt;projectFolder&gt;/lib/index.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+  \"mainEntryPointFilePath\": \"&lt;projectFolder&gt;/.dist-types/public-api-surface.d.ts\",</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">   /**</span></div></code></div></pre>\n<p>and let’s “extract the API surface”</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn api-extractor run --local</span></div></code></div></pre>\n<p>You should see a few things happen</p>\n<ul>\n<li>you now have a <code>/etc</code> folder containing a markdown API report</li>\n<li>you have a <code>/temp</code> folder with a <code>.json</code> and <code>.md</code> version of your API report</li>\n<li>you’ll see a bunch of warning messages in your console</li>\n</ul>\n<p>You’ll want to commit that <code>/etc</code> folder — it’s the “human-approved” API surface that\nfuture changes will be compared to. Do not commit the <code>/temp</code> folder to git (it should be ignored, if you followed <code>.gitignore</code>-related instructions above).</p>\n<p>Add a few npm-scripts to your <a href=\"../package.json\"><code>package.json</code></a></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/package.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/package.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -6,7 +6,9 @@</span></div><div class='line'><span style=\"color: #24292F\">     \"test\": \"yarn test-jest && yarn test-tsd && yarn test-dtslint\",</span></div><div class='line'><span style=\"color: #24292F\">     \"test-jest\": \"jest tests/components\",</span></div><div class='line'><span style=\"color: #24292F\">     \"test-tsd\": \"tsd tests/types-tsd\",</span></div><div class='line'><span style=\"color: #82071E\">-    \"test-dtslint\": \"dtslint tests/types-dtslint\"</span></div><div class='line'><span style=\"color: #116329\">+    \"test-dtslint\": \"dtslint tests/types-dtslint\",</span></div><div class='line'><span style=\"color: #116329\">+    \"api-report\": \"tsc -b tsconfig.apidocs.json && yarn api-extractor run\",</span></div><div class='line'><span style=\"color: #116329\">+    \"api-docs\": \"api-documenter markdown -i temp -o docs\"</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #24292F\">   \"devDependencies\": {</span></div></code></div></pre>\n<p>Now you should be able to run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\"># Update api report with any changes</span></div><div class='line'><span style=\"color: #24292F\">yarn update-api-report</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\"># Analyze the current state of the code, and</span></div><div class='line'><span style=\"color: #6E7781\"># return 0 if api report is up to date</span></div><div class='line'><span style=\"color: #24292F\">yarn api-report</span></div><div class='line'></div><div class='line'><span style=\"color: #6E7781\"># Extract the API information and generate docs</span></div><div class='line'><span style=\"color: #24292F\">yarn api-report </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> yarn api-docs</span></div></code></div></pre>\n<p>Next, let’s fix the errors in your console, it shouldn’t take long</p>\n<ul>\n<li><code>tsdoc-param-tag-missing-hyphen</code> wants <code>@param</code> JSDoc tags to look like</li>\n</ul>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class='code-container'><code>@param foo - description of foo</code></div></pre><!-- Note from shiki-twoslash: the language pre was not set up for Shiki to use, and so there is no code highlighting -->\n<ul>\n<li><code>ae-missing-release-tag</code> wants everything that is exported to be marked as one of <a href=\"https://api-extractor.com/pages/tsdoc/doc_comment_syntax/#release-tags\">four special JSDoc tags</a> - <code>@public</code>, <code>@beta</code>, <code>@alpha</code> and <code>@internal</code> (in descending order of release maturity)</li>\n</ul>\n<h2 id=\"configuring-the-rollup\" style=\"position:relative;\"><a href=\"#configuring-the-rollup\" aria-label=\"configuring the rollup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring the rollup</h2>\n<p>Make the following changes to your <a href=\"../api-extractor.json\"><code>api-extractor.json</code></a> file</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/api-extractor.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/api-extractor.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -181,7 +181,7 @@</span></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * (REQUIRED) Whether to generate the .d.ts rollup file.</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    \"enabled\": true</span></div><div class='line'><span style=\"color: #116329\">+    \"enabled\": true,</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * Specifies the output path for a .d.ts rollup file to be generated without any trimming.</span></div><div class='line'><span style=\"color: #8250DF\">@@ -195,7 +195,7 @@</span></div><div class='line'><span style=\"color: #24292F\">      * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">      * DEFAULT VALUE: \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;.d.ts\"</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    // \"untrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+    \"untrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-private.d.ts\",</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"beta\" release.</span></div><div class='line'><span style=\"color: #8250DF\">@@ -207,7 +207,7 @@</span></div><div class='line'><span style=\"color: #24292F\">      * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">      * DEFAULT VALUE: \"\"</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    // \"betaTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-beta.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+    \"betaTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-beta.d.ts\",</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"public\" release.</span></div><div class='line'><span style=\"color: #8250DF\">@@ -221,7 +221,7 @@</span></div><div class='line'><span style=\"color: #24292F\">      * SUPPORTED TOKENS: &lt;projectFolder&gt;, &lt;packageName&gt;, &lt;unscopedPackageName&gt;</span></div><div class='line'><span style=\"color: #24292F\">      * DEFAULT VALUE: \"\"</span></div><div class='line'><span style=\"color: #24292F\">      */</span></div><div class='line'><span style=\"color: #82071E\">-    // \"publicTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;-public.d.ts\",</span></div><div class='line'><span style=\"color: #116329\">+    \"publicTrimmedFilePath\": \"&lt;projectFolder&gt;/dist/&lt;unscopedPackageName&gt;.d.ts\"</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">     /**</span></div><div class='line'><span style=\"color: #24292F\">      * When a declaration is trimmed, by default it will be replaced by a code comment such as</span></div></code></div></pre>\n<p>and re-run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn update-api-report </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> yarn api-docs</span></div></code></div></pre>\n<p>You should see some new declaration files in your <code>/dist</code> folder now</p>\n<ul>\n<li><code>professional-ts.d.ts</code> for your public API</li>\n<li><code>professional-ts-beta.d.ts</code> for your “beta” public API</li>\n<li><code>professional-ts-private.d.ts</code> for your private API</li>\n</ul>\n<p>You could edit your <a href=\"../package.json\"><code>package.json</code></a> to point to the public API\n<code>.d.ts</code> rollup</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">--- a/package.json</span></div><div class='line'><span style=\"color: #116329\">+++ b/package.json</span></div><div class='line'><span style=\"color: #8250DF\">@@ -63,6 +64,7 @@</span></div><div class='line'><span style=\"color: #24292F\">     \"parcel-bundler\": \"^1.12.4\",</span></div><div class='line'><span style=\"color: #24292F\">     \"json-server\": \"^0.16.2\"</span></div><div class='line'><span style=\"color: #24292F\">   },</span></div><div class='line'><span style=\"color: #116329\">+  \"types\": \"dist/professional-ts.d.ts\",</span></div><div class='line'><span style=\"color: #24292F\">   \"name\": \"professional-ts\",</span></div><div class='line'><span style=\"color: #24292F\">   \"version\": \"0.0.0\",</span></div><div class='line'><span style=\"color: #24292F\">   \"description\": \"Mike's \\\"professional TypeScript\\\" course\",</span></div></code></div></pre>\n<p>If a consumer wanted to use your “beta” API, they’d just have to make a small\nmodification to their <code>tsconfig.json</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  \"compilerOptions\": {</span></div><div class='line'><span style=\"color: #116329\">+    \"paths\": {</span></div><div class='line'><span style=\"color: #116329\">+      \"professional-ts\": [\"node_modules/professional-ts/dist/professional-ts-beta.d.ts\"]</span></div><div class='line'><span style=\"color: #116329\">+    }</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div></code></div></pre>\n<h2 id=\"even-more-capability\" style=\"position:relative;\"><a href=\"#even-more-capability\" aria-label=\"even more capability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Even more capability</h2>\n<p>There are all sorts of other capabilities of api-extractor. For example</p>\n<ul>\n<li>See what happens if your <a href=\"../src/public-api-surface.ts\"><code>src/public-api-surface.ts</code></a> no longer exports <code>ITeam</code> — you’d be told that you can’t link to it in your documentation</li>\n<li>See what happens if you forget to export an interface that’s part of a public API signature</li>\n</ul>\n<p>You have a lot of control over what’s surfaced in the api-report, vs. in the console,\nand what’s regarded as a warning vs. error.</p>\n<p>All in all, this provides unparalleled visibility into how proposed code changes\nwould have ramifications on the public API surface of a library.</p>\n<hr>\n<p align='right'>\n <a href=\"./09-tests-for-types.md\">Next: Tests for Types ▶</a>\n</p>","tableOfContents":"<ul>\n<li><a href=\"#api-extractor\">API Extractor</a></li>\n<li><a href=\"#what-problems-does-it-solve\">What problems does it solve?</a></li>\n<li><a href=\"#setup\">Setup</a></li>\n<li>\n<p><a href=\"#configuration-the-basics\">Configuration: The basics</a></p>\n<ul>\n<li>\n<p><a href=\"#tsconfigapidocsjson\"><code>tsconfig.apidocs.json</code></a></p>\n<ul>\n<li><a href=\"#srcpublic-api-surfacets\"><code>src/public-api-surface.ts</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#configuring-the-rollup\">Configuring the rollup</a></li>\n<li><a href=\"#even-more-capability\">Even more capability</a></li>\n</ul>","fields":{"slug":"/course/enterprise-v2/10-api-extractor/"},"frontmatter":{"title":"API Extractor","course":"enterprise-v2","date":"October 27, 2023","description":"We'll discuss the goals and agenda of this course, and how to get up and\nrunning with the workshop project in 2 minutes or less.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/10-api-extractor/","title":"API Extractor","course":"enterprise-v2","order":10,"previous":{"fields":{"slug":"/course/enterprise-v2/09-declaration-files/"},"frontmatter":{"title":"Declaration Files","order":9,"course":"enterprise-v2","isExercise":null}},"next":null}},
    "staticQueryHashes": ["2785745750","2841359383"]}