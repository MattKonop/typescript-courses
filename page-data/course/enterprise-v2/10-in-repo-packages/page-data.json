{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/10-in-repo-packages/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"6ae5610e-01b0-5cd2-af76-aaf21a4e6d19","excerpt":"A need for modular architecture As a monolithic project starts to get larger and larger, builds get slower, and the need for some sort of modular architecture…","html":"<h2 id=\"a-need-for-modular-architecture\" style=\"position:relative;\"><a href=\"#a-need-for-modular-architecture\" aria-label=\"a need for modular architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A need for modular architecture</h2>\n<p>As a monolithic project starts to get larger and larger, builds get slower, and the need for some sort of modular architecture starts to become more important. Thankfully, it’s easier than ever to do this with TypeScript and <code>yarn</code>!</p>\n<p>We’ve already taken the first steps by creating the <code>chat-stdlib</code> project at the beginning of this course. This package exports the <code>Deferred</code> class and the <code>stringifyError</code> function.</p>\n<h2 id=\"introducing-the-dependency\" style=\"position:relative;\"><a href=\"#introducing-the-dependency\" aria-label=\"introducing the dependency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introducing the dependency</h2>\n<p>Yarn 2+ includes support for <a href=\"https://yarnpkg.com/features/workspaces\">workspaces</a> — individual packages that are part of the same project. The root level <code>package.json</code> in our course repo contains the following configuration</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0A3069\">\"workspaces\"</span><span style=\"color: #24292F\">: [</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"packages/*\"</span></div><div class='line'><span style=\"color: #24292F\">  ],</span></div></code></div></pre>\n<p>This indicates that every folder in <code>packages/</code> is to be treated as a workspace.</p>\n<p>Next, go to <code>packages/chat/package.json</code>, and add the following to the <code>dependencies</code> object</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #0A3069\">\"chat-stdlib\"</span><span style=\"color: #24292F\">: </span><span style=\"color: #0A3069\">\"workspace:*\"</span></div></code></div></pre>\n<p>The <code>*</code> here isn’t really important for our purposes, since we’re not publishing this <code>chat</code> package to npm.</p>\n<p>Once you’ve added this line to <code>chat</code>’s <code>package.json</code>, be sure to save the file and then run <code>yarn</code></p>\n<h2 id=\"consuming-the-dependency\" style=\"position:relative;\"><a href=\"#consuming-the-dependency\" aria-label=\"consuming the dependency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consuming the dependency</h2>\n<p><code>chat</code> has a couple of modules that we won’t need anymore</p>\n<ul>\n<li><code>packages/chat/src/utils/deferred.ts</code></li>\n<li><code>packages/chat/src/utils/error.cjs</code></li>\n<li><code>packages/chat/tests/utils/deferred.test.ts</code></li>\n<li><code>packages/chat/tests/utils/error.test.ts</code></li>\n</ul>\n<p>Feel free to delete these, as they’re all represented by code we already have in <code>chat-stdlib</code>. You’ll have to update a couple of import statements as a result of this</p>\n<p>in <code>packages/chat/src/utils/networking.ts</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- import { stringifyError } from './error'</span></div><div class='line'><span style=\"color: #116329\">+ import { stringifyError } from 'chat-stdlib'</span></div></code></div></pre>\n<p>in <code>packages/chat/src/ui/components/api.ts</code></p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #82071E\">- import { Deferred } from './deferred'</span></div><div class='line'><span style=\"color: #116329\">+ import { Deferred } from 'chat-stdlib'</span></div></code></div></pre>\n<p>You should now be able to run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn typecheck </span><span style=\"color: #CF222E\">&&</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">echo</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"passed type checking\"</span></div></code></div></pre>\n<p>and see it return successfully.</p>\n<h2 id=\"focusing-on-the-small-stuff\" style=\"position:relative;\"><a href=\"#focusing-on-the-small-stuff\" aria-label=\"focusing on the small stuff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Focusing on the small stuff</h2>\n<p>One of the advantages of this kind of modular architecture, is we can focus on a particular sub-part of our repo, installing <em>only</em> the dependencies necessary to run that part.</p>\n<p>If you want to test this, start by going to the root of the project and removing your <code>node_modules</code> folder</p>\n<p>Next, let’s run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn workspaces focus chat-stdlib</span></div></code></div></pre>\n<p>Check out the root <code>node_modules</code> folder now. You should see a very small number of dependencies. You have just enough in there to build, test and run the one package.</p>\n<p>If you want to go back to installing all of the dependencies needed by the whole repo, just run</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn</span></div></code></div></pre>","tableOfContents":"<ul>\n<li><a href=\"#a-need-for-modular-architecture\">A need for modular architecture</a></li>\n<li><a href=\"#introducing-the-dependency\">Introducing the dependency</a></li>\n<li><a href=\"#consuming-the-dependency\">Consuming the dependency</a></li>\n<li><a href=\"#focusing-on-the-small-stuff\">Focusing on the small stuff</a></li>\n</ul>","fields":{"slug":"/course/enterprise-v2/10-in-repo-packages/"},"frontmatter":{"title":"Local Packages","course":"enterprise-v2","date":"October 27, 2023","description":"We'll discuss the goals and agenda of this course, and how to get up and\nrunning with the workshop project in 2 minutes or less.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/10-in-repo-packages/","title":"Local Packages","course":"enterprise-v2","order":10,"previous":{"fields":{"slug":"/course/enterprise-v2/09-types-at-runtime/"},"frontmatter":{"title":"Types At Runtime","order":9,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/93-tests-for-types/"},"frontmatter":{"title":"Tests for Types","order":93,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}