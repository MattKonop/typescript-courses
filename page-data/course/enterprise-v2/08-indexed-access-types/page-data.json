{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/08-indexed-access-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"}]}},"markdownRemark":{"id":"a4502099-b8b5-5335-a4bc-89ef9eeddf2e","excerpt":"Indexed Access types provide a mechanism for retrieving\npart(s) of an array or object type via indices. We’ll\nlook at how this kind of type works, and a couple…","html":"<p>Indexed Access types provide a mechanism for retrieving\npart(s) of an array or object type via indices. We’ll\nlook at how this kind of type works, and a couple of practical\nexamples of where you might use them.</p>\n<p>At the simplest level, <strong>these kinds of types are all about\n<em>accessing</em> some part of another type, via <em>an index</em></strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.color: {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' >color</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) red: string' >red</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) green: string' >green</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='(property) blue: string' >blue</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carColor: {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>carColor</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\">\"color\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let carColor: {\n    red: string;\n    green: string;\n    blue: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjns52EMMgQZUchRXRQA2gBEsvJQAQC6OAD0kSrIAHoA-EA'>Try</a></div></pre>\n<p>In this situation <code>'color'</code> is the “index”.</p>\n<p>The index you use <em>must</em> be a valid “key” you could use on\na value of type <code>Car</code>. Below you can see what happens if you\ntry to break this rule:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carColor: any' >carColor</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\"><data-err>&quot;not-something-on-car&quot;</data-err></span><span style=\"color: #24292F\">]</span></div><span class=\"error\"><span>Property 'not-something-on-car' does not exist on type 'Car'.</span><span class=\"code\">2339</span></span><span class=\"error-behind\">Property 'not-something-on-car' does not exist on type 'Car'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME4BQBLAOwBcYAzAQwGNJQBhC6UAb11FAFsKBrSVRYtCIBzNpzgATSABt+gkWICekRqkIBXDgCMYYqnGkJUrdu2iQJcoYVGnQw85EJWFdrdPV9QA67dABfXECQMABacKp1YnDQ3GlIYlAqRjoDI3pGAG0AIkI4aMQ4DgSACxFQuEJQ5OhsgF0gA'>Try</a></div></pre>\n<p>You can also reach deeper into the object through multiple “accesses”</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carColorRedComponent: string' style='border-bottom: solid 2px lightgrey;'>carColorRedComponent</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\">\"color\"</span><span style=\"color: #24292F\">][</span><span style=\"color: #0A3069\">\"red\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>             </span><span class='popover'><div class='arrow'></div>let carColorRedComponent: string</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjnsB6Z8gC07hKLDvXOdhDBkBAxUOQUAJXVQggAHJhADMAp0KABtACJZeSh0gF0MtRY8nBcVZAA9AH4gA'>Try</a></div></pre>\n<p>…and <strong>you can pass or “project” a union type (<code>|</code>) through\n<code>Car</code> as an index, as long as all parts of the union type\nare <em>each</em> a valid index</strong></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let carProperty: number | {&#10;    red: string;&#10;    green: string;&#10;    blue: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>carProperty</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Car' >Car</data-lsp></span><span style=\"color: #24292F\">[</span><span style=\"color: #0A3069\">\"color\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"year\"</span><span style=\"color: #24292F\">]</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>let carProperty: number | {\n    red: string;\n    green: string;\n    blue: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgMJysg3gKGcgWzgGsIAuZAZzClAHM9CB7AEwgBsLraQH8BPCBgogArgQBG0RgibsmUCrnz4oEFlxr1G+OmoghNPPiontR5Klt6MAvjnsB6Z8gC07hKLDvXOdhDBkBAwABSgmAAdoMH4KdCgAbQAiWXkoJOQAH2QkwQwkgF0cFxVkAD0AfiA'>Try</a></div></pre>","tableOfContents":"","fields":{"slug":"/course/enterprise-v2/08-indexed-access-types/"},"frontmatter":{"title":"Indexed Access Types","course":"enterprise-v2","date":"June 10, 2021","description":"Indexed Access types provide a mechanism for retrieving\npart(s) of an array or object type via indices.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/08-indexed-access-types/","title":"Indexed Access Types","course":"enterprise-v2","order":8,"previous":{"fields":{"slug":"/course/enterprise-v2/07-infer/"},"frontmatter":{"title":"Inference with conditional types","order":7,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/09-mapped-types/"},"frontmatter":{"title":"Mapped Types","order":9,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}