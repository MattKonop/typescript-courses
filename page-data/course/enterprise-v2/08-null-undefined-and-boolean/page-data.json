{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/enterprise-v2/08-null-undefined-and-boolean/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"142fd1e3-9027-5a1c-b37d-780b99b94ad1","excerpt":"Let’s proceed with step 5 (5) Add safety to boolean expressions, and improve handling of null and undefined To catch problematic truthy/falsy expressions…","html":"<p>Let’s proceed with step 5</p>\n<blockquote>\n<p>(5) <strong>Add safety to boolean expressions, and improve handling of <code>null</code> and <code>undefined</code></strong></p>\n<ul>\n<li>To catch problematic truthy/falsy expressions, enable the ESLint rule <code>@typescript-eslint/strict-boolean-expressions</code></li>\n<li>Enable the tsconfig option <code>strictNullChecks</code> to ensure that if <code>null</code> is desired to be an allowed value in a type, it has to be explicitly stated as such</li>\n<li>Enable the tsconfig option <code>exactOptionalPropertyTypes</code> to catch occurrences where optional properties are explicitly set to the value <code>undefined</code> instead of being deleted</li>\n</ul>\n</blockquote>\n<p>There are a few places where you’ll need to change <code>if (!foo)</code> to <code>if (typeof foo === 'undefined')</code>. Use care when deciding whether <code>null</code> should be handled specifically — it’s easy to make mistakes!</p>\n<p>Fix compiler and lint errors until all of the important commands succeed</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn typecheck</span></div><div class='line'><span style=\"color: #24292F\">yarn lint</span></div><div class='line'><span style=\"color: #24292F\">yarn </span><span style=\"color: #0550AE\">test</span></div></code></div></pre>\n<p>This is the last of the “tightening up strictness” steps we’ll complete together, because they all pretty much feel this way, and we have more interesting things to discuss.</p>","tableOfContents":"","fields":{"slug":"/course/enterprise-v2/08-null-undefined-and-boolean/"},"frontmatter":{"title":"Step 5 - Null, undefined and boolean operators","course":"enterprise-v2","date":"October 27, 2023","description":"We'll discuss the goals and agenda of this course, and how to get up and\nrunning with the workshop project in 2 minutes or less.\n"}}},"pageContext":{"slug":"/course/enterprise-v2/08-null-undefined-and-boolean/","title":"Step 5 - Null, undefined and boolean operators","course":"enterprise-v2","order":8,"previous":{"fields":{"slug":"/course/enterprise-v2/07-dealing-with-pure-type-info/"},"frontmatter":{"title":"Step 4 - Dealing with Pure Type Information","order":7,"course":"enterprise-v2","isExercise":null}},"next":{"fields":{"slug":"/course/enterprise-v2/09-types-at-runtime/"},"frontmatter":{"title":"Types At Runtime","order":9,"course":"enterprise-v2","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}