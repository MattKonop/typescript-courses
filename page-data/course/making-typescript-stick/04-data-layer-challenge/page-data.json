{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/making-typescript-stick/04-data-layer-challenge/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"}]}},"markdownRemark":{"id":"4b055095-a1fc-58c8-a4cc-b0ba8ee080aa","excerpt":"The Challenge Let’s get some hands on experience working with template literal types by building a\ndata store, whose method names are based on the type of…","html":"<h2 id=\"the-challenge\" style=\"position:relative;\"><a href=\"#the-challenge\" aria-label=\"the challenge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Challenge</h2>\n<p>Let’s get some hands on experience working with template literal types by building a\ndata store, whose method names are based on the type of entities we’re managing.</p>\n<p>If you look at <a href=\"https://github.com/mike-north/making-typescript-stick/blob/ede0b030f21eda4caaa293cf7c4a605281cee72d/challenges/data-layer/src/index.ts\">the starting point code</a> for this exercise, you’ll\nsee the following</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line dim'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface DataEntity' >DataEntity</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) DataEntity.id: string' >id</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Movie' >Movie</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='interface DataEntity' >DataEntity</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Movie.director: string' >director</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">interface</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Song' >Song</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='interface DataEntity' >DataEntity</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line dim'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Song.singer: string' >singer</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line dim'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type DataEntityMap = {&#10;    movie: Movie;&#10;    song: Song;&#10;}' >DataEntityMap</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) movie: Movie' >movie</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Movie' >Movie</data-lsp></span></div><div class='line highlight'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) song: Song' >song</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Song' >Song</data-lsp></span></div><div class='line highlight'><span style=\"color: #24292F\">}</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style=\"color: #CF222E\">export</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class DataStore' >DataStore</data-lsp></span><span style=\"color: #24292F\"> {}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBASwHY2FAZgQwMbDgEUxkwFEUEYBPOAbwCg5EATALjgGcYpkBzOgXzqhIsRCjRZccALIQAbgjyhUSJuwJFS5KrQZwmCKMGwxobTtyR9Bw6PGSoMOPAGUIVuMuCr1hYmRgKanpGdl40cy5eATohcDs4KjA8Py1AqmlMMDgAXl1GAFt5RTZZBWA9dnceNjcrGLiReGwAG0x2X00XUyNafiA'>Try</a></div></pre>\n<p>This <code>DataEntityMap</code> object should drive a lot of what happens to <code>DataStore</code>.</p>\n<p>Ultimately, <code>DataStore</code> should end up with methods like</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">ds</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">DataStore</span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">addSong</span><span style=\"color: #24292F\">({ id: </span><span style=\"color: #0A3069\">\"song-123\"</span><span style=\"color: #24292F\">, singer: </span><span style=\"color: #0A3069\">\"The Flaming Lips\"</span><span style=\"color: #24292F\"> })</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">addMovie</span><span style=\"color: #24292F\">({</span></div><div class='line'><span style=\"color: #24292F\">  id: </span><span style=\"color: #0A3069\">\"movie-456\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  director: </span><span style=\"color: #0A3069\">\"Stephen Spielberg\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">})</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">getSong</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"song-123\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// returns the song</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">getMovie</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"movie-456\"</span><span style=\"color: #24292F\">) </span><span style=\"color: #6E7781\">// returns the movie</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">getAllSongs</span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// array of all songs</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">getAllMovies</span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// array of all movies</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">clearSongs</span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// clears all songs</span></div><div class='line'><span style=\"color: #24292F\">ds.</span><span style=\"color: #8250DF\">clearMovies</span><span style=\"color: #24292F\">() </span><span style=\"color: #6E7781\">// clears all movies</span></div></code></div></pre>\n<p>It’s ok to define these explicitly in the <code>DataStore</code> class, but they should be\ntype-checked against the <code>DataEntityMap</code> type in some way.</p>\n<h3 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h3>\n<ul>\n<li>If you mis-name a method on the class (e.g., <code>getSongs</code> instead of <code>getAllSongs</code>), you should\nget some sort of type error that alerts you that you’ve broken the established pattern</li>\n<li>If you add a new entity like <code>Comic</code> (shown below) <em>and make no other changes to your solution</em>,\nyou should get some sort of type error that alerts you to the absence of a <code>clearComics</code>,\n<code>getAllComics</code> and <code>getAllSongs</code> method.</li>\n</ul>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">diff</div><div class='code-container'><code><div class='line'><span style=\"color: #116329\">+export interface Comic extends DataEntity {</span></div><div class='line'><span style=\"color: #116329\">+  issueNumber: number</span></div><div class='line'><span style=\"color: #116329\">+}</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">export type DataEntityMap = {</span></div><div class='line'><span style=\"color: #24292F\">  movie: Movie</span></div><div class='line'><span style=\"color: #24292F\">  song: Song</span></div><div class='line'><span style=\"color: #116329\">+  comic: Comic</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<ul>\n<li>There should be no externally-visible properties on an instance of <code>DataStore</code> beyond the required methods</li>\n<li>Your code, and the test suite should type-check</li>\n<li>All pre-existing tests should pass</li>\n</ul>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>First, if you haven’t done so already, clone the workshop project\nfor this course</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git clone https://github.com/mike-north/making-typescript-stick</span></div><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> making-typescript-stick</span></div></code></div></pre>\n<p>Make sure you have <a href=\"https://volta.sh/\">Volta</a> installed. If you haven’t\ndone so already, just run the following to install it</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">curl https://get.volta.sh </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> bash</span></div></code></div></pre>\n<p>Next, let’s install our dependencies</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn</span></div></code></div></pre>\n<p>and finally, let’s navigate to the folder containing this specific challenge</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> challenges/data-layer</span></div></code></div></pre>\n<p>You can now run the test suite by running <code>yarn test</code></p>\n<p>Your job is to modify the code in <code>./src/index.ts</code> until all of the requirements of this exercise are met</p>\n<h2 id=\"hints\" style=\"position:relative;\"><a href=\"#hints\" aria-label=\"hints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hints</h2>\n<ul>\n<li>Brush up on <a href=\"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html\">indexed access types</a></li>\n<li>Brush up on <a href=\"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html\">mapped types</a>, and in particular <a href=\"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#key-remapping-via-as\">the new “key remapping” feature</a> that landed in TS 4.1</li>\n<li>Brush up on <a href=\"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html\">template literal types</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#the-challenge\">The Challenge</a></p>\n<ul>\n<li><a href=\"#requirements\">Requirements</a></li>\n</ul>\n</li>\n<li><a href=\"#setup\">Setup</a></li>\n<li><a href=\"#hints\">Hints</a></li>\n</ul>","fields":{"slug":"/course/making-typescript-stick/04-data-layer-challenge/"},"frontmatter":{"title":"Challenge 1: Building a typed data store","course":"making-typescript-stick","date":"March 22, 2022","description":"Let's practice using template literal types, mapped types and generics\nby building our typed data store.\n"}}},"pageContext":{"slug":"/course/making-typescript-stick/04-data-layer-challenge/","title":"Challenge 1: Building a typed data store","course":"making-typescript-stick","order":4,"previous":{"fields":{"slug":"/course/making-typescript-stick/03-recent-updates-to-typescript/"},"frontmatter":{"title":"Recent updates to TypeScript","order":3,"course":"making-typescript-stick","isExercise":null}},"next":{"fields":{"slug":"/course/making-typescript-stick/05-does-it-compile/"},"frontmatter":{"title":"Game 1: Does it compile?","order":5,"course":"making-typescript-stick","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}