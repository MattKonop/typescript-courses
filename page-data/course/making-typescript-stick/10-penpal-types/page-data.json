{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/making-typescript-stick/10-penpal-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"d46156eb-dc9d-54d7-8871-362b1ed515c5","excerpt":"The Challenge Years ago I was doing some work that involved Web Workers. If you’ve never used these before, you can think of them as totally independent…","html":"<h2 id=\"the-challenge\" style=\"position:relative;\"><a href=\"#the-challenge\" aria-label=\"the challenge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Challenge</h2>\n<p>Years ago I was doing some work that involved <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a>. If you’ve never used these before, you can think of them as totally independent programs that communicate\nwith your “main” program via <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\">the <code>postMessage</code> API</a>.</p>\n<p><code>postMessage</code> is great (and a good example of the <a href=\"https://en.wikipedia.org/wiki/Actor_model\">actor concurrency model</a>) but\nit’s not the most refined way to handle asynchronous communication. Frankly, I prefer <code>Promise</code>s!</p>\n<p>Thankfully I found this cool open source project called <a href=\"https://github.com/Aaronius/penpal\">Penpal</a>, which effectively\nallows you to define methods in your worker, and they appear in your main application async-ified.</p>\n<p>For example, in your worker you might have</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const methods: {&#10;    add(a: number, b: number): number;&#10;}' >methods</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) add(a: number, b: number): number' >add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) a: number' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(parameter) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) a: number' >a</data-lsp> </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) b: number' >b</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  },</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAtgUygCxAEwjAvDA3gKBhgEM00AKYgLhjAFc4AjBAJwBoZGb6nWBKbg2Ys8hIjBZI6LMCRgBqTmIC+bfMqA'>Try</a></div></pre>\n<p>and in the main application you’d have access to some object with an <code>add</code> automatically (after a connection is established).</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const child: {&#10;    add: (a: number, b: number) => Promise&lt;number>;&#10;}' >child</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(property) add: (a: number, b: number) => Promise&lt;number>' style='border-bottom: solid 2px lightgrey;'>add</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">)</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>(property) add: (a: number, b: number) =&gt; Promise&lt;number&gt;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBMAWBLANgExgXhgbwFAxgENVUAuGACkPLAFcBbAIwFMAnAGhkZoZdYEpMAPhgAFViHqIIzAHStmEEMgBuzKjADUXfu1wBfXAHojMALQXgtKBbO4EKVLOKoKAZk4AWfsdMECAHoA-EA'>Try</a></div></pre>\n<p>If the way this works is not quite clear to you, I recommend taking a look at <a href=\"https://github.com/Aaronius/penpal\">the readme for the library</a></p>\n<h2 id=\"the-task\" style=\"position:relative;\"><a href=\"#the-task\" aria-label=\"the task permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The task</h2>\n<p>Create a utility type <code>WrapForPenpal&#x3C;T></code> that takes an object <code>T</code> with methods (you may assume no non-function properties are ever on this object), and emits a type with <em>similar</em> methods, but any non-promise return types become ”<code>Promise</code>-ified”.</p>\n<p>For example</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> methods </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">add</span><span style=\"color: #24292F\">: (</span><span style=\"color: #953800\">a</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">b</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> a</span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\">b,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\">subtract</span><span style=\"color: #24292F\">: (</span><span style=\"color: #953800\">a</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\">b</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> a</span><span style=\"color: #CF222E\">-</span><span style=\"color: #24292F\">b</span></div><div class='line'><span style=\"color: #24292F\">  doAsyncThing: (</span><span style=\"color: #953800\">url</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">)</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Promise</span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]&gt;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">const asyncMethods: WrapForPenpal</span><span style=\"color: #CF222E\">&lt;typeof</span><span style=\"color: #24292F\"> methods</span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {}</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">asyncMethods.</span><span style=\"color: #8250DF\">add</span><span style=\"color: #24292F\">(a, b); </span><span style=\"color: #6E7781\">// returns Promise&lt;number&gt;</span></div><div class='line'><span style=\"color: #24292F\">asyncMethods.</span><span style=\"color: #8250DF\">subtract</span><span style=\"color: #24292F\">(a, b); </span><span style=\"color: #6E7781\">// returns Promise&lt;number&gt;</span></div><div class='line'><span style=\"color: #24292F\">asyncMethods.</span><span style=\"color: #8250DF\">doAsyncThing</span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">'/api/thing'</span><span style=\"color: #24292F\">); </span><span style=\"color: #6E7781\">// Promise&lt;string[]&gt;</span></div></code></div></pre>\n<p><strong>You do not need to worry about actually creating an object that has these <code>Promise</code>-ified methods — we are only interested\nin the utility type</strong>.</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>First, if you haven’t done so already, clone the workshop project\nfor this course</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">git clone https://github.com/mike-north/making-typescript-stick</span></div><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> making-typescript-stick</span></div></code></div></pre>\n<p>Make sure you have <a href=\"https://volta.sh/\">Volta</a> installed. If you haven’t\ndone so already, just run the following to install it</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">curl https://get.volta.sh </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> bash</span></div></code></div></pre>\n<p>Next, let’s install our dependencies</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">yarn</span></div></code></div></pre>\n<p>and finally, let’s navigate to the folder containing this specific challenge</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">sh</div><div class='code-container'><code><div class='line'><span style=\"color: #0550AE\">cd</span><span style=\"color: #24292F\"> challenges/async-communicator</span></div></code></div></pre>\n<p>Your job is to modify the code in <code>./src/index.ts</code> until all of the existing\ntests <em>within the same file</em> pass.</p>\n<h2 id=\"hints\" style=\"position:relative;\"><a href=\"#hints\" aria-label=\"hints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hints</h2>\n<ul>\n<li>Make sure to brush up on <a href=\"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html\">mapped types</a>, <a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\">conditional types</a> and <a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types\">use of the <code>infer</code> keyword</a></li>\n<li>Familiarize yourself with the <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterstype\"><code>Parameters&#x3C;T></code></a> and <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype\"><code>ReturnType&#x3C;T></code></a> utility types</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#the-challenge\">The Challenge</a></li>\n<li><a href=\"#the-task\">The task</a></li>\n<li><a href=\"#setup\">Setup</a></li>\n<li><a href=\"#hints\">Hints</a></li>\n</ul>","fields":{"slug":"/course/making-typescript-stick/10-penpal-types/"},"frontmatter":{"title":"Challenge 4: Penpal types","course":"making-typescript-stick","date":"March 22, 2022","description":"Take on one of the real-world challenges that Mike encountered\non his path to becoming a typescript pro!\n"}}},"pageContext":{"slug":"/course/making-typescript-stick/10-penpal-types/","title":"Challenge 4: Penpal types","course":"making-typescript-stick","order":10,"previous":{"fields":{"slug":"/course/making-typescript-stick/09-guess-that-type/"},"frontmatter":{"title":"Game 3: Guess That Type","order":9,"course":"making-typescript-stick","isExercise":null}},"next":null}},
    "staticQueryHashes": ["2785745750","2841359383"]}