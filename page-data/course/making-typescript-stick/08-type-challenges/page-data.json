{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/making-typescript-stick/08-type-challenges/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"}]}},"markdownRemark":{"id":"a4f818d1-35f6-5a58-bf8b-9d5c6a3b1729","excerpt":"Type challenges\nare a great way to\npractice using the TS type system. These are often quite challenging, but they give\nyou valuable practice thinking about how…","html":"<p><a href=\"https://github.com/type-challenges/type-challenges\">Type challenges</a>\nare a great way to\npractice using the TS type system. These are often quite challenging, but they give\nyou valuable practice thinking about how utility types work.</p>\n<p>Let’s tackle a curated selection of these challenges ourselves!</p>\n<h2 id=\"round-1\" style=\"position:relative;\"><a href=\"#round-1\" aria-label=\"round 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Round 1</h2>\n\n<h3 id=\"ifc-t-f\" style=\"position:relative;\"><a href=\"#ifc-t-f\" aria-label=\"ifc t f permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>If&#x3C;C, T, F></code></h3>\n<p>Implement a type that evaluates to <code>T</code> if the type <code>C</code> is\n<code>true</code> or <code>F</code> if <code>C</code> is <code>false</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type If&lt;C, T, F> = never' >If</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) C in type If&lt;C, T, F>' >C</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type If&lt;C, T, F>' >T</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) F in type If&lt;C, T, F>' >F</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type If&lt;C, T, F> = never' >If</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"apple\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"pear\"</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0A3069\">\"apple\"</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type If&lt;C, T, F> = never' >If</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"orange\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">42</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0550AE\">42</span><span style=\"color: #24292F\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZIPx9ADCWoxaAGJFHJAAbjADYIyQiPiIK6A0ism8EgDauKAU1JB09LlVa-TNLQAIkUxDGkCBwNIimgQOEwNB4Lh8LeH1oDF+qn+9WSwIQig4AHMIVosGh4aAycJhLgALpAA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h3 id=\"lengthoftuplet\" style=\"position:relative;\"><a href=\"#lengthoftuplet\" aria-label=\"lengthoftuplet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>LengthOfTuple&#x3C;T></code></h3>\n<p>Implement a type that evaluates to a numeric type literal, equivalent to the\nlength of a specified tuple type <code>T</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type LengthOfTuple&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const Fruits: readonly [\"cherry\", \"banana\"]' >Fruits</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"cherry\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"banana\"</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = readonly [\"cherry\", \"banana\"]' >const</data-lsp></span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, true, false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">]&gt;, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type NotEqual&lt;X, Y> = true extends Equal&lt;X, Y> ? false : true' >NotEqual</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">]&gt;, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const Fruits: readonly [\"cherry\", \"banana\"]' >Fruits</data-lsp>>, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type LengthOfTuple&lt;T> = never' >LengthOfTuple</data-lsp></span><span style=\"color: #24292F\">&lt;[]&gt;, </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZAAynADm+DMA8vGMAmOQxuKgHJAAbjADYIyQiPiIuDRwHA+gAGKCc4+nANoAIhoMxg0EIAK0AIARooOLDFACALqgRS8F5vfArUA0VH3f64UAUaiQOj0XJVdYcLa7faHcb0P7OLRoLQYRHCVnCDkEom0BhZHKVVSU6l7A5HBlM9Cs9nMrkaHlUPlkoX0EXbMV045LSBweKfb6PDnoeWK4mk8nCzYa2kSv6y0AABi5uERQA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h3 id=\"endswitha-b\" style=\"position:relative;\"><a href=\"#endswitha-b\" aria-label=\"endswitha b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>EndsWith&#x3C;A, B></code></h3>\n<p>Implement a type that evaluates to <code>true</code> if the type <code>A</code> ends with the type <code>B</code>,\notherwise false.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type EndsWith&lt;A, B> = any' >EndsWith</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type EndsWith&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) B in type EndsWith&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type EndsWith&lt;A, B> = any' >EndsWith</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"ice cream\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"cream\"</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type EndsWith&lt;A, B> = any' >EndsWith</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"ice cream\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"chocolate\"</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpsrYA6nP4M-QAgloAQkWKHIQDYIyQiPiIK6A0ism8EgDauKAU1JB09LlV5OubbYAIjmNDINGgkEUwyBWiBEKhMOEWmawmRbw+tAYv1U-x4Gy29BBYLukOhsNA8JmcBocGUinYQORoHqyTRuAAukA'>Try</a></div></pre>\n<details>\n<summary>Click for hints</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FirstLetter&lt;S> = S extends `${infer F}${string}` ? F : never' >FirstLetter</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S in type FirstLetter&lt;S>' >S</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S in type FirstLetter&lt;S>' >S</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">`${</span><span style=\"color: #CF222E\">infer</span><span style=\"color: #0A3069\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) F' >F</data-lsp></span><span style=\"color: #0A3069\">}${</span><span style=\"color: #0550AE\">string</span><span style=\"color: #0A3069\">}`</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) F' >F</data-lsp></span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstLetterOfBird: \"b\"' style='border-bottom: solid 2px lightgrey;'>firstLetterOfBird</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FirstLetter&lt;S> = S extends `${infer F}${string}` ? F : never' >FirstLetter</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"bird\"</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>let firstLetterOfBird: \"b\"</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let firstLetterOfDog: \"d\"' style='border-bottom: solid 2px lightgrey;'>firstLetterOfDog</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type FirstLetter&lt;S> = S extends `${infer F}${string}` ? F : never' >FirstLetter</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"dog\"</span><span style=\"color: #24292F\">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>let firstLetterOfDog: \"d\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAYglgJwM7ADIWMCCA8BlAPigF4o8oIAPLAOwBMkoADAEgG84aAzbWAX3YoEnAOZ8mAKChQA-LClQAXFBoQAbtgkAbDFC6IU6TNgDyXAEKI6y+MjQYsuAEQAjK04ISA9F+lQAejLauvp2Ro5mACIA9iI2BvbGznSxHt6+0oFAA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h3 id=\"concata-b\" style=\"position:relative;\"><a href=\"#concata-b\" aria-label=\"concata b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Concat&#x3C;A, B></code></h3>\n<p>Implement a type that concatenates two tuple types <code>A</code>, and <code>B</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type Concat&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) B in type Concat&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292F\">&lt;[], []&gt;, []&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292F\">&lt;[], [</span><span style=\"color: #0A3069\">\"hello\"</span><span style=\"color: #24292F\">]&gt;, [</span><span style=\"color: #0A3069\">\"hello\"</span><span style=\"color: #24292F\">]&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">18</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">19</span><span style=\"color: #24292F\">], [</span><span style=\"color: #0550AE\">20</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">21</span><span style=\"color: #24292F\">]&gt;, [</span><span style=\"color: #0550AE\">18</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">19</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">20</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">21</span><span style=\"color: #24292F\">]&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type Concat&lt;A, B> = any' >Concat</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">42</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"b\"</span><span style=\"color: #24292F\">], [</span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;]&gt;,</span></div><div class='line'><span style=\"color: #24292F\">      [</span><span style=\"color: #0550AE\">42</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"b\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;]</span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;</span></div><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZADCcBw0igwAgloAQkWKHIQDYIyQiPiIK6BbybwSANq4oBTUkHT0uVXrm9v0J4AXS0wOEoKBwnBr3etAYP1Ufy2DGBoIARDNIMplHA0ZD0ZjsbjIdC3lQ4fQYWTKoiNsjAc4ABxaZwAThBoCeaAADFo0M58ZymSzWXzeegBcIYaTYZ8GFSKnlKW8VaAkQCnlg0Fo0Yo0TqAEZ40EABXgwwWkHoBrgcHGx2E+IVb012tAuv17qNWjNcAtyWttvtHEdCqlbylQKAA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"round-2\" style=\"position:relative;\"><a href=\"#round-2\" aria-label=\"round 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Round 2</h2>\n<h3 id=\"returnoff\" style=\"position:relative;\"><a href=\"#returnoff\" aria-label=\"returnoff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ReturnOf&#x3C;F></code></h3>\n<p>Implement a type that emits the return type of a function type <code>F</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) F in type ReturnOf&lt;F>' >F</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">never</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const flipCoin: () => \"heads\" | \"tails\"' >flipCoin</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"heads\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"tails\"</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='const rockPaperScissors: (arg: 1 | 2 | 3) => \"rock\" | \"paper\" | \"scissors\"' >rockPaperScissors</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> (</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: 1 | 2 | 3' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) arg: 1 | 2 | 3' >arg</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0A3069\">\"rock\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = \"rock\"' >const</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> <data-lsp lsp='(parameter) arg: 2 | 3' >arg</data-lsp> </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0A3069\">\"paper\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = \"paper\"' >const</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0A3069\">\"scissors\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">as</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\"><data-lsp lsp='type const = \"scissors\"' >const</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false, false, false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// simple 1</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// simple 2</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">123</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">123</span><span style=\"color: #24292F\">&gt;&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type ComplexObject = {&#10;    a: [12, \"foo\"];&#10;    bar: \"hello\";&#10;    prev(): number;&#10;}' >ComplexObject</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ComplexObject = {&#10;    a: [12, \"foo\"];&#10;    bar: \"hello\";&#10;    prev(): number;&#10;}' >ComplexObject</data-lsp></span><span style=\"color: #24292F\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;,</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;&gt;</span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> () </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\">&gt;&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"heads\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"tails\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const flipCoin: () => \"heads\" | \"tails\"' >flipCoin</data-lsp>>></span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"rock\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"paper\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"scissors\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type ReturnOf&lt;F> = never' >ReturnOf</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">typeof</span><span style=\"color: #24292F\"> <data-lsp lsp='const rockPaperScissors: (arg: 1 | 2 | 3) => \"rock\" | \"paper\" | \"scissors\"' >rockPaperScissors</data-lsp>></span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;</span></div><div class='line'><span style=\"color: #24292F\">]</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type ComplexObject = {&#10;    a: [12, \"foo\"];&#10;    bar: \"hello\";&#10;    prev(): number;&#10;}' >ComplexObject</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) a: [12, \"foo\"]' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">12</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) bar: \"hello\"' >bar</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"hello\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #8250DF\"><data-lsp lsp='(method) prev(): number' >prev</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZABKkPgC0BwA8vH0AGJFHJAAbjADYIyQiPiIqTRwHLeg8cpzxADCcHMc4qD+MTCXCgUAAWUU+BmADpoIpuHBhv5RAAGaEAVnCACIZpBFDwsZEsfhFHMGljcI9ntN4DQANYABUUpGgAGUaAtEAheBIDIpoABzVCuAA+6FAYow5iBoAA3iDQNANls-vyBeIxBJnArQU4DFjaXTCYpeFTbqYdZE1RqJGhLXqscRmTBjaanubLah9YgOYguUhXaAzfgLQBfVJLMg0E03f4AbQVbUQc1G4xcCqotAYuSqACM4HBxvCtOtNts9vRAaJ84W8RxhA2NImwMnU2Q7aDM5A6PQc6pnJgS8ry-sqy5MA3hE3O9RuwxLX36N825QdrmAFZzodl3aj6WiZdjVhrzd0BsKqcZ2c9heVVSW0EM+DDBaQeg1ov16egn+llUVscn0RV93wLT9zx-UBgVBS8ZyzXs70rfdQCxeICyxbd-z3AIx1Q9DJ2-Lsb0gxccTxAkJRQkkyUQDDQD-Ed6EjOB4led4vh+etoKgwjr3nEjEIfFDDUJMVHWdaBRJQn1OW5DChIY3cmJkFjFTgekmRZdlZKQbiYIvXAAF0IxkUBD3GVcNznf55VBRRUDjActDwuAsWM0Fc35VAyOUZRXIVYglVOMxUA4ARhlzC5QyAA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h3 id=\"splits-sep\" style=\"position:relative;\"><a href=\"#splits-sep\" aria-label=\"splits sep permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Split&#x3C;S, SEP></code></h3>\n<p>Implement a type that splits a string literal type <code>S</code> by a delimiter <code>SEP</code>, emitting\na tuple type containing the string literal types for all of the “tokens”</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) S in type Split&lt;S extends string, SEP extends string>' >S</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) SEP in type Split&lt;S extends string, SEP extends string>' >SEP</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false, false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"Hi! How are you?\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"z\"</span><span style=\"color: #24292F\">&gt;,</span></div><div class='line'><span style=\"color: #24292F\">      [</span><span style=\"color: #0A3069\">\"Hi! How are you?\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"Hi! How are you?\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\" \"</span><span style=\"color: #24292F\">&gt;,</span></div><div class='line'><span style=\"color: #24292F\">      [</span><span style=\"color: #0A3069\">\"Hi!\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"How\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"are\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"you?\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"Hi! How are you?\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">&gt;,</span></div><div class='line'><span style=\"color: #24292F\">      [</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"H\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"i\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"!\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\" \"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"H\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"o\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"w\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\" \"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"r\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"e\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\" \"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"y\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"o\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"u\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">        </span><span style=\"color: #0A3069\">\"?\"</span></div><div class='line'><span style=\"color: #24292F\">      ]</span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">&gt;, []&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"z\"</span><span style=\"color: #24292F\">&gt;, [</span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">]&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Split&lt;S extends string, SEP extends string> = any' >Split</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"whatever\"</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[]&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZADKY3MMq0E2PKCI-HMcAOZaq+QACjsh+4cnRYochANgjJAHiKlLZDSKybwSADauFAFGokDo9BBoIqeShMJh62Um3oACIABJzACEoHRcAA7qBFNAyIQ4AIHKitKiAF6o4QaaEIwEY7G4glEkmgMkU1EAXSZoGE0IZ0KotAYgtyVUFoKRKNZOLxhOJpPJlOpoHpjIRoJZmKxVK1yqNqNVpp5lIFCOFoNFoPFEMlCOlqlloHlDEV7JVXMtpu17uBuphGKp7tBqLm4ZDkcNOtjqK1CZDYZTutRcBjifx2dTyYjWsUeYz0BLCNRkHLoYLsa1hGrkaz6YrAkbWsp7utMNtQoTjshrvonrRAYZoEBfOE9rBEvoQ5HqNNdPHLP50-74MHlVUI4O0COpy1+JminYADcYNrbgeTpPp7g+UA'>Try</a></div></pre>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h3 id=\"istuplet\" style=\"position:relative;\"><a href=\"#istuplet\" aria-label=\"istuplet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>IsTuple&#x3C;T></code></h3>\n<p>Implement a type <code>IsTuple</code>, which takes an input type <code>T</code> and returns whether\n<code>T</code> is tuple type.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type IsTuple&lt;T>' >T</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292F\">&lt;[]&gt;, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">]&gt;, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #CF222E\">readonly</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">]&gt;, </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292F\">&lt;{ </span><span style=\"color: #953800\"><data-lsp lsp='(property) length: 1' >length</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\"> }&gt;, </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IsTuple&lt;T> = any' >IsTuple</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">[]&gt;, </span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZIOIjAJjkMbioIochANgjJCI+IgroDSKybwSANq4oBTUkHT0uVVrG1v09wC6wi0zWEQKeL1oDE+qm+m3Gfw4AmGACMYIDgSVQRpwVRIR9KjD1nDttBIIouHAOMpCKB7s50cUhFica93tD6LDfgBvUDjDgAc3wM1QrgAvkDQPVksznri3lCCRyib9ESiYACJVKRMJcP8gA'>Try</a></div></pre>\n<details>\n<summary>Click for hints</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TypeExtends&lt;A, B> = A extends B ? true : false' >TypeExtends</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type TypeExtends&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) B in type TypeExtends&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) A in type TypeExtends&lt;A, B>' >A</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">extends</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) B in type TypeExtends&lt;A, B>' >B</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">?</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">false</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let t0: false' >t0</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TypeExtends&lt;A, B> = A extends B ? true : false' >TypeExtends</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let t1: true' >t1</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TypeExtends&lt;A, B> = A extends B ? true : false' >TypeExtends</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">&gt;</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAKuEFEAewIDsAmBnAPAQQBooAhAPigF4o8oIV1sSoB+KYAJwFdoAuKAMwCGAGywQAUMIjA2ABj5xIyVJlxpOAWwBGEdkQBspSdLYBGBfGUNc+ouu27SQA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h2 id=\"round-3\" style=\"position:relative;\"><a href=\"#round-3\" aria-label=\"round 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Round 3</h2>\n<h3 id=\"tupletonestedobjectp-v\" style=\"position:relative;\"><a href=\"#tupletonestedobjectp-v\" aria-label=\"tupletonestedobjectp v permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>TupleToNestedObject&#x3C;P, V></code></h3>\n<p>Given a tuple type <code>T</code> that only contains string type, and a type <code>U</code>,\nbuild an object recursively.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) P in type TupleToNestedObject&lt;P, V>' >P</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) V in type TupleToNestedObject&lt;P, V>' >V</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false, false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\">], </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">&gt;, { </span><span style=\"color: #953800\"><data-lsp lsp='(property) a: string' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> }&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"b\"</span><span style=\"color: #24292F\">], </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">&gt;,</span></div><div class='line'><span style=\"color: #24292F\">      { </span><span style=\"color: #953800\"><data-lsp lsp='(property) a: {&#10;    b: number;&#10;}' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) b: number' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> } }</span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #953800\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"b\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"c\"</span><span style=\"color: #24292F\">], </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;,</span></div><div class='line'><span style=\"color: #24292F\">      { </span><span style=\"color: #953800\"><data-lsp lsp='(property) a: {&#10;    b: {&#10;        c: boolean;&#10;    };&#10;}' >a</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) b: {&#10;    c: boolean;&#10;}' >b</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) c: boolean' >c</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\"> } } }</span></div><div class='line'><span style=\"color: #24292F\">    &gt;</span></div><div class='line'><span style=\"color: #24292F\">  &gt;,</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type TupleToNestedObject&lt;P, V> = any' >TupleToNestedObject</data-lsp></span><span style=\"color: #24292F\">&lt;[], </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZIwCY5CMcBmQiOxcAPIARgBWkHT0AApaAGpFihyEA2CMu-iIqUtkNIrJvBIAbVwoAo1HODGBIIqeSY63GWx2e0gh1O4PoAIARIoMQBdLR7aBzDgAc2EWgA3qBFKgCUTiaAAL7CSFkyFUWgQqHQqqQrlrDYIt7I45nC6Y7FaDFHXFaDgCYZHGCsrkgynU0CUo6oOUKmCMxm80DMkHK0Ec+iG3I8lWSOGbbZClGihjijGS6WSmgy0BHOBwcYPU1ctWoTWh0A0VC+-2QB76hkGrnGo0aNlgi5W1T8+EOpFOtEAvE+v0Bjhk4sxwPMnFAA'>Try</a></div></pre>\n<details>\n<summary>Click for hints</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Pets = \"dog\"' >Pets</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"dog\"</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PetsObj = {&#10;    dog: Promise&lt;number>;&#10;}' >PetsObj</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  [</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) K' >K</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">in</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Pets = \"dog\"' >Pets</data-lsp></span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Promise&lt;T>' >Promise</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\">&gt;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let x: PetsObj' >x</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type PetsObj = {&#10;    dog: Promise&lt;number>;&#10;}' style='border-bottom: solid 2px lightgrey;'>PetsObj</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type PetsObj = {\n    dog: Promise&lt;number&gt;;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAChwGcoF4oCIAmB7A5mgUKJLPAgPIBGAVilAN75RQDaA0lAJYB2JiAugC5YAJywBbDgggAeLgFcxFCMIB8+AL74ANvCgAPIXESUq+APRmmVgHoB+IA'>Try</a></div></pre>\n</details>\n<div class=\"custom-block vspace\"><div class=\"custom-block-body\"></div></div>\n<h3 id=\"indexoft-u\" style=\"position:relative;\"><a href=\"#indexoft-u\" aria-label=\"indexoft u permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>IndexOf&#x3C;T, U></code></h3>\n<p>Implement the type version of <code>Array.indexOf</code>, <code>IndexOf&#x3C;T, U></code>\ntakes an Array <code>T</code>, any <code>U</code> and returns the index of the first <code>U</code> in Array <code>T</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// Implement this type</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) T in type IndexOf&lt;T, U>' >T</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='(type parameter) U in type IndexOf&lt;T, U>' >U</data-lsp></span><span style=\"color: #24292F\">&gt; </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// Tests</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type cases = [false, false, false]' >cases</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">], </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">8</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">9</span><span style=\"color: #24292F\">], </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">&gt;, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">&gt;&gt;,</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='type Expect&lt;T extends true> = T' >Expect</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type Equal&lt;X, Y> = (&lt;T>() => T extends X ? 1 : 2) extends &lt;T>() => T extends Y ? 1 : 2 ? true : false' >Equal</data-lsp></span><span style=\"color: #24292F\">&lt;</span><span style=\"color: #953800\"><data-lsp lsp='type IndexOf&lt;T, U> = any' >IndexOf</data-lsp></span><span style=\"color: #24292F\">&lt;[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">], </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">&gt;, -</span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">&gt;&gt;</span></div><span class=\"error\"><span>Type 'false' does not satisfy the constraint 'true'.</span><span class=\"code\">2344</span></span><span class=\"error-behind\">Type 'false' does not satisfy the constraint 'true'.</span><div class='line'><span style=\"color: #24292F\">]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsWBQAXATwAdJQBRAD1IGN8AeAFVEkv0gDsATRUfaAK6QAfKAC8oRgRJlyARwEBDADb0AGgBpQATVFjcACibCDASnGjmrdt15rQAflABGUKjTnrnHoeNmLkixs3rzaji5u6OZO-EKRAGYqiJC40qSgAHJw+PJKqpo6enyCZF62FAoq6lq64YnKyZGxKbggoAC0nTQC+J3tqW0AkgC2xMqQw5z4fAAWAJa8RKRpZIPcrADy8UxaAKpFihyEA2CMkIj4iKlLZDSKybwSANq4oBTUkHT0uVVrXJvbJ7OLRoLQYAC6IOEWmcwmhr3etAYP1UfwB9CeoNAADYwVoABxaLAwrQAdjxoAAnJDQBhoeg4RoEVQkd9Kqj1pQthiAAxaPmgHk0tD09qw4S4cFAA'>Try</a></div></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#round-1\">Round 1</a></p>\n<ul>\n<li><a href=\"#ifc-t-f\"><code>If&#x3C;C, T, F></code></a></li>\n<li><a href=\"#lengthoftuplet\"><code>LengthOfTuple&#x3C;T></code></a></li>\n<li><a href=\"#endswitha-b\"><code>EndsWith&#x3C;A, B></code></a></li>\n<li><a href=\"#concata-b\"><code>Concat&#x3C;A, B></code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#round-2\">Round 2</a></p>\n<ul>\n<li><a href=\"#returnoff\"><code>ReturnOf&#x3C;F></code></a></li>\n<li><a href=\"#splits-sep\"><code>Split&#x3C;S, SEP></code></a></li>\n<li><a href=\"#istuplet\"><code>IsTuple&#x3C;T></code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#round-3\">Round 3</a></p>\n<ul>\n<li><a href=\"#tupletonestedobjectp-v\"><code>TupleToNestedObject&#x3C;P, V></code></a></li>\n<li><a href=\"#indexoft-u\"><code>IndexOf&#x3C;T, U></code></a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/making-typescript-stick/08-type-challenges/"},"frontmatter":{"title":"Challenge 3: Type Challenges","course":"making-typescript-stick","date":"March 22, 2022","description":"We'll explore solving problems using only TypeScript's types\n"}}},"pageContext":{"slug":"/course/making-typescript-stick/08-type-challenges/","title":"Challenge 3: Type Challenges","course":"making-typescript-stick","order":8,"previous":{"fields":{"slug":"/course/making-typescript-stick/07-typepardy/"},"frontmatter":{"title":"Game 2: Typepardy","order":7,"course":"making-typescript-stick","isExercise":null}},"next":{"fields":{"slug":"/course/making-typescript-stick/09-guess-that-type/"},"frontmatter":{"title":"Game 3: Guess That Type","order":9,"course":"making-typescript-stick","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}