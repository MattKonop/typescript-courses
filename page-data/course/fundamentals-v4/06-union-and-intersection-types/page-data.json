{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/06-union-and-intersection-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript v1","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript v2","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"}]}},"markdownRemark":{"id":"00e510f2-7dcf-52cf-802c-5216438a712b","excerpt":"Union and Intersection Types, Conceptually Union and intersection types can conceptually be thought of as logical boolean operators\n(AND, OR) as they pertain to…","html":"<h2 id=\"union-and-intersection-types-conceptually\" style=\"position:relative;\"><a href=\"#union-and-intersection-types-conceptually\" aria-label=\"union and intersection types conceptually permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union and Intersection Types, Conceptually</h2>\n<p>Union and intersection types can conceptually be thought of as logical boolean operators\n(<code>AND</code>, <code>OR</code>) as they pertain to types. Here are a couple of example sets we’ll use for this discussion</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">Evens </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">8</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">Odds </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">9</span><span style=\"color: #24292F\"> }</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">Squares </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">9</span><span style=\"color: #24292F\"> }</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">OneThroughNine </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">                   </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">8</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">9</span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #24292F\">OneThroughFive </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<h3 id=\"union-types-\" style=\"position:relative;\"><a href=\"#union-types-\" aria-label=\"union types  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union types <code>|</code></h3>\n<p>A union type can be thought of as <strong><code>OR</code>, for types</strong>, and TypeScript uses the pipe (<code>|</code>)\nsymbol to represent the <strong>Union type operator</strong></p>\n<p>Using the example above, if we wanted to find <code>OneThroughFive | Odds</code> we’d combine all the members\nof the <code>OneThroughFive</code> set and all of the members of the <code>Odds</code> set.</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">OneThroughFive </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> Odds </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">7</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">9</span><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<p>If you think about the assumptions we could make about a member of this set at random, we couldn’t\nbe sure whether it’s between 1 and 5, and we couldn’t be sure whether it’s odd.</p>\n<h3 id=\"intersection-types-\" style=\"position:relative;\"><a href=\"#intersection-types-\" aria-label=\"intersection types  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersection types <code>&#x26;</code></h3>\n<p>An intersection type can be thought of as <strong><code>AND</code>, for types</strong>, and TypeScript uses the ampersand (<code>&#x26;</code>)\nsymbol to represent the <strong>Intersection type operator</strong></p>\n<p>Using the example again, if we wanted to find <code>OneThroughFive &#x26; Odds</code> we’d find all members that the\n<code>OneThroughFive</code> and <code>Odds</code> sets have in common</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">OneThroughFive </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> Odds </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> { </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\"> }</span></div></code></div></pre>\n<h2 id=\"union-types-in-typescript\" style=\"position:relative;\"><a href=\"#union-types-in-typescript\" aria-label=\"union types in typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Types in TypeScript</h2>\n<p>Let’s think back to the concept of literal types from an earlier example</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const humidity: 79' style='border-bottom: solid 2px lightgrey;'>humidity</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">79</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>const humidity: 79</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgVwLYEsAmKoE8YF4YDsAnAFAD0ZMVVAegPxA'>Try</a></div></pre>\n<p>If we wanted to create a union type that represented the set <code>{ 1, 2, 3, 4, 5 }</code> we could do it using\nthe <code>|</code> operator. We can also use the <code>type</code> keyword to give this type a name (we’ll talk more about\nthis in the next chapter)</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneThroughFive = 1 | 2 | 3 | 4 | 5' style='border-bottom: solid 2px lightgrey;'>OneThroughFive</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">1</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">5</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>type OneThroughFive = 1 | 2 | 3 | 4 | 5</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let upToFive: OneThroughFive' style='border-bottom: solid 2px lightgrey;'>upToFive</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneThroughFive = 1 | 2 | 3 | 4 | 5' >OneThroughFive</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">3</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let upToFive: OneThroughFive</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let upToFive: OneThroughFive' >upToFive</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">8</span></div><span class=\"error\"><span>Type '8' is not assignable to type 'OneThroughFive'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '8' is not assignable to type 'OneThroughFive'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAHkA7SAFQAt4BXAc1oDEBLAN1IF5QBGUAB90w0BjEAWMQFYcIUIoB6AfhwAbSHlAMi1OB26pKNenGZsuvcfLDK1u-YesAOIA'>Try</a></div></pre>\n<p>and we could create another type called <code>Evens</code> to represent the set <code>{ 2, 4, 6, 8 }</code></p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Evens = 2 | 4 | 6 | 8' style='border-bottom: solid 2px lightgrey;'>Evens</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">6</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">8</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Evens = 2 | 4 | 6 | 8</span></div><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let evensOnly: Evens' style='border-bottom: solid 2px lightgrey;'>evensOnly</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Evens = 2 | 4 | 6 | 8' >Evens</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>let evensOnly: Evens</span></div><div class='line'><span style=\"color: #24292F\"><data-err><data-lsp lsp='let evensOnly: Evens' >evensOnly</data-lsp></data-err> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">5</span><span style=\"color: #24292F\">;</span></div><span class=\"error\"><span>Type '5' is not assignable to type 'Evens'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '5' is not assignable to type 'Evens'.</span></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAFEA3SAO0VAF51QAfUAFhdADZOAOHEKCGgAegH4cAG0h5QkKrQDy1SQVSUadRmgDcAsMPE55m5aoagArDqA'>Try</a></div></pre>\n<p>Explicitly creating the union type is now simple</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">let</span><span style=\"color: #24292F\"> <data-lsp lsp='let evensThroughFive: 1 | 2 | 3 | 4 | 5 | 6 | 8' >evensThroughFive</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type Evens = 2 | 4 | 6 | 8' >Evens</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type OneThroughFive = 1 | 2 | 3 | 4 | 5' >OneThroughFive</data-lsp></span><span style=\"color: #24292F\">;</span></div><div class='meta-line'><span class='popover-prefix'></span><span class='popover'><div class='arrow'></div>let evensThroughFive: 2 | 4 | 6 | 8 | 1 | 3 | 5</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8gdhAKgCwE4HsCuBzZAxASwDdoBeKARigB8oAmGqAZkYBZGBWAKFEigFEScAM5RyDWu1oA2RgA4uAemVQAtOoDGmYOtVcANhGBQIQ4Sgw58xCAC4BZxvCRosuQiQDcSxVD9QAPQB+IA'>Try</a></div></pre>\n<p>Union types often appear where control flow can produce a different value for different code paths.</p>\n<p>For example, the <code>flipCoin()</code> function will return <code>\"heads\"</code> if a number selected\nfrom <code>(0, 1)</code> is >= 0.5, or <code>\"tails\"</code> if &#x3C;=0.5.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function flipCoin(): \"heads\" | \"tails\"' >flipCoin</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"heads\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"tails\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"heads\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"tails\"</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const outcome: \"heads\" | \"tails\"' style='border-bottom: solid 2px lightgrey;'>outcome</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function flipCoin(): \"heads\" | \"tails\"' >flipCoin</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const outcome: \"heads\" | \"tails\"</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMANjADgYTjMAKASgC5EAiACwFMBDAEwGdTEAfMqamFRxAbwChEiGMER4AstSjkAdACdqYWnAC2hRAD5EABmkBWAolmUoIWUgo0GpAYeOnz7Toz4BfPnwgJ6URHBBRPZUpEAF5kNCwcfAI+AHpYwUSAPQB+IA'>Try</a></div></pre>\n<p>Let’s make this a bit more interesting by using tuples, that is structured as follows:</p>\n<ul>\n<li><code>[0]</code> either <code>\"success\"</code> or <code>\"failure\"</code></li>\n<li>\n<p><code>[1]</code> something different, depending on the value found in <code>[0]</code></p>\n<ul>\n<li><code>\"success\"</code> case: a piece of contact information: <code>{ name: string; email: string; }</code></li>\n<li><code>\"error\"</code> case: an <code>Error</code> instance</li>\n</ul>\n</li>\n</ul>\n<p>We’ll still decide which of these things actually happens based on our 50/50 coin flip from above</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function flipCoin(): \"heads\" | \"tails\"' >flipCoin</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"heads\"</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"tails\"</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #0550AE\"><data-lsp lsp='var Math: Math' >Math</data-lsp></span><span style=\"color: #24292F\">.</span><span style=\"color: #0550AE\"><data-lsp lsp='(method) Math.random(): number' >random</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">0.5</span><span style=\"color: #24292F\">) </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"heads\"</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"tails\"</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function maybeGetUserInfo(): [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"error\"</span><span style=\"color: #24292F\">, </span><span style=\"color: #953800\"><data-lsp lsp='interface Error' >Error</data-lsp></span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #24292F\">  | [\"</span><span style=\"color: #8250DF\">success</span><span style=\"color: #24292F\">\", { </span><span style=\"color: #953800\"><data-lsp lsp='(property) name: string' >name</data-lsp></span><span style=\"color: #24292F\">: string; </span><span style=\"color: #953800\"><data-lsp lsp='(property) email: string' >email</data-lsp></span><span style=\"color: #24292F\">: string }] {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (</span><span style=\"color: #8250DF\"><data-lsp lsp='function flipCoin(): \"heads\" | \"tails\"' >flipCoin</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"heads\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"success\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      { <data-lsp lsp='(property) name: string' >name</data-lsp>: </span><span style=\"color: #0A3069\">\"Mike North\"</span><span style=\"color: #24292F\">, <data-lsp lsp='(property) email: string' >email</data-lsp>: </span><span style=\"color: #0A3069\">\"mike@example.com\"</span><span style=\"color: #24292F\"> },</span></div><div class='line'><span style=\"color: #24292F\">    ]</span></div><div class='line'><span style=\"color: #24292F\">  } </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">    </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> [</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #0A3069\">\"error\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">      </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"The coin landed on TAILS :(\"</span><span style=\"color: #24292F\">),</span></div><div class='line'><span style=\"color: #24292F\">    ]</span></div><div class='line'><span style=\"color: #24292F\">  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' style='border-bottom: solid 2px lightgrey;'>outcome</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function maybeGetUserInfo(): [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const outcome: [\"error\", Error] | [\"success\", {\n    name: string;\n    email: string;\n}]</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABMANjADgYTjMAKASgC5EAiACwFMBDAEwGdTEAfMqamFRxAbwChEiGMER4AstSjkAdACdqYWnAC2hRAD5EABmkBWAolmUoIWUgo0GpAYeOnz7Toz4BfPn1CRYCRMuoBPACNKAHFjAFV6SlkASTBgOEIiG1YAbVJo2ThZUgAaRABRWSzZAF0UxHT6EAgISnpGfJ5EMGplShJ6KFlcAHMAbkRKP05O7r7EF1LeG2FRVAxsXDUAXjWyKjpGA35BQSMTM0qbPbJq2vrGk73m1vaSUjEYAGtKRAA5bKk8oZGUB+UL0oAAFKAAPNroFCUaQQFRMFy5a7lQQuIZcN67PYHezHU6CDLFbJ5a6CMCUADuhSJsjwpAAKlREHDcIgUApaJRaIgfPSAIIxAAyAGVEEQ6QQkacUZNXO44WAujyQFA4e1ECtfAFgmEoJFonEEoQ+AB6E34gB6AH4gA'>Try</a></div></pre>\n<p>this type is significantly more interesting.</p>\n<h3 id=\"working-with-union-types\" style=\"position:relative;\"><a href=\"#working-with-union-types\" aria-label=\"working with union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with union types</h3>\n<p>Let’s continue with our example from above and attempt to do something with the\n“outcome” value.</p>\n<p>First, let’s destructure the tuple and see what TypeScript has to say about its members</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function maybeGetUserInfo(): [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\"><data-lsp lsp='const first: \"error\" | \"success\"' >first</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const second: Error | {&#10;    name: string;&#10;    email: string;&#10;}' >second</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const first: \"error\" | \"success\"' style='border-bottom: solid 2px lightgrey;'>first</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'> </span><span class='popover'><div class='arrow'></div>const first: \"error\" | \"success\"</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const second: Error | {&#10;    name: string;&#10;    email: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>second</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>  </span><span class='popover'><div class='arrow'></div>const second: Error | {\n    name: string;\n    email: string;\n}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWwIYE8BGBTA4tqAVQGdsAnASTGDgAoBKALgChFEAfRAbQCJyy4ZHgBpEAUTICyAXVYduPYiAgRsxYiMQBvRGFTJsjRMShkYYAOYBuRNjQwANkZNnLiAL7TtcmMES0AWVQoAAsAOjJUMAATOGQGRAA+RAAGMIBWem82NjICEDIkLjkcxEVlVXUREpydPQMjHgCYAGtsRAA5QVDNO1RHRuRW7AABbAAPfQAHB2wwiDieD2Ea2TZ3WwdSbJy8qAKimrY+SUFq0rYwbAB3cVOyWh4AFRD2hfNEByjo7GjEBEQTwAghQADIAZUQjEe9BWpTWHmY7mYAHo0YgALRYiAgKBYjHMBZgEz-XELAyIAC8KAwOHwRFIlGodHozEJCBJXGAMDIJlEpCJ0S81LgZLi2GY3N5UFRKMQAD0APzMAUIaKyhWKoA'>Try</a></div></pre>\n<div class=\"custom-block info\"><div class=\"custom-block-heading\"><img class=\"emoji-icon\" alt=\"emoji-bulb\" data-icon=\"emoji-bulb\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, 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\" title=\"emoji-bulb\"> A good time to poke around</div><div class=\"custom-block-body\"><p>Click the <code>Try</code> button and explore <code>first</code> and <code>second</code> in the TS playground.\nExplore what’s available in the autocomplete for each.</p></div></div>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function maybeGetUserInfo(): [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\"><data-lsp lsp='const first: \"error\" | \"success\"' >first</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const second: Error | {&#10;    name: string;&#10;    email: string;&#10;}' >second</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const first: \"error\" | \"success\"' >first</data-lsp>.<data-lsp lsp='(method) String.split(separator: string | RegExp, limit?: number | undefined): string[] (+1 overload)' >split</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>s</span>earch</span></li><li class=''><span><span class='result-found'>s</span>lice</span></li><li class='deprecated'><span><span class='result-found'>s</span>mall</span></li><li class=''><span><span class='result-found'>s</span>plit</span></li><li class=''><span><span class='result-found'>s</span>tartsWith</span></li><li class='deprecated'><span><span class='result-found'>s</span>trike</span></li><li class='deprecated'><span><span class='result-found'>s</span>ub</span></li><li class='deprecated'><span><span class='result-found'>s</span>ubstr</span></li><li class=''><span><span class='result-found'>s</span>ubstring</span></li><li class='deprecated'><span><span class='result-found'>s</span>up</span></li></ul></span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const second: Error | {&#10;    name: string;&#10;    email: string;&#10;}' >second</data-lsp>.<data-lsp lsp='(property) name: string' >name</data-lsp></span></div><div class='meta-line'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='inline-completions'><ul class='dropdown'><li class=''><span><span class='result-found'>n</span>ame</span></li></ul></span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWwIYE8BGBTA4tqAVQGdsAnASTGDgAoBKALgChFEAfRAbQCJyy4ZHgBpEAUTICyAXVYduPYiAgRsxYiMQBvRGFTJsjRMShkYYAOYBuRNjQwANkZNnLiAL7TtcmMES0AWVQoAAsAOjJUMAATOGQGRAA+RAAGMIBWem82NjICEDIkLjkcxEVlVXUREpydPQMjHgCYAGtsRAA5QVDNO1RHRuRW7AABbAAPfQAHB2wwiDieD2Ea2TZ3WwdSbJy8qAKimrY+SUFq0rYwbAB3cVOyWh4AFRD2hfNEByjo7GjEBEQTwAghQADIAZUQjEe9BWpTWHmY7mYAHo0YgALRYiAgKBYjHMBZgEz-XELAyIAC8KAwOHwRFIlGodHohIQJK4wBgZBMolIROiXmpcDJcWwzC5PKgYWIMxgUFRKIuAD12Mx+QhomF6uL0Sr2EA'>Try</a></div></pre>\n<p>We can see that the autocomplete information for the first value suggests that it’s\na string. This is because, regardles of whether this happens to be the specific <code>\"success\"</code>\nor <code>\"error\"</code> string, it’s definitely going to be a string.</p>\n<p>The second value is a bit more complicated — only the <code>name</code> property is available to us.\nThis is because, both our “user info object, and instances of the <code>Error</code> class have a <code>name</code>\nproperty whose value is a string.</p>\n<blockquote>\n<p>What we are seeing here is, when a value has a type that includes a union, we are only able\nto use the “common behavior” that’s guaranteed to be there.</p>\n</blockquote>\n<h3 id=\"narrowing-with-type-guards\" style=\"position:relative;\"><a href=\"#narrowing-with-type-guards\" aria-label=\"narrowing with type guards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Narrowing with type guards</h3>\n<p>Ultimately, we need to “separate” the two potential possibilities for our value, or\nwe won’t be able to get very far. We can do this with <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">type guards</a>.</p>\n<blockquote>\n<p>Type guards are expressions, which when used with control flow statement, allow us to\nhave a more specific type for a particular value.</p>\n</blockquote>\n<p>I like to think of these as “glue” between the compile time type-checking and runtime\nexecution of your code. We will work with one that you should already be familiar with\nto start: <code>instanceof</code>.</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function maybeGetUserInfo(): [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0550AE\"><data-lsp lsp='const first: \"error\" | \"success\"' >first</data-lsp></span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\"><data-lsp lsp='const second: Error | {&#10;    name: string;&#10;    email: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>second</data-lsp></span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> <data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>                </span><span class='popover'><div class='arrow'></div>const second: Error | {\n    name: string;\n    email: string;\n}</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='const second: Error | {&#10;    name: string;&#10;    email: string;&#10;}' >second</data-lsp> </span><span style=\"color: #CF222E\">instanceof</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='var Error: ErrorConstructor' >Error</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// In this branch of your code, second is an Error</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='const second: Error' style='border-bottom: solid 2px lightgrey;'>second</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const second: Error</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// In this branch of your code, second is the user info</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='const second: {&#10;    name: string;&#10;    email: string;&#10;}' style='border-bottom: solid 2px lightgrey;'>second</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const second: {\n    name: string;\n    email: string;\n}</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWwIYE8BGBTA4tqAVQGdsAnASTGDgAoBKALgChFEAfRAbQCJyy4ZHgBpEAUTICyAXVYduPYiAgRsxYiMQBvRGFTJsjRMShkYYAOYBuRNjQwANkZNnLiAL7TtcmMES0AWVQoAAsAOjJUMAATOGQGRAA+RAAGMIBWem82NjICEDIkLjkcxEVlVXUREpydPQMjHgCYAGtsRAA5QVDNO1RHRuRW7AABbAAPfQAHB2wwiDieD2Ea2TZ3WwdSbJy8qAKimrY+SUFq0rYwbAB3cVOyWh4AFRD2hfNEByjo7GjEBEQTwAghQADIAZUQjEe9BWpTWHmY7mYAHo0YgALRYiAgKBYjHMBZgEz-XELAyIAC8KAwOHwRFIlGodHohIQJK4wBgZBMolIROiXmpcDJcWwqJRFyliAAegB+Zi+fz8hB-cwmKKqOB+CRSLJaOToqiIUIwYiITCRSAhf5+dAisiIBY-PnYAWIM2IKJ3KRyFUxQ2S+VIzbbA1sI1IU3my2am3axD2gpOuAu4xu1Ue82hdogRke5l+jMBiNBhXuIA'>Try</a></div></pre>\n<p>TypeScript has a special understanding of <em>what it means</em> when our <code>instanceof</code>\ncheck returns <code>true</code> or <code>false</code>, and creates a branch of code that handles each\npossibility.</p>\n<p>It gets even better…</p>\n<h3 id=\"discriminated-unions\" style=\"position:relative;\"><a href=\"#discriminated-unions\" aria-label=\"discriminated unions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discriminated Unions</h3>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function maybeGetUserInfo(): [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >maybeGetUserInfo</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #CF222E\">if</span><span style=\"color: #24292F\"> (<data-lsp lsp='const outcome: [\"error\", Error] | [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' >outcome</data-lsp>[</span><span style=\"color: #0550AE\">0</span><span style=\"color: #24292F\">] </span><span style=\"color: #CF222E\">===</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"error\"</span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// In this branch of your code, second is an Error</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='const outcome: [\"error\", Error]' style='border-bottom: solid 2px lightgrey;'>outcome</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const outcome: [\"error\", Error]</span></div><div class='line'><span style=\"color: #24292F\">} </span><span style=\"color: #CF222E\">else</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// In this branch of your code, second is the user info</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='const outcome: [\"success\", {&#10;    name: string;&#10;    email: string;&#10;}]' style='border-bottom: solid 2px lightgrey;'>outcome</data-lsp></span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>const outcome: [\"success\", {\n    name: string;\n    email: string;\n}]</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/GYVwdgxgLglg9mABAWwIYE8BGBTA4tqAVQGdsAnASTGDgAoBKALgChFEAfRAbQCJyy4ZHgBpEAUTICyAXVYduPYiAgRsxYiMQBvRGFTJsjRMShkYYAOYBuRNjQwANkZNnLiAL7TtcmMES0AWVQoAAsAOjJUMAATOGQGRAA+RAAGMIBWem82NjICEDIkLjkcxEVlVXUREpydPQMjHgCYAGtsRAA5QVDNO1RHRuRW7AABbAAPfQAHB2wwiDieD2Ea2TZ3WwdSbJy8qAKimrY+SUFq0rYwbAB3cVOyWh4AFRD2hfNEByjo7GjEBEQTwAghQADIAZUQjEe9BWpTWHmY7mYAHo0YgALRYiAgKBYjHMBZgEz-XELAyIAC8KAwOHwRFIlGodHozF8-jgZLi2C4KS8lIFZX4ZyyWjk6KoiFCMGIiEwkUgIX+fnQnLIiAWP1EpCJfxliCidykck5UHJ2HFKMQAD0APxIzbbMVsCVIaWy+VRCBKuAqtUauBa4zYXWIfWhdogRlh5kmrkGS02+3uIA'>Try</a></div></pre>\n<p>TypeScript understands that the first and second positions of our tuple are linked.\nWhat we are seeing here is sometimes referred to as a <a href=\"https://en.wikipedia.org/wiki/Tagged_union\">discriminated or “tagged” union type</a>.</p>\n<h2 id=\"intersection-types-in-typescript\" style=\"position:relative;\"><a href=\"#intersection-types-in-typescript\" aria-label=\"intersection types in typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersection Types in TypeScript</h2>\n<p>Intersection types in TypeScript can be described using the <code>&#x26;</code> (ampersand) operator.</p>\n<p>For example, what if we had a <code>Promise</code>, that had extra <code>startTime</code> and <code>endTime</code>\nproperties added to it?</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function makeWeek(): Date &amp; {&#10;    end: Date;&#10;}' >makeWeek</data-lsp></span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">&</span><span style=\"color: #24292F\"> { </span><span style=\"color: #953800\"><data-lsp lsp='(property) end: Date' >end</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style=\"color: #24292F\"> } {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">//⬅ return type</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const start: Date' >start</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new () => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const end: Date' >end</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='var Date: DateConstructor&#10;new (value: string | number | Date) => Date (+4 overloads)' >Date</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const start: Date' >start</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Date.valueOf(): number' >valueOf</data-lsp></span><span style=\"color: #24292F\">() </span><span style=\"color: #CF222E\">+</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const ONE_WEEK: number' >ONE_WEEK</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> { </span><span style=\"color: #CF222E\">...</span><span style=\"color: #24292F\"><data-lsp lsp='const start: Date' >start</data-lsp>, <data-lsp lsp='(property) end: Date' >end</data-lsp> } </span><span style=\"color: #6E7781\">// kind of Object.assign</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const thisWeek: Date &amp; {&#10;    end: Date;&#10;}' >thisWeek</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function makeWeek(): Date &amp; {&#10;    end: Date;&#10;}' >makeWeek</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const thisWeek: Date &amp; {&#10;    end: Date;&#10;}' style='border-bottom: solid 2px lightgrey;'>thisWeek</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Date.toISOString(): string' >toISOString</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>   </span><span class='popover'><div class='arrow'></div>const thisWeek: Date & {\n    end: Date;\n}</span></div><div class='line'><span style=\"color: #24292F\"><data-lsp lsp='const thisWeek: Date &amp; {&#10;    end: Date;&#10;}' >thisWeek</data-lsp>.<data-lsp lsp='(property) end: Date' style='border-bottom: solid 2px lightgrey;'>end</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Date.toISOString(): string' >toISOString</data-lsp></span><span style=\"color: #24292F\">()</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>(property) end: Date</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBA8gOQKIH0DqSkGkYF4YCMADCTAFQwBsR5VNFATACy0DsMA9B4QO4wCWYGAFsIAKC7cAtDOABXKDKliAZnLDAo-cCICGAawCmaQ4f0AKAJQAuGABFdUQzABkMAN4xDYACa2HTjAAvh5iMJwcgKDUMABOhlByMUJQAJ4ADoZiYTCgkLDQujGw+GCGfAGGVtm50F6+eDCl5Y6VBUUAdABuugA2coZwKlYwANTwyOiYWJZZ4XEJSR4w7SttUAA0dT7BETD6gtsgKvAARgBWhprtuhAQ-ADmYGJBWTWwUAAW-BAmZg3CBmMpgsM0+31++naUBAAEkAMpwOFQGKCe5VLjhGAAPQA-GIwT9ge1vD4obCEUiUWA0TMMZj6bigA'>Try</a></div></pre>\n<p>This is quite different than what we saw with union types — this is quite literally\na <code>Date</code> and <code>{ end: Date}</code> mashed together, and we have access to everything immediately.</p>\n<p>It is <em>far</em> less common to use intersection types compared to union types. I expect\nit to be at least a 50-to-1 ratio for you in practice. A real-world case where you’ll find\n(and appreciate) an intersection type is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign(a, b)</code></a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#union-and-intersection-types-conceptually\">Union and Intersection Types, Conceptually</a></p>\n<ul>\n<li><a href=\"#union-types-\">Union types <code>|</code></a></li>\n<li><a href=\"#intersection-types-\">Intersection types <code>&#x26;</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#union-types-in-typescript\">Union Types in TypeScript</a></p>\n<ul>\n<li><a href=\"#working-with-union-types\">Working with union types</a></li>\n<li><a href=\"#narrowing-with-type-guards\">Narrowing with type guards</a></li>\n<li><a href=\"#discriminated-unions\">Discriminated Unions</a></li>\n</ul>\n</li>\n<li><a href=\"#intersection-types-in-typescript\">Intersection Types in TypeScript</a></li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/06-union-and-intersection-types/"},"frontmatter":{"title":"Union and Intersection Types","course":"fundamentals-v4","date":"October 23, 2023","description":"We will discuss and explore TypeScript's union and intersection types,\nwhich are effectively \"AND\" and \"OR\" boolean logic operators for types.\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/06-union-and-intersection-types/","title":"Union and Intersection Types","course":"fundamentals-v4","order":6,"previous":{"fields":{"slug":"/course/fundamentals-v4/05-structural-vs-nominal-types/"},"frontmatter":{"title":"Structural vs. Nominal Types","order":5,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/07-interfaces-and-type-aliases/"},"frontmatter":{"title":"Interfaces and Type Aliases","order":7,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}