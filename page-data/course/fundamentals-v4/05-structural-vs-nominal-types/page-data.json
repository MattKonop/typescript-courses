{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/05-structural-vs-nominal-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"}]}},"markdownRemark":{"id":"e6c79beb-6e1f-502e-889c-447c28753c46","excerpt":"Ways of categorizing type systems Now is a good time to take a step back and think about some conceptual\naspects of types and type systems. How is TypeScript…","html":"<h2 id=\"ways-of-categorizing-type-systems\" style=\"position:relative;\"><a href=\"#ways-of-categorizing-type-systems\" aria-label=\"ways of categorizing type systems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ways of categorizing type systems</h2>\n<p>Now is a good time to take a step back and think about some conceptual\naspects of types and type systems. How is TypeScript similar and different from Java and JavaScript?</p>\n<h3 id=\"what-is-type-checking\" style=\"position:relative;\"><a href=\"#what-is-type-checking\" aria-label=\"what is type checking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is type checking?</h3>\n<p>Type-checking can be thought of as a task that attempts to evaluate\nthe question of <em>compatibility</em> or <em>type equivalence</em>:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function foo(x: any): void' >foo</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) x: any' >x</data-lsp></span><span style=\"color: #24292F\">) {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// ... mystery code ...</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #6E7781\">// TYPE CHECKING</span></div><div class='line'><span style=\"color: #6E7781\">// -------------</span></div><div class='line'><span style=\"color: #6E7781\">// Is `myValue` type-equivalent to</span></div><div class='line'><span style=\"color: #6E7781\">//     what `foo` wants to receive?</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function foo(x: any): void' >foo</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const myValue: any' >myValue</data-lsp>)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFDrSSVajz4BqFArtcWQaAC8oAN4BfUGUqSCtEGAC0S9FyxKFtEl0josqRqWjQAFAA8AlKNqhQIUADpHrfM2oAnfKAYATag8e0YnLAwaAAKgCaAAoAoqAAwgASMfEA0rAAcgDioep5+Rp2sNIABmycyDwloFj4iNQK1ACOXKgAbhTUkCxY0KE2NgDuABZkLCUkRtWD-FjSvaBu1OjU7dQA-JpGxuXc1OZAA'>Try</a></div></pre>\n<p>This question can be asked at a function call - such as <code>foo(myValue)</code> in the above example - as an assignment,</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #6E7781\">// is the value y holds type-equivalent to what `x` allows?</span></div><div class='line'><span style=\"color: #24292F\">x </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> y</span></div></code></div></pre>\n<p>…a return,</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">myStrings</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> [</span><span style=\"color: #0A3069\">\"a\"</span><span style=\"color: #24292F\">]</span></div><div class='line'><span style=\"color: #6E7781\">/// ---cut---</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">bar</span><span style=\"color: #24292F\">()</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">[] {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// ...mystery code that might return early...</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">//</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// TYPE CHECKING</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// -------------</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// Is `myStrings` type-equivalent to</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">//     what `bar` states it will return?</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">return</span><span style=\"color: #24292F\"> myStrings</span></div><div class='line'><span style=\"color: #24292F\">}</span></div></code></div></pre>\n<p>or in some other more exotic situations <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<h3 id=\"static-vs-dynamic\" style=\"position:relative;\"><a href=\"#static-vs-dynamic\" aria-label=\"static vs dynamic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static vs dynamic</h3>\n<p>Sorting type systems as either <a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#static-type-checking\">static</a> or dynamic has to do with whether type-checking\nis performed <strong>at compile time or runtime</strong>.</p>\n<blockquote>\n<p><strong>TypeScript’s type system is static.</strong></p>\n</blockquote>\n<p>Java, C#, C++ all fit into this category. Keep in mind that inferrence can still\noccur in static type systems — TypeScript, Scala, and Haskell all have some form of static type checking.</p>\n<p><strong>Dynamic type systems perform their “type equivalence” evaluation at runtime</strong>. JavaScript, Python,\nRuby, Perl and PHP fall into this category.</p>\n<h3 id=\"nominal-vs-structural\" style=\"position:relative;\"><a href=\"#nominal-vs-structural\" aria-label=\"nominal vs structural permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nominal vs structural</h3>\n<p><strong>Nominal type systems are all about NAMES</strong>. Let’s take a look at a simple Java example:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">java</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">Car</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  String</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\">make;</span></div><div class='line'><span style=\"color: #24292F\">  String</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\">model;</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">int</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\">make;</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\">CarChecker</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #6E7781\">// takes a `Car` argument, returns a `String`</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #CF222E\">public</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">static</span><span style=\"color: #24292F\"> String </span><span style=\"color: #8250DF\">checkCar</span><span style=\"color: #24292F\">(Car </span><span style=\"color: #953800\">car</span><span style=\"color: #24292F\">) {  }</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">Car</span><span style=\"color: #953800\"> </span><span style=\"color: #24292F\">myCar</span><span style=\"color: #953800\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\">Car</span><span style=\"color: #24292F\">();</span></div><div class='line'><span style=\"color: #6E7781\">// TYPE CHECKING</span></div><div class='line'><span style=\"color: #6E7781\">// -------------</span></div><div class='line'><span style=\"color: #6E7781\">// Is `myCar` type-equivalent to</span></div><div class='line'><span style=\"color: #6E7781\">//     what `checkCar` wants as an argument?</span></div><div class='line'><span style=\"color: #24292F\">CarChecker.</span><span style=\"color: #8250DF\">checkCar</span><span style=\"color: #24292F\">(myCar);</span></div></code></div></pre>\n<p>In the code above, when considering the question of type equivalence on the last line,\nall that matters is whether <code>myCar</code> is an instance of the class <strong>named</strong> <code>Car</code>.</p>\n<blockquote>\n<p>TypeScript type system is structural</p>\n</blockquote>\n<p><strong>Structural type systems are all about STRUCTURE or SHAPE</strong>. Let’s look at a TypeScript example:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Car' >Car</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Car.isElectric: boolean' >isElectric</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='class Truck' >Truck</data-lsp></span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Truck.make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Truck.model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Truck.year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) Truck.towingCapacity: number' >towingCapacity</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">const</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\"><data-lsp lsp='const vehicle: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >vehicle</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) make: string' >make</data-lsp>: </span><span style=\"color: #0A3069\">\"Honda\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) model: string' >model</data-lsp>: </span><span style=\"color: #0A3069\">\"Accord\"</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='(property) year: number' >year</data-lsp>: </span><span style=\"color: #0550AE\">2017</span><span style=\"color: #24292F\">,</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> {</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span></div><div class='line'><span style=\"color: #24292F\">  </span><span style=\"color: #953800\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span></div><div class='line'><span style=\"color: #24292F\">}) {</span></div><div class='line'><span style=\"color: #24292F\">  <data-lsp lsp='var console: Console' >console</data-lsp>.</span><span style=\"color: #8250DF\"><data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">`${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) make: string' >make</data-lsp></span><span style=\"color: #0A3069\">} ${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) model: string' >model</data-lsp></span><span style=\"color: #0A3069\">} (${</span><span style=\"color: #24292F\"><data-lsp lsp='(parameter) car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >car</data-lsp></span><span style=\"color: #0A3069\">.</span><span style=\"color: #24292F\"><data-lsp lsp='(property) year: number' >year</data-lsp></span><span style=\"color: #0A3069\">})`</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #24292F\">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Car(): Car' >Car</data-lsp></span><span style=\"color: #24292F\">()) </span><span style=\"color: #6E7781\">// Fine</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">new</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='constructor Truck(): Truck' >Truck</data-lsp></span><span style=\"color: #24292F\">()) </span><span style=\"color: #6E7781\">// Fine</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function printCar(car: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}): void' >printCar</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='const vehicle: {&#10;    make: string;&#10;    model: string;&#10;    year: number;&#10;}' >vehicle</data-lsp>) </span><span style=\"color: #6E7781\">// Fine</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0AKsD2AHApraBPASQDt5p4BDAG3gC8Lz1iAuUAM2smwChEqLIkUAGEKsUAG9uoUAFsKAa2ysYCYgHNpc9ABNsVFXHgat+bGNbEArrIBGuLfEgBRKtmQJErW+nRuKxNwAvty8-IKgACqwVogKklrySoZqmjKyuvopxmmgZhag1nYOMtDoAO45opgUiGT4ljb2sMGhiEwwoABu2AAWSG6gALwJ6YrKoABEABJMOhSTADSJmQZTAIKI7bA6S6bmsKwATAAMAIwA7Msh3GxWxMjwTKCYatCisAAUiAVSY8mgVQ5FZ6NZAkwyfKHQpNBxBACUo1A7WIkD82AAdFR0OpPgADAAkEh+sAxSWwQVARJJZNWlM+1LEGKhCLx8Na3FexneYk+xGw5REvPhiJAoAAYsYeFziDyvvzBdFYgpPiLQGLJfzOW8Pp8ev0+NhRWBNdggA'>Try</a></div></pre>\n<p>The function <code>printCar</code> doesn’t care about which constructor its argument came\nfrom, it only cares about whether it has:</p>\n<ul>\n<li>A <code>make</code> property that’s of type <code>string</code></li>\n<li>A <code>model</code> property that’s of type <code>string</code></li>\n<li>A <code>year</code> property that’s of type <code>number</code></li>\n</ul>\n<p>If the argument passed to it meets these requirements, <code>printCar</code> is happy.</p>\n<h3 id=\"duck-typing\" style=\"position:relative;\"><a href=\"#duck-typing\" aria-label=\"duck typing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duck typing</h3>\n<p>“Duck typing” gets its name from the “duck test”.</p>\n<blockquote>\n<p>“If it looks like a duck, swims like a duck, and quacks like a duck, then it’s probably is a duck”.</p>\n</blockquote>\n<p>In practice, this is very similar to structural typing, but “Duck typing” is usually\nused to describe dynamic type systems.</p>\n<h3 id=\"strong-vs-weak-types\" style=\"position:relative;\"><a href=\"#strong-vs-weak-types\" aria-label=\"strong vs weak types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>“Strong” vs. “Weak” types</h3>\n<p>These terms, while used frequently, have no agreed-upon technical definition. In the context of\nTypeScript it’s common for those who say “strong” to really mean “static”.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Among these are: generator function <code>yield</code>, accessor/mutator-based property conventions.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#ways-of-categorizing-type-systems\">Ways of categorizing type systems</a></p>\n<ul>\n<li><a href=\"#what-is-type-checking\">What is type checking?</a></li>\n<li><a href=\"#static-vs-dynamic\">Static vs dynamic</a></li>\n<li><a href=\"#nominal-vs-structural\">Nominal vs structural</a></li>\n<li><a href=\"#duck-typing\">Duck typing</a></li>\n<li><a href=\"#strong-vs-weak-types\">“Strong” vs. “Weak” types</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/course/fundamentals-v4/05-structural-vs-nominal-types/"},"frontmatter":{"title":"Structural vs. Nominal Types","course":"fundamentals-v4","date":"June 08, 2021","description":"In this unit, we will explore how TypeScript is fundamentally different from\nnominal type systems, such as the ones found in Java and C++.\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/05-structural-vs-nominal-types/","title":"Structural vs. Nominal Types","course":"fundamentals-v4","order":5,"previous":{"fields":{"slug":"/course/fundamentals-v4/04-objects-arrays-and-tuples/"},"frontmatter":{"title":"Objects, Arrays and Tuples","order":4,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/06-union-and-intersection-types/"},"frontmatter":{"title":"Union and Intersection Types","order":6,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}