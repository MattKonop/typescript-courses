{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/course/fundamentals-v4/08-exercise-json-types/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Learn TypeScript w/ Mike North","courses":[{"id":"fundamentals-v3","name":"TypeScript Fundamentals v3","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"fundamentals-v4","name":"TypeScript Fundamentals v4","summary":"Learn everything you need to know in order to confidently and successfully use TypeScript to build a modern JavaScript app."},{"id":"intermediate-v1","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"},{"id":"making-typescript-stick","name":"Making TypeScript Stick","summary":"Tackle a series of challenges designed to reinforce your knowledge and make\nthe important concepts truly \"stick\" in your mind.\n"},{"id":"enterprise-v2","name":"Enterprise TypeScript v2","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"full-stack-typescript","name":"Full Stack TypeScript","summary":"Combine TypeScript and GraphQL's type systems to create full-stack, fully\ntype-checked code bases that are shockingly easy to refactor and maintain.\n"},{"id":"intermediate-v2","name":"Intermediate TypeScript","summary":"Leverage TypeScript's strengths to provide clarity in the face of\ncomplexity, while protecting your codebase and team from it's weaknesses.\n"}]}},"markdownRemark":{"id":"7159aa13-b40f-5201-bf54-6345cd4b0e1f","excerpt":"Let’s put our knowledge to the test, by defining a type\nthat describes any allowable JSON value. Here’s the relevant section of the specification: Here’s your…","html":"<p>Let’s put our knowledge to the test, by defining a type\nthat describes any allowable JSON value.</p>\n<p>Here’s the relevant section of the specification:</p>\n<pre class=\"shiki github-light\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">md</div><div class='code-container'><code><div class='line'><span style=\"color: #24292F\">A JSON value MUST be an</span></div><div class='line'></div><div class='line'><span style=\"color: #953800\">-</span><span style=\"color: #24292F\"> object</span></div><div class='line'><span style=\"color: #953800\">-</span><span style=\"color: #24292F\"> array</span></div><div class='line'><span style=\"color: #953800\">-</span><span style=\"color: #24292F\"> number</span></div><div class='line'><span style=\"color: #953800\">-</span><span style=\"color: #24292F\"> string,</span></div><div class='line'></div><div class='line'><span style=\"color: #24292F\">or one of the following three literal names:</span></div><div class='line'></div><div class='line'><span style=\"color: #953800\">-</span><span style=\"color: #24292F\"> false</span></div><div class='line'><span style=\"color: #953800\">-</span><span style=\"color: #24292F\"> true</span></div><div class='line'><span style=\"color: #953800\">-</span><span style=\"color: #24292F\"> null</span></div></code></div></pre>\n<p>Here’s your starting point code:</p>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONObject = any' >JSONObject</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONArray = any' >JSONArray</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONValue = any' >JSONValue</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">any</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">////// DO NOT EDIT ANY CODE BELOW THIS LINE //////</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: any' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONValue = any' >JSONValue</data-lsp></span><span style=\"color: #24292F\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// POSITIVE test cases (must pass)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"hello\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">([</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">8</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">16</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">23</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">42</span><span style=\"color: #24292F\">])</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) greeting: string' >greeting</data-lsp>: </span><span style=\"color: #0A3069\">\"hello\"</span><span style=\"color: #24292F\"> })</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) a: {&#10;    b: (string | number)[];&#10;}' >a</data-lsp>: { <data-lsp lsp='(property) b: (string | number)[]' >b</data-lsp>: [</span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\">] } })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// NEGATIVE test cases (must fail)</span></div><div class='line'><span style=\"color: #6E7781\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #6E7781\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> {})</span></div><div class='line'><span style=\"color: #6E7781\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #6E7781\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='any' >BigInt</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">143</span><span style=\"color: #24292F\">))</span></div><div class='line'><span style=\"color: #6E7781\"><data-err>// @ts-expect-error</data-err></span></div><span class=\"error\"><span>Unused '@ts-expect-error' directive.</span><span class=\"code\">2578</span></span><span class=\"error-behind\">Unused '@ts-expect-error' directive.</span><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp>)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsAOAUAC4CeADpKAFIDKA8gHI0BGAVpAMYGgC8oAhgHZFCpctXoBBWLyLc+g4WUq06ANV4AbAK7keAoXhCGwAERqgGAFVABRYwEkr4ugE1QAYRrHroAELWAMjQA6qAWABJ2VKD+dnTeRiB4AGaa-BwAlnD8oOmIYnQAFLzQAOao+WpakACUoADeAL54BmAACjRUDnYq3gSQiJxsvIj9oAUAtpoDoCTDiNV4ufkFAEQAFpDq6nArC0vKBQDaACwANKA45wCMGNcAbOdoAMznx2gAunt5B3WgJdCQSAEdL8MqgdabbYrUANL7LJIaEZwg4EaDaZH0Ar8TRbDGFX68VC-RioQ5oc4vcFJOA7d4wmELFrmawAcXEFm6vX6g2GowmU04CPS6gWIAgBEQAFpIAAPMgcaWwBCLb6Ygq1LgAPnBuyZ4Al0rl7AIivg0BVyzY6jm9VheoNsvlJpgZotB1SABNIEkQZAPaKwPqpY7jablftMT50iU7PwCAUrscntUA+Lg0aFS7w6rChG6NUgA'>Try</a></div></pre>\n<details>\n  <summary>Spoiler warning // Click to reveal answer</summary>\n<pre class=\"shiki github-light twoslash lsp\" style=\"background-color: #ffffff; color: #24292f\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONPrimitive = string | number | boolean | null' >JSONPrimitive</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">number</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">boolean</span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">null</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONObject = {&#10;    [k: string]: JSONValue;&#10;}' >JSONObject</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> { [</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) k: string' >k</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #0550AE\">string</span><span style=\"color: #24292F\">]</span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONArray | JSONObject' >JSONValue</data-lsp></span><span style=\"color: #24292F\"> }</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONArray = JSONValue[]' >JSONArray</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONArray | JSONObject' >JSONValue</data-lsp></span><span style=\"color: #24292F\">[]</span></div><div class='line'><span style=\"color: #CF222E\">type</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONArray | JSONObject' >JSONValue</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">=</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONArray = JSONValue[]' >JSONArray</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONObject = {&#10;    [k: string]: JSONValue;&#10;}' >JSONObject</data-lsp></span><span style=\"color: #24292F\"> </span><span style=\"color: #CF222E\">|</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONPrimitive = string | number | boolean | null' >JSONPrimitive</data-lsp></span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">////// DO NOT EDIT ANY CODE BELOW THIS LINE //////</span></div><div class='line'><span style=\"color: #CF222E\">function</span><span style=\"color: #24292F\"> </span><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #953800\"><data-lsp lsp='(parameter) arg: JSONValue' >arg</data-lsp></span><span style=\"color: #CF222E\">:</span><span style=\"color: #24292F\"> </span><span style=\"color: #953800\"><data-lsp lsp='type JSONValue = JSONPrimitive | JSONArray | JSONObject' >JSONValue</data-lsp></span><span style=\"color: #24292F\">) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// POSITIVE test cases (must pass)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0A3069\">\"hello\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">([</span><span style=\"color: #0550AE\">4</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">8</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">15</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">16</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">23</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">42</span><span style=\"color: #24292F\">])</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) greeting: string' >greeting</data-lsp>: </span><span style=\"color: #0A3069\">\"hello\"</span><span style=\"color: #24292F\"> })</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">false</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">true</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">null</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">({ <data-lsp lsp='(property) a: {&#10;    b: (string | number)[];&#10;}' >a</data-lsp>: { <data-lsp lsp='(property) b: (string | number)[]' >b</data-lsp>: [</span><span style=\"color: #0550AE\">2</span><span style=\"color: #24292F\">, </span><span style=\"color: #0550AE\">3</span><span style=\"color: #24292F\">, </span><span style=\"color: #0A3069\">\"foo\"</span><span style=\"color: #24292F\">] } })</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #6E7781\">// NEGATIVE test cases (must fail)</span></div><div class='line'><span style=\"color: #6E7781\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(() </span><span style=\"color: #CF222E\">=&gt;</span><span style=\"color: #24292F\"> </span><span style=\"color: #0A3069\">\"\"</span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #6E7781\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #CF222E\">class</span><span style=\"color: #24292F\"> {})</span></div><div class='line'><span style=\"color: #6E7781\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='var undefined' >undefined</data-lsp></span><span style=\"color: #24292F\">)</span></div><div class='line'><span style=\"color: #6E7781\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\"><data-lsp lsp='any' >BigInt</data-lsp></span><span style=\"color: #24292F\">(</span><span style=\"color: #0550AE\">143</span><span style=\"color: #24292F\">))</span></div><div class='line'><span style=\"color: #6E7781\">// @ts-expect-error</span></div><div class='line'><span style=\"color: #8250DF\"><data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp></span><span style=\"color: #24292F\">(<data-lsp lsp='function isJSON(arg: JSONValue): void' >isJSON</data-lsp>)</span></div></code><a class='playground-link' href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYDsAOAUAC4CeADpKAFIDKA8gHIAK0AlgLbMHMBu5AvKIgIsAdgHNQAH1DCArqwBGMSaHlw4AG0gBDYctnr1hUuWr0a8gFaQAxgVD8A3qADaAa1SCRogLqpTdADUtdRlyAF8jMkpaOgBBWC0ie2j6IJDIZ29Ikxi00OT-eOhE5X9zK1tSmKY2Dm5IPDwQZrAAERpQOhoAFVAAUVaASV7YugBNUABhGla+0AAhPoAZGgB1UG6ACUGqUCXBujmWkDwAMxlhW2Y4XWZEfwAKLWhRP1zg0IBKUAcIprAGDQqMNBgE5gRIIJQNYtIhIaAHqwZFCSLDEJ88HdHgAiAAWkAMcGxGKxMQezgALAAaUA4GkARgwDIAbDS0ABmGkUtDeEn3MlOUTQSCQThiVB4gnqImgMJ8x6nYJw+VkoRfTH8+gPfTqFVapxaVBOeSoZxoGmc0DY05qbHeWWyjH-Tp9ADisW6oPBkLsMLhiARSKhiuYuud4AIiAAtJAAB5kWwx2AIDWPB7fXgAPitxPDkZj8ZsBCT8GgqbJ1nUaJ+crz0bjCeLMFL5a1FwAJpBTsxhJB2xiQBB8w2iyWU6StfNmKJBsICA96RT2Z8B2AI-XC4nm+PNXQHhO6J8gA'>Try</a></div></pre>\n</details>","tableOfContents":"","fields":{"slug":"/course/fundamentals-v4/08-exercise-json-types/"},"frontmatter":{"title":"JSON types","course":"fundamentals-v4","date":"June 08, 2021","description":"We will take on our first challenge together: defining types\nthat describe any valid JSON value\n"}}},"pageContext":{"slug":"/course/fundamentals-v4/08-exercise-json-types/","title":"JSON types","course":"fundamentals-v4","order":8,"previous":{"fields":{"slug":"/course/fundamentals-v4/07-interfaces-and-type-aliases/"},"frontmatter":{"title":"Interfaces and Type Aliases","order":7,"course":"fundamentals-v4","isExercise":null}},"next":{"fields":{"slug":"/course/fundamentals-v4/09-functions/"},"frontmatter":{"title":"Functions","order":9,"course":"fundamentals-v4","isExercise":null}}}},
    "staticQueryHashes": ["2785745750","2841359383"]}